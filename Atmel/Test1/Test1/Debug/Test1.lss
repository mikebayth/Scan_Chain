
Test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d0  00802000  000023a4  00002438  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000b24  008020d0  008020d0  00002508  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002508  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000488  00000000  00000000  00002538  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000095be  00000000  00000000  000029c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001df8  00000000  00000000  0000bf7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00006efa  00000000  00000000  0000dd76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000bcc  00000000  00000000  00014c70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0002eb96  00000000  00000000  0001583c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000039d4  00000000  00000000  000443d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000470  00000000  00000000  00047da8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000b481  00000000  00000000  00048218  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
       2:	00 00       	nop
       4:	23 c1       	rjmp	.+582    	; 0x24c <__bad_interrupt>
       6:	00 00       	nop
       8:	21 c1       	rjmp	.+578    	; 0x24c <__bad_interrupt>
       a:	00 00       	nop
       c:	1f c1       	rjmp	.+574    	; 0x24c <__bad_interrupt>
       e:	00 00       	nop
      10:	1d c1       	rjmp	.+570    	; 0x24c <__bad_interrupt>
      12:	00 00       	nop
      14:	1b c1       	rjmp	.+566    	; 0x24c <__bad_interrupt>
      16:	00 00       	nop
      18:	19 c1       	rjmp	.+562    	; 0x24c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	17 c1       	rjmp	.+558    	; 0x24c <__bad_interrupt>
      1e:	00 00       	nop
      20:	15 c1       	rjmp	.+554    	; 0x24c <__bad_interrupt>
      22:	00 00       	nop
      24:	13 c1       	rjmp	.+550    	; 0x24c <__bad_interrupt>
      26:	00 00       	nop
      28:	11 c1       	rjmp	.+546    	; 0x24c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0f c1       	rjmp	.+542    	; 0x24c <__bad_interrupt>
      2e:	00 00       	nop
      30:	0d c1       	rjmp	.+538    	; 0x24c <__bad_interrupt>
      32:	00 00       	nop
      34:	0b c1       	rjmp	.+534    	; 0x24c <__bad_interrupt>
      36:	00 00       	nop
      38:	09 c1       	rjmp	.+530    	; 0x24c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	07 c1       	rjmp	.+526    	; 0x24c <__bad_interrupt>
      3e:	00 00       	nop
      40:	05 c1       	rjmp	.+522    	; 0x24c <__bad_interrupt>
      42:	00 00       	nop
      44:	03 c1       	rjmp	.+518    	; 0x24c <__bad_interrupt>
      46:	00 00       	nop
      48:	01 c1       	rjmp	.+514    	; 0x24c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ff c0       	rjmp	.+510    	; 0x24c <__bad_interrupt>
      4e:	00 00       	nop
      50:	fd c0       	rjmp	.+506    	; 0x24c <__bad_interrupt>
      52:	00 00       	nop
      54:	fb c0       	rjmp	.+502    	; 0x24c <__bad_interrupt>
      56:	00 00       	nop
      58:	f9 c0       	rjmp	.+498    	; 0x24c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f7 c0       	rjmp	.+494    	; 0x24c <__bad_interrupt>
      5e:	00 00       	nop
      60:	f5 c0       	rjmp	.+490    	; 0x24c <__bad_interrupt>
      62:	00 00       	nop
      64:	f3 c0       	rjmp	.+486    	; 0x24c <__bad_interrupt>
      66:	00 00       	nop
      68:	f1 c0       	rjmp	.+482    	; 0x24c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ef c0       	rjmp	.+478    	; 0x24c <__bad_interrupt>
      6e:	00 00       	nop
      70:	ed c0       	rjmp	.+474    	; 0x24c <__bad_interrupt>
      72:	00 00       	nop
      74:	eb c0       	rjmp	.+470    	; 0x24c <__bad_interrupt>
      76:	00 00       	nop
      78:	e9 c0       	rjmp	.+466    	; 0x24c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e7 c0       	rjmp	.+462    	; 0x24c <__bad_interrupt>
      7e:	00 00       	nop
      80:	e5 c0       	rjmp	.+458    	; 0x24c <__bad_interrupt>
      82:	00 00       	nop
      84:	e3 c0       	rjmp	.+454    	; 0x24c <__bad_interrupt>
      86:	00 00       	nop
      88:	3e c1       	rjmp	.+636    	; 0x306 <__vector_34>
      8a:	00 00       	nop
      8c:	df c0       	rjmp	.+446    	; 0x24c <__bad_interrupt>
      8e:	00 00       	nop
      90:	dd c0       	rjmp	.+442    	; 0x24c <__bad_interrupt>
      92:	00 00       	nop
      94:	db c0       	rjmp	.+438    	; 0x24c <__bad_interrupt>
      96:	00 00       	nop
      98:	d9 c0       	rjmp	.+434    	; 0x24c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d7 c0       	rjmp	.+430    	; 0x24c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d5 c0       	rjmp	.+426    	; 0x24c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d3 c0       	rjmp	.+422    	; 0x24c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d1 c0       	rjmp	.+418    	; 0x24c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cf c0       	rjmp	.+414    	; 0x24c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cd c0       	rjmp	.+410    	; 0x24c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cb c0       	rjmp	.+406    	; 0x24c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c9 c0       	rjmp	.+402    	; 0x24c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c7 c0       	rjmp	.+398    	; 0x24c <__bad_interrupt>
      be:	00 00       	nop
      c0:	c5 c0       	rjmp	.+394    	; 0x24c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c3 c0       	rjmp	.+390    	; 0x24c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c1 c0       	rjmp	.+386    	; 0x24c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bf c0       	rjmp	.+382    	; 0x24c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	bd c0       	rjmp	.+378    	; 0x24c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	bb c0       	rjmp	.+374    	; 0x24c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b9 c0       	rjmp	.+370    	; 0x24c <__bad_interrupt>
      da:	00 00       	nop
      dc:	b7 c0       	rjmp	.+366    	; 0x24c <__bad_interrupt>
      de:	00 00       	nop
      e0:	b5 c0       	rjmp	.+362    	; 0x24c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b3 c0       	rjmp	.+358    	; 0x24c <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b1 c0       	rjmp	.+354    	; 0x24c <__bad_interrupt>
      ea:	00 00       	nop
      ec:	af c0       	rjmp	.+350    	; 0x24c <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ad c0       	rjmp	.+346    	; 0x24c <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ab c0       	rjmp	.+342    	; 0x24c <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a9 c0       	rjmp	.+338    	; 0x24c <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a7 c0       	rjmp	.+334    	; 0x24c <__bad_interrupt>
      fe:	00 00       	nop
     100:	a5 c0       	rjmp	.+330    	; 0x24c <__bad_interrupt>
     102:	00 00       	nop
     104:	a3 c0       	rjmp	.+326    	; 0x24c <__bad_interrupt>
     106:	00 00       	nop
     108:	a1 c0       	rjmp	.+322    	; 0x24c <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9f c0       	rjmp	.+318    	; 0x24c <__bad_interrupt>
     10e:	00 00       	nop
     110:	9d c0       	rjmp	.+314    	; 0x24c <__bad_interrupt>
     112:	00 00       	nop
     114:	9b c0       	rjmp	.+310    	; 0x24c <__bad_interrupt>
     116:	00 00       	nop
     118:	99 c0       	rjmp	.+306    	; 0x24c <__bad_interrupt>
     11a:	00 00       	nop
     11c:	97 c0       	rjmp	.+302    	; 0x24c <__bad_interrupt>
     11e:	00 00       	nop
     120:	95 c0       	rjmp	.+298    	; 0x24c <__bad_interrupt>
     122:	00 00       	nop
     124:	93 c0       	rjmp	.+294    	; 0x24c <__bad_interrupt>
     126:	00 00       	nop
     128:	91 c0       	rjmp	.+290    	; 0x24c <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8f c0       	rjmp	.+286    	; 0x24c <__bad_interrupt>
     12e:	00 00       	nop
     130:	8d c0       	rjmp	.+282    	; 0x24c <__bad_interrupt>
     132:	00 00       	nop
     134:	8b c0       	rjmp	.+278    	; 0x24c <__bad_interrupt>
     136:	00 00       	nop
     138:	89 c0       	rjmp	.+274    	; 0x24c <__bad_interrupt>
     13a:	00 00       	nop
     13c:	87 c0       	rjmp	.+270    	; 0x24c <__bad_interrupt>
     13e:	00 00       	nop
     140:	85 c0       	rjmp	.+266    	; 0x24c <__bad_interrupt>
     142:	00 00       	nop
     144:	83 c0       	rjmp	.+262    	; 0x24c <__bad_interrupt>
     146:	00 00       	nop
     148:	81 c0       	rjmp	.+258    	; 0x24c <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7f c0       	rjmp	.+254    	; 0x24c <__bad_interrupt>
     14e:	00 00       	nop
     150:	7d c0       	rjmp	.+250    	; 0x24c <__bad_interrupt>
     152:	00 00       	nop
     154:	7b c0       	rjmp	.+246    	; 0x24c <__bad_interrupt>
     156:	00 00       	nop
     158:	79 c0       	rjmp	.+242    	; 0x24c <__bad_interrupt>
     15a:	00 00       	nop
     15c:	77 c0       	rjmp	.+238    	; 0x24c <__bad_interrupt>
     15e:	00 00       	nop
     160:	75 c0       	rjmp	.+234    	; 0x24c <__bad_interrupt>
     162:	00 00       	nop
     164:	73 c0       	rjmp	.+230    	; 0x24c <__bad_interrupt>
     166:	00 00       	nop
     168:	71 c0       	rjmp	.+226    	; 0x24c <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6f c0       	rjmp	.+222    	; 0x24c <__bad_interrupt>
     16e:	00 00       	nop
     170:	6d c0       	rjmp	.+218    	; 0x24c <__bad_interrupt>
     172:	00 00       	nop
     174:	6b c0       	rjmp	.+214    	; 0x24c <__bad_interrupt>
     176:	00 00       	nop
     178:	69 c0       	rjmp	.+210    	; 0x24c <__bad_interrupt>
     17a:	00 00       	nop
     17c:	67 c0       	rjmp	.+206    	; 0x24c <__bad_interrupt>
     17e:	00 00       	nop
     180:	65 c0       	rjmp	.+202    	; 0x24c <__bad_interrupt>
     182:	00 00       	nop
     184:	63 c0       	rjmp	.+198    	; 0x24c <__bad_interrupt>
     186:	00 00       	nop
     188:	61 c0       	rjmp	.+194    	; 0x24c <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5f c0       	rjmp	.+190    	; 0x24c <__bad_interrupt>
     18e:	00 00       	nop
     190:	5d c0       	rjmp	.+186    	; 0x24c <__bad_interrupt>
     192:	00 00       	nop
     194:	5b c0       	rjmp	.+182    	; 0x24c <__bad_interrupt>
     196:	00 00       	nop
     198:	59 c0       	rjmp	.+178    	; 0x24c <__bad_interrupt>
     19a:	00 00       	nop
     19c:	57 c0       	rjmp	.+174    	; 0x24c <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	55 c0       	rjmp	.+170    	; 0x24c <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	53 c0       	rjmp	.+166    	; 0x24c <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	51 c0       	rjmp	.+162    	; 0x24c <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4f c0       	rjmp	.+158    	; 0x24c <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	4d c0       	rjmp	.+154    	; 0x24c <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	4b c0       	rjmp	.+150    	; 0x24c <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	49 c0       	rjmp	.+146    	; 0x24c <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	47 c0       	rjmp	.+142    	; 0x24c <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	45 c0       	rjmp	.+138    	; 0x24c <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	43 c0       	rjmp	.+134    	; 0x24c <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	41 c0       	rjmp	.+130    	; 0x24c <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3f c0       	rjmp	.+126    	; 0x24c <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	3d c0       	rjmp	.+122    	; 0x24c <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	3b c0       	rjmp	.+118    	; 0x24c <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	39 c0       	rjmp	.+114    	; 0x24c <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	37 c0       	rjmp	.+110    	; 0x24c <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	35 c0       	rjmp	.+106    	; 0x24c <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	33 c0       	rjmp	.+102    	; 0x24c <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	31 c0       	rjmp	.+98     	; 0x24c <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2f c0       	rjmp	.+94     	; 0x24c <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2d c0       	rjmp	.+90     	; 0x24c <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 78 0f 	jmp	0x1ef0	; 0x1ef0 <__vector_125>
     1f8:	0c 94 35 10 	jmp	0x206a	; 0x206a <__vector_126>
     1fc:	41 0c       	add	r4, r1
     1fe:	22 0c       	add	r2, r2
     200:	27 0c       	add	r2, r7
     202:	2c 0c       	add	r2, r12
     204:	31 0c       	add	r3, r1
     206:	35 0c       	add	r3, r5
     208:	3a 0c       	add	r3, r10

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	cd bf       	out	0x3d, r28	; 61
     212:	df e3       	ldi	r29, 0x3F	; 63
     214:	de bf       	out	0x3e, r29	; 62
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0c bf       	out	0x3c, r16	; 60

0000021a <__do_copy_data>:
     21a:	10 e2       	ldi	r17, 0x20	; 32
     21c:	a0 e0       	ldi	r26, 0x00	; 0
     21e:	b0 e2       	ldi	r27, 0x20	; 32
     220:	e4 ea       	ldi	r30, 0xA4	; 164
     222:	f3 e2       	ldi	r31, 0x23	; 35
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	0b bf       	out	0x3b, r16	; 59
     228:	02 c0       	rjmp	.+4      	; 0x22e <__do_copy_data+0x14>
     22a:	07 90       	elpm	r0, Z+
     22c:	0d 92       	st	X+, r0
     22e:	a0 3d       	cpi	r26, 0xD0	; 208
     230:	b1 07       	cpc	r27, r17
     232:	d9 f7       	brne	.-10     	; 0x22a <__do_copy_data+0x10>

00000234 <__do_clear_bss>:
     234:	2b e2       	ldi	r18, 0x2B	; 43
     236:	a0 ed       	ldi	r26, 0xD0	; 208
     238:	b0 e2       	ldi	r27, 0x20	; 32
     23a:	01 c0       	rjmp	.+2      	; 0x23e <.do_clear_bss_start>

0000023c <.do_clear_bss_loop>:
     23c:	1d 92       	st	X+, r1

0000023e <.do_clear_bss_start>:
     23e:	a4 3f       	cpi	r26, 0xF4	; 244
     240:	b2 07       	cpc	r27, r18
     242:	e1 f7       	brne	.-8      	; 0x23c <.do_clear_bss_loop>
     244:	0e 94 21 11 	call	0x2242	; 0x2242 <main>
     248:	0c 94 d0 11 	jmp	0x23a0	; 0x23a0 <_exit>

0000024c <__bad_interrupt>:
     24c:	d9 ce       	rjmp	.-590    	; 0x0 <__vectors>

0000024e <ui_init>:
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     24e:	e0 e6       	ldi	r30, 0x60	; 96
     250:	f6 e0       	ldi	r31, 0x06	; 6
     252:	54 e0       	ldi	r21, 0x04	; 4
     254:	51 83       	std	Z+1, r21	; 0x01
     256:	68 e0       	ldi	r22, 0x08	; 8
     258:	61 83       	std	Z+1, r22	; 0x01
     25a:	91 e0       	ldi	r25, 0x01	; 1
     25c:	91 83       	std	Z+1, r25	; 0x01
     25e:	42 e0       	ldi	r20, 0x02	; 2
     260:	41 83       	std	Z+1, r20	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
     262:	a0 e4       	ldi	r26, 0x40	; 64
     264:	b6 e0       	ldi	r27, 0x06	; 6
     266:	12 96       	adiw	r26, 0x02	; 2
     268:	9c 93       	st	X, r25
     26a:	30 e1       	ldi	r19, 0x10	; 16
     26c:	32 83       	std	Z+2, r19	; 0x02
     26e:	20 e2       	ldi	r18, 0x20	; 32
     270:	22 83       	std	Z+2, r18	; 0x02
     272:	80 e4       	ldi	r24, 0x40	; 64
     274:	82 83       	std	Z+2, r24	; 0x02
     276:	70 e8       	ldi	r23, 0x80	; 128
     278:	72 83       	std	Z+2, r23	; 0x02
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     27a:	a0 ea       	ldi	r26, 0xA0	; 160
     27c:	b6 e0       	ldi	r27, 0x06	; 6
     27e:	15 96       	adiw	r26, 0x05	; 5
     280:	9c 93       	st	X, r25
     282:	15 97       	sbiw	r26, 0x05	; 5
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     284:	16 96       	adiw	r26, 0x06	; 6
     286:	4c 93       	st	X, r20
     288:	16 97       	sbiw	r26, 0x06	; 6
     28a:	16 96       	adiw	r26, 0x06	; 6
     28c:	5c 93       	st	X, r21
     28e:	16 97       	sbiw	r26, 0x06	; 6
     290:	16 96       	adiw	r26, 0x06	; 6
     292:	6c 93       	st	X, r22
     294:	16 97       	sbiw	r26, 0x06	; 6
     296:	16 96       	adiw	r26, 0x06	; 6
     298:	3c 93       	st	X, r19
     29a:	16 97       	sbiw	r26, 0x06	; 6
     29c:	16 96       	adiw	r26, 0x06	; 6
     29e:	2c 93       	st	X, r18
     2a0:	16 97       	sbiw	r26, 0x06	; 6
     2a2:	16 96       	adiw	r26, 0x06	; 6
     2a4:	8c 93       	st	X, r24
     2a6:	16 97       	sbiw	r26, 0x06	; 6
     2a8:	16 96       	adiw	r26, 0x06	; 6
     2aa:	7c 93       	st	X, r23
     2ac:	96 83       	std	Z+6, r25	; 0x06
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     2ae:	65 83       	std	Z+5, r22	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     2b0:	56 83       	std	Z+6, r21	; 0x06
     2b2:	46 83       	std	Z+6, r20	; 0x06
     2b4:	36 83       	std	Z+6, r19	; 0x06
     2b6:	26 83       	std	Z+6, r18	; 0x06
     2b8:	86 83       	std	Z+6, r24	; 0x06
     2ba:	86 83       	std	Z+6, r24	; 0x06
     2bc:	08 95       	ret

000002be <ui_powerdown>:
	ioport_set_pin_level(DMY2, LOW);
	ioport_set_pin_level(DMY2, LOW);
}

void ui_powerdown(void)
{
     2be:	08 95       	ret

000002c0 <ui_wakeup_enable>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     2c0:	40 e0       	ldi	r20, 0x00	; 0
     2c2:	58 e1       	ldi	r21, 0x18	; 24
     2c4:	61 e0       	ldi	r22, 0x01	; 1
     2c6:	80 e2       	ldi	r24, 0x20	; 32
     2c8:	96 e0       	ldi	r25, 0x06	; 6
     2ca:	41 d3       	rcall	.+1666   	; 0x94e <ioport_configure_port_pin>
     2cc:	40 e0       	ldi	r20, 0x00	; 0
     2ce:	58 e1       	ldi	r21, 0x18	; 24
     2d0:	62 e0       	ldi	r22, 0x02	; 2
     2d2:	80 e2       	ldi	r24, 0x20	; 32
     2d4:	96 e0       	ldi	r25, 0x06	; 6
     2d6:	3b d3       	rcall	.+1654   	; 0x94e <ioport_configure_port_pin>
     2d8:	40 e0       	ldi	r20, 0x00	; 0
     2da:	58 e1       	ldi	r21, 0x18	; 24
     2dc:	64 e0       	ldi	r22, 0x04	; 4
     2de:	80 e2       	ldi	r24, 0x20	; 32
     2e0:	96 e0       	ldi	r25, 0x06	; 6
     2e2:	35 d3       	rcall	.+1642   	; 0x94e <ioport_configure_port_pin>
     2e4:	40 e0       	ldi	r20, 0x00	; 0
     2e6:	58 e1       	ldi	r21, 0x18	; 24
     2e8:	68 e0       	ldi	r22, 0x08	; 8
     2ea:	80 e2       	ldi	r24, 0x20	; 32
     2ec:	96 e0       	ldi	r25, 0x06	; 6
     2ee:	2f d3       	rcall	.+1630   	; 0x94e <ioport_configure_port_pin>
	ioport_configure_pin(GPIO_PUSH_BUTTON_2,
			IOPORT_DIR_INPUT | IOPORT_PULL_UP);
	ioport_configure_pin(GPIO_PUSH_BUTTON_3,
			IOPORT_DIR_INPUT | IOPORT_PULL_UP);
	port = ioport_pin_to_port(GPIO_PUSH_BUTTON_0);
	port->INT0MASK = 0x0F;
     2f0:	e0 e2       	ldi	r30, 0x20	; 32
     2f2:	f6 e0       	ldi	r31, 0x06	; 6
     2f4:	8f e0       	ldi	r24, 0x0F	; 15
     2f6:	82 87       	std	Z+10, r24	; 0x0a
	port->INTCTRL = PORT_INT0LVL_LO_gc;
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	81 87       	std	Z+9, r24	; 0x09
     2fc:	08 95       	ret

000002fe <ui_wakeup_disable>:

void ui_wakeup_disable(void)
{
	PORT_t *port;
	port = ioport_pin_to_port(GPIO_PUSH_BUTTON_0);
	port->INT0MASK = 0x00;
     2fe:	e0 e2       	ldi	r30, 0x20	; 32
     300:	f6 e0       	ldi	r31, 0x06	; 6
     302:	12 86       	std	Z+10, r1	; 0x0a
     304:	08 95       	ret

00000306 <__vector_34>:
 * Note:
 * This interrupt is enable when the USB host enable remotewakeup feature
 * This interrupt wakeup the CPU if this one is in idle mode
 */
ISR(PORTB_INT0_vect)
{
     306:	1f 92       	push	r1
     308:	0f 92       	push	r0
     30a:	0f b6       	in	r0, 0x3f	; 63
     30c:	0f 92       	push	r0
     30e:	11 24       	eor	r1, r1
     310:	0b b6       	in	r0, 0x3b	; 59
     312:	0f 92       	push	r0
     314:	2f 93       	push	r18
     316:	3f 93       	push	r19
     318:	4f 93       	push	r20
     31a:	5f 93       	push	r21
     31c:	6f 93       	push	r22
     31e:	7f 93       	push	r23
     320:	8f 93       	push	r24
     322:	9f 93       	push	r25
     324:	af 93       	push	r26
     326:	bf 93       	push	r27
     328:	ef 93       	push	r30
     32a:	ff 93       	push	r31
	PORT_t *port;
	port = ioport_pin_to_port(GPIO_PUSH_BUTTON_0);
	port->INTFLAGS = 0x01; // Ack interrupt
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	e0 e2       	ldi	r30, 0x20	; 32
     330:	f6 e0       	ldi	r31, 0x06	; 6
     332:	84 87       	std	Z+12, r24	; 0x0c
/*! \brief The USB driver sends a resume signal called \e "Upstream Resume"
 * This is authorized only when the remote wakeup feature is enabled by host.
 */
static inline void udc_remotewakeup(void)
{
	udd_send_remotewakeup();
     334:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <udd_send_remotewakeup>
	// It is a wakeup then send wakeup USB
	udc_remotewakeup();
}
     338:	ff 91       	pop	r31
     33a:	ef 91       	pop	r30
     33c:	bf 91       	pop	r27
     33e:	af 91       	pop	r26
     340:	9f 91       	pop	r25
     342:	8f 91       	pop	r24
     344:	7f 91       	pop	r23
     346:	6f 91       	pop	r22
     348:	5f 91       	pop	r21
     34a:	4f 91       	pop	r20
     34c:	3f 91       	pop	r19
     34e:	2f 91       	pop	r18
     350:	0f 90       	pop	r0
     352:	0b be       	out	0x3b, r0	; 59
     354:	0f 90       	pop	r0
     356:	0f be       	out	0x3f, r0	; 63
     358:	0f 90       	pop	r0
     35a:	1f 90       	pop	r1
     35c:	18 95       	reti

0000035e <ui_wakeup>:

void ui_wakeup(void)
{
     35e:	08 95       	ret

00000360 <ui_process>:
	//LED_On(LED7_GPIO);
}

void ui_process(uint16_t framenumber )
{
	if (done > 0 )
     360:	80 91 d0 20 	lds	r24, 0x20D0
     364:	90 91 d1 20 	lds	r25, 0x20D1
     368:	18 16       	cp	r1, r24
     36a:	19 06       	cpc	r1, r25
     36c:	6c f4       	brge	.+26     	; 0x388 <ui_process+0x28>
	{
		udi_hid_generic_send_report_in(hid_report);
     36e:	8e ed       	ldi	r24, 0xDE	; 222
     370:	97 e2       	ldi	r25, 0x27	; 39
     372:	82 d3       	rcall	.+1796   	; 0xa78 <udi_hid_generic_send_report_in>
		strcpy((char *)prv_report, (char *)hid_report);
     374:	6e ed       	ldi	r22, 0xDE	; 222
     376:	77 e2       	ldi	r23, 0x27	; 39
     378:	8e ed       	ldi	r24, 0xDE	; 222
     37a:	99 e2       	ldi	r25, 0x29	; 41
     37c:	0e 94 c9 11 	call	0x2392	; 0x2392 <strcpy>
		done = 0;
     380:	10 92 d0 20 	sts	0x20D0, r1
     384:	10 92 d1 20 	sts	0x20D1, r1
     388:	08 95       	ret

0000038a <delay>:

void delay(int time_in_us)
{
	int i,l;
	
	for (i=0;i<= time_in_us; i++)
     38a:	99 23       	and	r25, r25
     38c:	94 f0       	brlt	.+36     	; 0x3b2 <delay+0x28>
     38e:	40 e0       	ldi	r20, 0x00	; 0
     390:	50 e0       	ldi	r21, 0x00	; 0
	}
	
}

void delay(int time_in_us)
{
     392:	7d e2       	ldi	r23, 0x2D	; 45
     394:	61 e0       	ldi	r22, 0x01	; 1
     396:	0a c0       	rjmp	.+20     	; 0x3ac <delay+0x22>
     398:	21 50       	subi	r18, 0x01	; 1
     39a:	31 09       	sbc	r19, r1
	int i,l;
	
	for (i=0;i<= time_in_us; i++)
	{
		for (l=0; l <= 300; l++ );
     39c:	21 15       	cp	r18, r1
     39e:	31 05       	cpc	r19, r1
     3a0:	d9 f7       	brne	.-10     	; 0x398 <delay+0xe>

void delay(int time_in_us)
{
	int i,l;
	
	for (i=0;i<= time_in_us; i++)
     3a2:	4f 5f       	subi	r20, 0xFF	; 255
     3a4:	5f 4f       	sbci	r21, 0xFF	; 255
     3a6:	84 17       	cp	r24, r20
     3a8:	95 07       	cpc	r25, r21
     3aa:	1c f0       	brlt	.+6      	; 0x3b2 <delay+0x28>
	}
	
}

void delay(int time_in_us)
{
     3ac:	27 2f       	mov	r18, r23
     3ae:	36 2f       	mov	r19, r22
     3b0:	f3 cf       	rjmp	.-26     	; 0x398 <delay+0xe>
     3b2:	08 95       	ret

000003b4 <ui_led_change>:
	}
	
}
                                                                                                                                                                                                                           
void ui_led_change(uint8_t *report)
{
     3b4:	2f 92       	push	r2
     3b6:	3f 92       	push	r3
     3b8:	4f 92       	push	r4
     3ba:	5f 92       	push	r5
     3bc:	6f 92       	push	r6
     3be:	7f 92       	push	r7
     3c0:	8f 92       	push	r8
     3c2:	9f 92       	push	r9
     3c4:	af 92       	push	r10
     3c6:	bf 92       	push	r11
     3c8:	cf 92       	push	r12
     3ca:	df 92       	push	r13
     3cc:	ef 92       	push	r14
     3ce:	ff 92       	push	r15
     3d0:	0f 93       	push	r16
     3d2:	1f 93       	push	r17
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
     3d8:	ec 01       	movw	r28, r24
     3da:	88 e0       	ldi	r24, 0x08	; 8
     3dc:	e0 e6       	ldi	r30, 0x60	; 96
     3de:	f6 e0       	ldi	r31, 0x06	; 6
     3e0:	86 83       	std	Z+6, r24	; 0x06
	int out_pins = 0, line = 0, k = 0, l = 0;
	int loc = 0, glob = 0;
	ioport_set_pin_level(TRST, LOW);
	
	if (strcmp(state,"IDL") == 0)
     3e2:	60 ec       	ldi	r22, 0xC0	; 192
     3e4:	70 e2       	ldi	r23, 0x20	; 32
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	90 e2       	ldi	r25, 0x20	; 32
     3ea:	0e 94 c0 11 	call	0x2380	; 0x2380 <strcmp>
     3ee:	89 2b       	or	r24, r25
     3f0:	09 f0       	breq	.+2      	; 0x3f4 <ui_led_change+0x40>
     3f2:	86 c0       	rjmp	.+268    	; 0x500 <ui_led_change+0x14c>
	{
		if (report[0] == 'L')
     3f4:	88 81       	ld	r24, Y
     3f6:	8c 34       	cpi	r24, 0x4C	; 76
     3f8:	71 f5       	brne	.+92     	; 0x456 <ui_led_change+0xa2>
		{
			strcpy(state,"LOD");
     3fa:	8c e4       	ldi	r24, 0x4C	; 76
     3fc:	9f e4       	ldi	r25, 0x4F	; 79
     3fe:	a4 e4       	ldi	r26, 0x44	; 68
     400:	b0 e0       	ldi	r27, 0x00	; 0
     402:	80 93 00 20 	sts	0x2000, r24
     406:	90 93 01 20 	sts	0x2001, r25
     40a:	a0 93 02 20 	sts	0x2002, r26
     40e:	b0 93 03 20 	sts	0x2003, r27
     412:	c0 e6       	ldi	r28, 0x60	; 96
     414:	d6 e0       	ldi	r29, 0x06	; 6
     416:	88 e0       	ldi	r24, 0x08	; 8
     418:	8e 83       	std	Y+6, r24	; 0x06
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     41a:	04 e0       	ldi	r16, 0x04	; 4
     41c:	0d 83       	std	Y+5, r16	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     41e:	12 e0       	ldi	r17, 0x02	; 2
     420:	1e 83       	std	Y+6, r17	; 0x06
			ioport_set_pin_level(TRST, LOW);
			ioport_set_pin_level(TMS, HIGH);
			ioport_set_pin_level(TCLK, LOW);
			delay(5);
     422:	85 e0       	ldi	r24, 0x05	; 5
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	b1 df       	rcall	.-158    	; 0x38a <delay>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     428:	1d 83       	std	Y+5, r17	; 0x05
			ioport_set_pin_level(TCLK, HIGH);
			delay(5);
     42a:	85 e0       	ldi	r24, 0x05	; 5
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	ad df       	rcall	.-166    	; 0x38a <delay>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     430:	0e 83       	std	Y+6, r16	; 0x06
     432:	1e 83       	std	Y+6, r17	; 0x06
			ioport_set_pin_level(TMS, LOW);
			ioport_set_pin_level(TCLK, LOW);
			delay(5);
     434:	85 e0       	ldi	r24, 0x05	; 5
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	a8 df       	rcall	.-176    	; 0x38a <delay>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     43a:	1d 83       	std	Y+5, r17	; 0x05
			ioport_set_pin_level(TCLK, HIGH);
			delay(5);
     43c:	85 e0       	ldi	r24, 0x05	; 5
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	a4 df       	rcall	.-184    	; 0x38a <delay>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     442:	0e 83       	std	Y+6, r16	; 0x06
     444:	1e 83       	std	Y+6, r17	; 0x06
			ioport_set_pin_level(TMS, LOW);
			ioport_set_pin_level(TCLK, LOW);
			delay(5);
     446:	85 e0       	ldi	r24, 0x05	; 5
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	9f df       	rcall	.-194    	; 0x38a <delay>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     44c:	1d 83       	std	Y+5, r17	; 0x05
			ioport_set_pin_level(TCLK, HIGH);
			delay(5);
     44e:	85 e0       	ldi	r24, 0x05	; 5
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	9b df       	rcall	.-202    	; 0x38a <delay>
     454:	a8 c1       	rjmp	.+848    	; 0x7a6 <ui_led_change+0x3f2>
		}
		else if (report[0] == 'A')
     456:	81 34       	cpi	r24, 0x41	; 65
     458:	11 f5       	brne	.+68     	; 0x49e <ui_led_change+0xea>
		{
			strcpy(state,"IDL");
     45a:	89 e4       	ldi	r24, 0x49	; 73
     45c:	94 e4       	ldi	r25, 0x44	; 68
     45e:	ac e4       	ldi	r26, 0x4C	; 76
     460:	b0 e0       	ldi	r27, 0x00	; 0
     462:	80 93 00 20 	sts	0x2000, r24
     466:	90 93 01 20 	sts	0x2001, r25
     46a:	a0 93 02 20 	sts	0x2002, r26
     46e:	b0 93 03 20 	sts	0x2003, r27
     472:	c0 e6       	ldi	r28, 0x60	; 96
     474:	d6 e0       	ldi	r29, 0x06	; 6
     476:	84 e0       	ldi	r24, 0x04	; 4
     478:	8d 83       	std	Y+5, r24	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     47a:	12 e0       	ldi	r17, 0x02	; 2
     47c:	1e 83       	std	Y+6, r17	; 0x06
			ioport_set_pin_level(TMS, HIGH);
			ioport_set_pin_level(TCLK, LOW);
			delay(5);
     47e:	85 e0       	ldi	r24, 0x05	; 5
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	83 df       	rcall	.-250    	; 0x38a <delay>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     484:	1d 83       	std	Y+5, r17	; 0x05
			ioport_set_pin_level(TCLK, HIGH);
			delay(5);
     486:	85 e0       	ldi	r24, 0x05	; 5
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	7f df       	rcall	.-258    	; 0x38a <delay>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     48c:	1e 83       	std	Y+6, r17	; 0x06
			ioport_set_pin_level(TCLK, LOW);
			delay(5);
     48e:	85 e0       	ldi	r24, 0x05	; 5
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	7b df       	rcall	.-266    	; 0x38a <delay>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     494:	1d 83       	std	Y+5, r17	; 0x05
			ioport_set_pin_level(TCLK, HIGH);
			delay(5);
     496:	85 e0       	ldi	r24, 0x05	; 5
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	77 df       	rcall	.-274    	; 0x38a <delay>
     49c:	84 c1       	rjmp	.+776    	; 0x7a6 <ui_led_change+0x3f2>
		}
		else if (report[0] == 'S')
     49e:	83 35       	cpi	r24, 0x53	; 83
     4a0:	29 f5       	brne	.+74     	; 0x4ec <ui_led_change+0x138>
		{
			strcpy(state,"SMP");
     4a2:	83 e5       	ldi	r24, 0x53	; 83
     4a4:	9d e4       	ldi	r25, 0x4D	; 77
     4a6:	a0 e5       	ldi	r26, 0x50	; 80
     4a8:	b0 e0       	ldi	r27, 0x00	; 0
     4aa:	80 93 00 20 	sts	0x2000, r24
     4ae:	90 93 01 20 	sts	0x2001, r25
     4b2:	a0 93 02 20 	sts	0x2002, r26
     4b6:	b0 93 03 20 	sts	0x2003, r27
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     4ba:	c0 e6       	ldi	r28, 0x60	; 96
     4bc:	d6 e0       	ldi	r29, 0x06	; 6
     4be:	88 e0       	ldi	r24, 0x08	; 8
     4c0:	8e 83       	std	Y+6, r24	; 0x06
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     4c2:	04 e0       	ldi	r16, 0x04	; 4
     4c4:	0d 83       	std	Y+5, r16	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     4c6:	12 e0       	ldi	r17, 0x02	; 2
     4c8:	1e 83       	std	Y+6, r17	; 0x06
			ioport_set_pin_level(TRST, LOW);
			ioport_set_pin_level(TMS, HIGH);
			ioport_set_pin_level(TCLK, LOW);
			delay(5);
     4ca:	85 e0       	ldi	r24, 0x05	; 5
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	5d df       	rcall	.-326    	; 0x38a <delay>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     4d0:	1d 83       	std	Y+5, r17	; 0x05
			ioport_set_pin_level(TCLK, HIGH);
			delay(5);
     4d2:	85 e0       	ldi	r24, 0x05	; 5
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	59 df       	rcall	.-334    	; 0x38a <delay>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     4d8:	0e 83       	std	Y+6, r16	; 0x06
     4da:	1e 83       	std	Y+6, r17	; 0x06
			ioport_set_pin_level(TMS, LOW);
			ioport_set_pin_level(TCLK, LOW);
			delay(5);
     4dc:	85 e0       	ldi	r24, 0x05	; 5
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	54 df       	rcall	.-344    	; 0x38a <delay>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     4e2:	1d 83       	std	Y+5, r17	; 0x05
			ioport_set_pin_level(TCLK, HIGH);
			delay(5);
     4e4:	85 e0       	ldi	r24, 0x05	; 5
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	50 df       	rcall	.-352    	; 0x38a <delay>
     4ea:	5d c1       	rjmp	.+698    	; 0x7a6 <ui_led_change+0x3f2>
			
		}
		else if (report[0] == 'R')
     4ec:	82 35       	cpi	r24, 0x52	; 82
     4ee:	09 f0       	breq	.+2      	; 0x4f2 <ui_led_change+0x13e>
     4f0:	5a c1       	rjmp	.+692    	; 0x7a6 <ui_led_change+0x3f2>
		{
			udi_hid_generic_send_report_in(prv_report);
     4f2:	8e ed       	ldi	r24, 0xDE	; 222
     4f4:	99 e2       	ldi	r25, 0x29	; 41
     4f6:	c0 d2       	rcall	.+1408   	; 0xa78 <udi_hid_generic_send_report_in>
			delay(10);
     4f8:	8a e0       	ldi	r24, 0x0A	; 10
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	46 df       	rcall	.-372    	; 0x38a <delay>
     4fe:	53 c1       	rjmp	.+678    	; 0x7a6 <ui_led_change+0x3f2>
		}
	}
	else if (strcmp(state,"LOD") == 0)
     500:	64 ec       	ldi	r22, 0xC4	; 196
     502:	70 e2       	ldi	r23, 0x20	; 32
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	90 e2       	ldi	r25, 0x20	; 32
     508:	0e 94 c0 11 	call	0x2380	; 0x2380 <strcmp>
     50c:	89 2b       	or	r24, r25
     50e:	49 f5       	brne	.+82     	; 0x562 <ui_led_change+0x1ae>
	{
		length = report[0];
     510:	28 81       	ld	r18, Y
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	20 93 d2 20 	sts	0x20D2, r18
     518:	30 93 d3 20 	sts	0x20D3, r19
		strcpy(state,"LEN");
     51c:	8c e4       	ldi	r24, 0x4C	; 76
     51e:	95 e4       	ldi	r25, 0x45	; 69
     520:	ae e4       	ldi	r26, 0x4E	; 78
     522:	b0 e0       	ldi	r27, 0x00	; 0
     524:	80 93 00 20 	sts	0x2000, r24
     528:	90 93 01 20 	sts	0x2001, r25
     52c:	a0 93 02 20 	sts	0x2002, r26
     530:	b0 93 03 20 	sts	0x2003, r27
     534:	82 e0       	ldi	r24, 0x02	; 2
     536:	e0 e6       	ldi	r30, 0x60	; 96
     538:	f6 e0       	ldi	r31, 0x06	; 6
     53a:	85 83       	std	Z+5, r24	; 0x05
		ioport_set_pin_level(TCLK, HIGH);
		count = 0;
     53c:	10 92 d4 20 	sts	0x20D4, r1
     540:	10 92 d5 20 	sts	0x20D5, r1
		glob = 0;
		for ( l = 0; l < length ; l++)
     544:	21 15       	cp	r18, r1
     546:	31 05       	cpc	r19, r1
     548:	09 f4       	brne	.+2      	; 0x54c <ui_led_change+0x198>
     54a:	2d c1       	rjmp	.+602    	; 0x7a6 <ui_led_change+0x3f2>
     54c:	ee ed       	ldi	r30, 0xDE	; 222
     54e:	f5 e2       	ldi	r31, 0x25	; 37
     550:	c9 01       	movw	r24, r18
     552:	82 52       	subi	r24, 0x22	; 34
     554:	9a 4d       	sbci	r25, 0xDA	; 218
		{
			recvd_data[l] = '0';
     556:	20 e3       	ldi	r18, 0x30	; 48
     558:	21 93       	st	Z+, r18
		length = report[0];
		strcpy(state,"LEN");
		ioport_set_pin_level(TCLK, HIGH);
		count = 0;
		glob = 0;
		for ( l = 0; l < length ; l++)
     55a:	e8 17       	cp	r30, r24
     55c:	f9 07       	cpc	r31, r25
     55e:	e1 f7       	brne	.-8      	; 0x558 <ui_led_change+0x1a4>
     560:	22 c1       	rjmp	.+580    	; 0x7a6 <ui_led_change+0x3f2>
		{
			recvd_data[l] = '0';
		}
		
	}
	else if (strcmp(state,"LEN") == 0)
     562:	68 ec       	ldi	r22, 0xC8	; 200
     564:	70 e2       	ldi	r23, 0x20	; 32
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	90 e2       	ldi	r25, 0x20	; 32
     56a:	0e 94 c0 11 	call	0x2380	; 0x2380 <strcmp>
     56e:	89 2b       	or	r24, r25
     570:	09 f0       	breq	.+2      	; 0x574 <ui_led_change+0x1c0>
     572:	58 c0       	rjmp	.+176    	; 0x624 <ui_led_change+0x270>
	{
		if (report[0] == '1')
     574:	88 81       	ld	r24, Y
     576:	81 33       	cpi	r24, 0x31	; 49
     578:	71 f4       	brne	.+28     	; 0x596 <ui_led_change+0x1e2>
     57a:	82 e0       	ldi	r24, 0x02	; 2
     57c:	e0 ea       	ldi	r30, 0xA0	; 160
     57e:	f6 e0       	ldi	r31, 0x06	; 6
     580:	85 83       	std	Z+5, r24	; 0x05
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	e0 e6       	ldi	r30, 0x60	; 96
     586:	f6 e0       	ldi	r31, 0x06	; 6
     588:	85 83       	std	Z+5, r24	; 0x05
		{	
			LED_On(LED1_GPIO);
			ioport_set_pin_level(TDI, HIGH);
			recvd_data[glob++] = '1';
     58a:	81 e3       	ldi	r24, 0x31	; 49
     58c:	80 93 de 25 	sts	0x25DE, r24
     590:	01 e0       	ldi	r16, 0x01	; 1
     592:	10 e0       	ldi	r17, 0x00	; 0
     594:	12 c0       	rjmp	.+36     	; 0x5ba <ui_led_change+0x206>
		}
		else if (report[0] == '0')
     596:	80 33       	cpi	r24, 0x30	; 48
     598:	71 f4       	brne	.+28     	; 0x5b6 <ui_led_change+0x202>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     59a:	82 e0       	ldi	r24, 0x02	; 2
     59c:	e0 ea       	ldi	r30, 0xA0	; 160
     59e:	f6 e0       	ldi	r31, 0x06	; 6
     5a0:	86 83       	std	Z+6, r24	; 0x06
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	e0 e6       	ldi	r30, 0x60	; 96
     5a6:	f6 e0       	ldi	r31, 0x06	; 6
     5a8:	86 83       	std	Z+6, r24	; 0x06
		{
			LED_Off(LED1_GPIO);
			ioport_set_pin_level(TDI, LOW);
			recvd_data[glob++] = '0';
     5aa:	80 e3       	ldi	r24, 0x30	; 48
     5ac:	80 93 de 25 	sts	0x25DE, r24
     5b0:	01 e0       	ldi	r16, 0x01	; 1
     5b2:	10 e0       	ldi	r17, 0x00	; 0
     5b4:	02 c0       	rjmp	.+4      	; 0x5ba <ui_led_change+0x206>
}
                                                                                                                                                                                                                           
void ui_led_change(uint8_t *report)
{
	int out_pins = 0, line = 0, k = 0, l = 0;
	int loc = 0, glob = 0;
     5b6:	00 e0       	ldi	r16, 0x00	; 0
     5b8:	10 e0       	ldi	r17, 0x00	; 0
     5ba:	c0 e6       	ldi	r28, 0x60	; 96
     5bc:	d6 e0       	ldi	r29, 0x06	; 6
     5be:	84 e0       	ldi	r24, 0x04	; 4
     5c0:	8e 83       	std	Y+6, r24	; 0x06
     5c2:	68 94       	set
     5c4:	ff 24       	eor	r15, r15
     5c6:	f1 f8       	bld	r15, 1
     5c8:	fe 82       	std	Y+6, r15	; 0x06
			ioport_set_pin_level(TDI, LOW);
			recvd_data[glob++] = '0';
		}
		ioport_set_pin_level(TMS, LOW);
		ioport_set_pin_level(TCLK, LOW);
		delay(5);
     5ca:	85 e0       	ldi	r24, 0x05	; 5
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	dd de       	rcall	.-582    	; 0x38a <delay>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     5d0:	fd 82       	std	Y+5, r15	; 0x05
		ioport_set_pin_level(TCLK, HIGH);
		delay(5);
     5d2:	85 e0       	ldi	r24, 0x05	; 5
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	d9 de       	rcall	.-590    	; 0x38a <delay>
		count++;
     5d8:	80 91 d4 20 	lds	r24, 0x20D4
     5dc:	90 91 d5 20 	lds	r25, 0x20D5
     5e0:	01 96       	adiw	r24, 0x01	; 1
     5e2:	80 93 d4 20 	sts	0x20D4, r24
     5e6:	90 93 d5 20 	sts	0x20D5, r25
		if (count >= length)
     5ea:	20 91 d2 20 	lds	r18, 0x20D2
     5ee:	30 91 d3 20 	lds	r19, 0x20D3
     5f2:	82 17       	cp	r24, r18
     5f4:	93 07       	cpc	r25, r19
     5f6:	08 f4       	brcc	.+2      	; 0x5fa <ui_led_change+0x246>
     5f8:	d6 c0       	rjmp	.+428    	; 0x7a6 <ui_led_change+0x3f2>
		{
			count = 0;
     5fa:	10 92 d4 20 	sts	0x20D4, r1
     5fe:	10 92 d5 20 	sts	0x20D5, r1
			recvd_data[glob] = '\0';
     602:	f8 01       	movw	r30, r16
     604:	e2 52       	subi	r30, 0x22	; 34
     606:	fa 4d       	sbci	r31, 0xDA	; 218
     608:	10 82       	st	Z, r1
			strcpy(state,"IDL");
     60a:	89 e4       	ldi	r24, 0x49	; 73
     60c:	94 e4       	ldi	r25, 0x44	; 68
     60e:	ac e4       	ldi	r26, 0x4C	; 76
     610:	b0 e0       	ldi	r27, 0x00	; 0
     612:	80 93 00 20 	sts	0x2000, r24
     616:	90 93 01 20 	sts	0x2001, r25
     61a:	a0 93 02 20 	sts	0x2002, r26
     61e:	b0 93 03 20 	sts	0x2003, r27
     622:	c1 c0       	rjmp	.+386    	; 0x7a6 <ui_led_change+0x3f2>
		}
	}
	else if (strcmp(state,"SMP") == 0)
     624:	6c ec       	ldi	r22, 0xCC	; 204
     626:	70 e2       	ldi	r23, 0x20	; 32
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	90 e2       	ldi	r25, 0x20	; 32
     62c:	0e 94 c0 11 	call	0x2380	; 0x2380 <strcmp>
     630:	89 2b       	or	r24, r25
     632:	09 f0       	breq	.+2      	; 0x636 <ui_led_change+0x282>
     634:	b8 c0       	rjmp	.+368    	; 0x7a6 <ui_led_change+0x3f2>
	{
		loc = 0;
		if ( report[0] >= length )
     636:	a8 81       	ld	r26, Y
     638:	60 91 d2 20 	lds	r22, 0x20D2
     63c:	70 91 d3 20 	lds	r23, 0x20D3
     640:	8a 2f       	mov	r24, r26
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	86 17       	cp	r24, r22
     646:	97 07       	cpc	r25, r23
     648:	08 f4       	brcc	.+2      	; 0x64c <ui_led_change+0x298>
     64a:	4e c0       	rjmp	.+156    	; 0x6e8 <ui_led_change+0x334>
		{
			out_pins = report[0];
     64c:	5c 01       	movw	r10, r24
			for ( k = 0; k < report[0]; k++ )
     64e:	1a 14       	cp	r1, r10
     650:	1b 04       	cpc	r1, r11
     652:	0c f0       	brlt	.+2      	; 0x656 <ui_led_change+0x2a2>
     654:	7d c0       	rjmp	.+250    	; 0x750 <ui_led_change+0x39c>
     656:	ee ed       	ldi	r30, 0xDE	; 222
     658:	f3 e2       	ldi	r31, 0x23	; 35
			strcpy(state,"IDL");
		}
	}
	else if (strcmp(state,"SMP") == 0)
	{
		loc = 0;
     65a:	40 e0       	ldi	r20, 0x00	; 0
     65c:	50 e0       	ldi	r21, 0x00	; 0
		if ( report[0] >= length )
		{
			out_pins = report[0];
			for ( k = 0; k < report[0]; k++ )
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	90 e0       	ldi	r25, 0x00	; 0
					sndng_data[k] = recvd_data[loc++];
					
				}
				else
				{
					sndng_data[k] = '0';
     662:	10 e3       	ldi	r17, 0x30	; 48
		if ( report[0] >= length )
		{
			out_pins = report[0];
			for ( k = 0; k < report[0]; k++ )
			{
				if ( k >= (report[0] - length) )	{
     664:	2a 2f       	mov	r18, r26
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	26 1b       	sub	r18, r22
     66a:	37 0b       	sbc	r19, r23
     66c:	82 17       	cp	r24, r18
     66e:	93 07       	cpc	r25, r19
     670:	40 f0       	brcs	.+16     	; 0x682 <ui_led_change+0x2ce>
					sndng_data[k] = recvd_data[loc++];
     672:	da 01       	movw	r26, r20
     674:	a2 52       	subi	r26, 0x22	; 34
     676:	ba 4d       	sbci	r27, 0xDA	; 218
     678:	2c 91       	ld	r18, X
     67a:	20 83       	st	Z, r18
     67c:	4f 5f       	subi	r20, 0xFF	; 255
     67e:	5f 4f       	sbci	r21, 0xFF	; 255
     680:	01 c0       	rjmp	.+2      	; 0x684 <ui_led_change+0x2d0>
					
				}
				else
				{
					sndng_data[k] = '0';
     682:	10 83       	st	Z, r17
	{
		loc = 0;
		if ( report[0] >= length )
		{
			out_pins = report[0];
			for ( k = 0; k < report[0]; k++ )
     684:	01 96       	adiw	r24, 0x01	; 1
     686:	a8 81       	ld	r26, Y
     688:	31 96       	adiw	r30, 0x01	; 1
     68a:	2a 2f       	mov	r18, r26
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	82 17       	cp	r24, r18
     690:	93 07       	cpc	r25, r19
     692:	44 f3       	brlt	.-48     	; 0x664 <ui_led_change+0x2b0>
     694:	0f 2e       	mov	r0, r31
     696:	fe ed       	ldi	r31, 0xDE	; 222
     698:	ef 2e       	mov	r14, r31
     69a:	f3 e2       	ldi	r31, 0x23	; 35
     69c:	ff 2e       	mov	r15, r31
     69e:	f0 2d       	mov	r31, r0
     6a0:	0f 2e       	mov	r0, r31
     6a2:	fe ed       	ldi	r31, 0xDE	; 222
     6a4:	8f 2e       	mov	r8, r31
     6a6:	f7 e2       	ldi	r31, 0x27	; 39
     6a8:	9f 2e       	mov	r9, r31
     6aa:	f0 2d       	mov	r31, r0
			{
				if ( k >= (report[0] - length) )	{
					sndng_data[k] = recvd_data[loc++];
     6ac:	00 e0       	ldi	r16, 0x00	; 0
     6ae:	10 e0       	ldi	r17, 0x00	; 0
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     6b0:	c0 e6       	ldi	r28, 0x60	; 96
     6b2:	d6 e0       	ldi	r29, 0x06	; 6

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
     6b4:	0f 2e       	mov	r0, r31
     6b6:	f0 e4       	ldi	r31, 0x40	; 64
     6b8:	cf 2e       	mov	r12, r31
     6ba:	f6 e0       	ldi	r31, 0x06	; 6
     6bc:	df 2e       	mov	r13, r31
     6be:	f0 2d       	mov	r31, r0
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     6c0:	0f 2e       	mov	r0, r31
     6c2:	f0 ea       	ldi	r31, 0xA0	; 160
     6c4:	6f 2e       	mov	r6, r31
     6c6:	f6 e0       	ldi	r31, 0x06	; 6
     6c8:	7f 2e       	mov	r7, r31
     6ca:	f0 2d       	mov	r31, r0
     6cc:	68 94       	set
     6ce:	33 24       	eor	r3, r3
     6d0:	37 f8       	bld	r3, 7
				ioport_set_pin_level(TDI, LOW);
			}
			//ioport_set_pin_level(TDI, LOW);
			if (ioport_get_pin_level(TDO)== 0)
			{
				hid_report[line] = 0x30;
     6d2:	0f 2e       	mov	r0, r31
     6d4:	f0 e3       	ldi	r31, 0x30	; 48
     6d6:	2f 2e       	mov	r2, r31
     6d8:	f0 2d       	mov	r31, r0
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     6da:	68 94       	set
     6dc:	44 24       	eor	r4, r4
     6de:	42 f8       	bld	r4, 2
     6e0:	68 94       	set
     6e2:	55 24       	eor	r5, r5
     6e4:	51 f8       	bld	r5, 1
     6e6:	05 c0       	rjmp	.+10     	; 0x6f2 <ui_led_change+0x33e>
				}
			}
		}
		else
		{
			out_pins = length;
     6e8:	5b 01       	movw	r10, r22
		}
		line=0 ;
		
		while ( line < out_pins )
     6ea:	16 16       	cp	r1, r22
     6ec:	17 06       	cpc	r1, r23
     6ee:	94 f2       	brlt	.-92     	; 0x694 <ui_led_change+0x2e0>
     6f0:	2f c0       	rjmp	.+94     	; 0x750 <ui_led_change+0x39c>
		{
			if ( sndng_data[line] == '1')
     6f2:	f7 01       	movw	r30, r14
     6f4:	81 91       	ld	r24, Z+
     6f6:	7f 01       	movw	r14, r30
     6f8:	81 33       	cpi	r24, 0x31	; 49
     6fa:	19 f4       	brne	.+6      	; 0x702 <ui_led_change+0x34e>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     6fc:	f1 e0       	ldi	r31, 0x01	; 1
     6fe:	fd 83       	std	Y+5, r31	; 0x05
     700:	04 c0       	rjmp	.+8      	; 0x70a <ui_led_change+0x356>
			{
				ioport_set_pin_level(TDI, HIGH);
			}
			else if ( sndng_data[line] == '0')
     702:	80 33       	cpi	r24, 0x30	; 48
     704:	11 f4       	brne	.+4      	; 0x70a <ui_led_change+0x356>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	8e 83       	std	Y+6, r24	; 0x06

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
     70a:	f6 01       	movw	r30, r12
     70c:	80 85       	ldd	r24, Z+8	; 0x08
			{
				ioport_set_pin_level(TDI, LOW);
			}
			//ioport_set_pin_level(TDI, LOW);
			if (ioport_get_pin_level(TDO)== 0)
     70e:	80 fd       	sbrc	r24, 0
     710:	05 c0       	rjmp	.+10     	; 0x71c <ui_led_change+0x368>
			{
				hid_report[line] = 0x30;
     712:	f4 01       	movw	r30, r8
     714:	20 82       	st	Z, r2
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     716:	f3 01       	movw	r30, r6
     718:	36 82       	std	Z+6, r3	; 0x06
     71a:	09 c0       	rjmp	.+18     	; 0x72e <ui_led_change+0x37a>

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
     71c:	f6 01       	movw	r30, r12
     71e:	80 85       	ldd	r24, Z+8	; 0x08
				LED_Off(LED7_GPIO);
			}
			else if (ioport_get_pin_level(TDO)== 1)
     720:	80 ff       	sbrs	r24, 0
     722:	05 c0       	rjmp	.+10     	; 0x72e <ui_led_change+0x37a>
			{
				hid_report[line] = 0x31;
     724:	81 e3       	ldi	r24, 0x31	; 49
     726:	f4 01       	movw	r30, r8
     728:	80 83       	st	Z, r24
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     72a:	f3 01       	movw	r30, r6
     72c:	35 82       	std	Z+5, r3	; 0x05
				LED_On(LED7_GPIO);
			}
			line += 1;
     72e:	0f 5f       	subi	r16, 0xFF	; 255
     730:	1f 4f       	sbci	r17, 0xFF	; 255
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     732:	4e 82       	std	Y+6, r4	; 0x06
     734:	5e 82       	std	Y+6, r5	; 0x06
			ioport_set_pin_level(TMS, LOW);
			ioport_set_pin_level(TCLK, LOW);
			delay(5);
     736:	85 e0       	ldi	r24, 0x05	; 5
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	27 de       	rcall	.-946    	; 0x38a <delay>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     73c:	5d 82       	std	Y+5, r5	; 0x05
			ioport_set_pin_level(TCLK, HIGH);
			delay(5);
     73e:	85 e0       	ldi	r24, 0x05	; 5
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	23 de       	rcall	.-954    	; 0x38a <delay>
     744:	ff ef       	ldi	r31, 0xFF	; 255
     746:	8f 1a       	sub	r8, r31
     748:	9f 0a       	sbc	r9, r31
		{
			out_pins = length;
		}
		line=0 ;
		
		while ( line < out_pins )
     74a:	0a 15       	cp	r16, r10
     74c:	1b 05       	cpc	r17, r11
     74e:	8c f2       	brlt	.-94     	; 0x6f2 <ui_led_change+0x33e>
			ioport_set_pin_level(TCLK, LOW);
			delay(5);
			ioport_set_pin_level(TCLK, HIGH);
			delay(5);
		}
		hid_report[out_pins] = '\0';
     750:	f5 01       	movw	r30, r10
     752:	e2 52       	subi	r30, 0x22	; 34
     754:	f8 4d       	sbci	r31, 0xD8	; 216
     756:	10 82       	st	Z, r1
		done = 1;
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	80 93 d0 20 	sts	0x20D0, r24
     760:	90 93 d1 20 	sts	0x20D1, r25
		strcpy(state,"IDL");
     764:	89 e4       	ldi	r24, 0x49	; 73
     766:	94 e4       	ldi	r25, 0x44	; 68
     768:	ac e4       	ldi	r26, 0x4C	; 76
     76a:	b0 e0       	ldi	r27, 0x00	; 0
     76c:	80 93 00 20 	sts	0x2000, r24
     770:	90 93 01 20 	sts	0x2001, r25
     774:	a0 93 02 20 	sts	0x2002, r26
     778:	b0 93 03 20 	sts	0x2003, r27
     77c:	c0 e6       	ldi	r28, 0x60	; 96
     77e:	d6 e0       	ldi	r29, 0x06	; 6
     780:	84 e0       	ldi	r24, 0x04	; 4
     782:	8d 83       	std	Y+5, r24	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     784:	12 e0       	ldi	r17, 0x02	; 2
     786:	1e 83       	std	Y+6, r17	; 0x06
		ioport_set_pin_level(TMS, HIGH);
		ioport_set_pin_level(TCLK, LOW);
		delay(5);
     788:	85 e0       	ldi	r24, 0x05	; 5
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	fe dd       	rcall	.-1028   	; 0x38a <delay>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     78e:	1d 83       	std	Y+5, r17	; 0x05
		ioport_set_pin_level(TCLK, HIGH);
		delay(5);
     790:	85 e0       	ldi	r24, 0x05	; 5
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	fa dd       	rcall	.-1036   	; 0x38a <delay>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     796:	1e 83       	std	Y+6, r17	; 0x06
		ioport_set_pin_level(TCLK, LOW);
		delay(5);
     798:	85 e0       	ldi	r24, 0x05	; 5
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	f6 dd       	rcall	.-1044   	; 0x38a <delay>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     79e:	1d 83       	std	Y+5, r17	; 0x05
		ioport_set_pin_level(TCLK, HIGH);
		delay(5);
     7a0:	85 e0       	ldi	r24, 0x05	; 5
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	f2 dd       	rcall	.-1052   	; 0x38a <delay>
		
	}
     7a6:	df 91       	pop	r29
     7a8:	cf 91       	pop	r28
     7aa:	1f 91       	pop	r17
     7ac:	0f 91       	pop	r16
     7ae:	ff 90       	pop	r15
     7b0:	ef 90       	pop	r14
     7b2:	df 90       	pop	r13
     7b4:	cf 90       	pop	r12
     7b6:	bf 90       	pop	r11
     7b8:	af 90       	pop	r10
     7ba:	9f 90       	pop	r9
     7bc:	8f 90       	pop	r8
     7be:	7f 90       	pop	r7
     7c0:	6f 90       	pop	r6
     7c2:	5f 90       	pop	r5
     7c4:	4f 90       	pop	r4
     7c6:	3f 90       	pop	r3
     7c8:	2f 90       	pop	r2
     7ca:	08 95       	ret

000007cc <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	00 d0       	rcall	.+0      	; 0x7d2 <sysclk_init+0x6>
     7d2:	1f 92       	push	r1
     7d4:	cd b7       	in	r28, 0x3d	; 61
     7d6:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     7d8:	8f ef       	ldi	r24, 0xFF	; 255
     7da:	80 93 70 00 	sts	0x0070, r24
     7de:	80 93 71 00 	sts	0x0071, r24
     7e2:	80 93 72 00 	sts	0x0072, r24
     7e6:	80 93 73 00 	sts	0x0073, r24
     7ea:	80 93 74 00 	sts	0x0074, r24
     7ee:	80 93 75 00 	sts	0x0075, r24
     7f2:	80 93 76 00 	sts	0x0076, r24
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
     7f6:	65 e0       	ldi	r22, 0x05	; 5
     7f8:	81 e4       	ldi	r24, 0x41	; 65
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	79 d6       	rcall	.+3314   	; 0x14f0 <ccp_write_io>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     7fe:	6c e1       	ldi	r22, 0x1C	; 28
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	82 e0       	ldi	r24, 0x02	; 2
     804:	7b d6       	rcall	.+3318   	; 0x14fc <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
     806:	8a 83       	std	Y+2, r24	; 0x02
     808:	6d e1       	ldi	r22, 0x1D	; 29
     80a:	70 e0       	ldi	r23, 0x00	; 0
     80c:	82 e0       	ldi	r24, 0x02	; 2
     80e:	76 d6       	rcall	.+3308   	; 0x14fc <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
     810:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
     812:	89 81       	ldd	r24, Y+1	; 0x01
     814:	9a 81       	ldd	r25, Y+2	; 0x02
     816:	01 96       	adiw	r24, 0x01	; 1
     818:	21 f4       	brne	.+8      	; 0x822 <sysclk_init+0x56>
		cal = 0x2340;
     81a:	80 e4       	ldi	r24, 0x40	; 64
     81c:	93 e2       	ldi	r25, 0x23	; 35
     81e:	89 83       	std	Y+1, r24	; 0x01
     820:	9a 83       	std	Y+2, r25	; 0x02
     822:	89 81       	ldd	r24, Y+1	; 0x01
     824:	9a 81       	ldd	r25, Y+2	; 0x02
     826:	8b 83       	std	Y+3, r24	; 0x03
     828:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
     82a:	e0 e6       	ldi	r30, 0x60	; 96
     82c:	f0 e0       	ldi	r31, 0x00	; 0
     82e:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
     830:	8c 81       	ldd	r24, Y+4	; 0x04
     832:	83 83       	std	Z+3, r24	; 0x03

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     834:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     836:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     838:	e0 e5       	ldi	r30, 0x50	; 80
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	90 81       	ld	r25, Z
     83e:	92 60       	ori	r25, 0x02	; 2
     840:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     842:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     844:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     846:	81 ff       	sbrs	r24, 1
     848:	fd cf       	rjmp	.-6      	; 0x844 <sysclk_init+0x78>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     84a:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     84c:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     84e:	a0 e5       	ldi	r26, 0x50	; 80
     850:	b0 e0       	ldi	r27, 0x00	; 0
     852:	16 96       	adiw	r26, 0x06	; 6
     854:	9c 91       	ld	r25, X
     856:	16 97       	sbiw	r26, 0x06	; 6
     858:	99 7f       	andi	r25, 0xF9	; 249
     85a:	16 96       	adiw	r26, 0x06	; 6
     85c:	9c 93       	st	X, r25
     85e:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
     860:	e0 e6       	ldi	r30, 0x60	; 96
     862:	f0 e0       	ldi	r31, 0x00	; 0
     864:	90 e8       	ldi	r25, 0x80	; 128
     866:	95 83       	std	Z+5, r25	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
     868:	9b eb       	ldi	r25, 0xBB	; 187
     86a:	96 83       	std	Z+6, r25	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
     86c:	16 96       	adiw	r26, 0x06	; 6
     86e:	9c 91       	ld	r25, X
     870:	16 97       	sbiw	r26, 0x06	; 6
     872:	94 60       	ori	r25, 0x04	; 4
     874:	16 96       	adiw	r26, 0x06	; 6
     876:	9c 93       	st	X, r25
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     878:	90 81       	ld	r25, Z
     87a:	91 60       	ori	r25, 0x01	; 1
     87c:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     87e:	8f bf       	out	0x3f, r24	; 63
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     880:	61 e0       	ldi	r22, 0x01	; 1
     882:	80 e4       	ldi	r24, 0x40	; 64
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	34 d6       	rcall	.+3176   	; 0x14f0 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     888:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     88a:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     88c:	e0 e5       	ldi	r30, 0x50	; 80
     88e:	f0 e0       	ldi	r31, 0x00	; 0
     890:	90 81       	ld	r25, Z
     892:	9e 7f       	andi	r25, 0xFE	; 254
     894:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     896:	8f bf       	out	0x3f, r24	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     898:	24 96       	adiw	r28, 0x04	; 4
     89a:	cd bf       	out	0x3d, r28	; 61
     89c:	de bf       	out	0x3e, r29	; 62
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	08 95       	ret

000008a4 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     8a4:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     8a6:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     8a8:	e8 2f       	mov	r30, r24
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	e0 59       	subi	r30, 0x90	; 144
     8ae:	ff 4f       	sbci	r31, 0xFF	; 255
     8b0:	60 95       	com	r22
     8b2:	80 81       	ld	r24, Z
     8b4:	68 23       	and	r22, r24
     8b6:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     8b8:	9f bf       	out	0x3f, r25	; 63
     8ba:	08 95       	ret

000008bc <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     8bc:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     8be:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
     8c0:	e8 2f       	mov	r30, r24
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	e0 59       	subi	r30, 0x90	; 144
     8c6:	ff 4f       	sbci	r31, 0xFF	; 255
     8c8:	80 81       	ld	r24, Z
     8ca:	68 2b       	or	r22, r24
     8cc:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     8ce:	9f bf       	out	0x3f, r25	; 63
     8d0:	08 95       	ret

000008d2 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
     8d2:	86 30       	cpi	r24, 0x06	; 6
     8d4:	11 f4       	brne	.+4      	; 0x8da <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
     8d6:	68 e1       	ldi	r22, 0x18	; 24
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <sysclk_enable_usb+0xa>
	}
	else {
		prescaler = 0;
     8da:	60 e0       	ldi	r22, 0x00	; 0

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     8dc:	e0 e5       	ldi	r30, 0x50	; 80
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	81 81       	ldd	r24, Z+1	; 0x01
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
     8e2:	81 fd       	sbrc	r24, 1
     8e4:	24 c0       	rjmp	.+72     	; 0x92e <sysclk_enable_usb+0x5c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     8e6:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     8e8:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     8ea:	90 81       	ld	r25, Z
     8ec:	92 60       	ori	r25, 0x02	; 2
     8ee:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     8f0:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     8f2:	81 81       	ldd	r24, Z+1	; 0x01
     8f4:	81 ff       	sbrs	r24, 1
     8f6:	fd cf       	rjmp	.-6      	; 0x8f2 <sysclk_enable_usb+0x20>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     8f8:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     8fa:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     8fc:	a0 e5       	ldi	r26, 0x50	; 80
     8fe:	b0 e0       	ldi	r27, 0x00	; 0
     900:	16 96       	adiw	r26, 0x06	; 6
     902:	9c 91       	ld	r25, X
     904:	16 97       	sbiw	r26, 0x06	; 6
     906:	99 7f       	andi	r25, 0xF9	; 249
     908:	16 96       	adiw	r26, 0x06	; 6
     90a:	9c 93       	st	X, r25
     90c:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
     90e:	e0 e6       	ldi	r30, 0x60	; 96
     910:	f0 e0       	ldi	r31, 0x00	; 0
     912:	90 e8       	ldi	r25, 0x80	; 128
     914:	95 83       	std	Z+5, r25	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
     916:	9b eb       	ldi	r25, 0xBB	; 187
     918:	96 83       	std	Z+6, r25	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
     91a:	16 96       	adiw	r26, 0x06	; 6
     91c:	9c 91       	ld	r25, X
     91e:	16 97       	sbiw	r26, 0x06	; 6
     920:	94 60       	ori	r25, 0x04	; 4
     922:	16 96       	adiw	r26, 0x06	; 6
     924:	9c 93       	st	X, r25
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     926:	90 81       	ld	r25, Z
     928:	91 60       	ori	r25, 0x01	; 1
     92a:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     92c:	8f bf       	out	0x3f, r24	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
     92e:	63 60       	ori	r22, 0x03	; 3
     930:	84 e4       	ldi	r24, 0x44	; 68
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	dd d5       	rcall	.+3002   	; 0x14f0 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
     936:	60 e4       	ldi	r22, 0x40	; 64
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	b4 cf       	rjmp	.-152    	; 0x8a4 <sysclk_enable_module>
     93c:	08 95       	ret

0000093e <sysclk_disable_usb>:
/**
 * \brief Disable clock for the USB module
 */
void sysclk_disable_usb(void)
{
	sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
     93e:	60 e4       	ldi	r22, 0x40	; 64
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	bc df       	rcall	.-136    	; 0x8bc <sysclk_disable_module>
	ccp_write_io((uint8_t *)&CLK.USBCTRL, 0);
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	84 e4       	ldi	r24, 0x44	; 68
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	d2 c5       	rjmp	.+2980   	; 0x14f0 <ccp_write_io>
     94c:	08 95       	ret

0000094e <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	fc 01       	movw	r30, r24
     954:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     956:	20 e0       	ldi	r18, 0x00	; 0
     958:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     95a:	c6 2f       	mov	r28, r22
     95c:	d0 e0       	ldi	r29, 0x00	; 0
     95e:	de 01       	movw	r26, r28
     960:	02 2e       	mov	r0, r18
     962:	02 c0       	rjmp	.+4      	; 0x968 <ioport_configure_port_pin+0x1a>
     964:	b5 95       	asr	r27
     966:	a7 95       	ror	r26
     968:	0a 94       	dec	r0
     96a:	e2 f7       	brpl	.-8      	; 0x964 <ioport_configure_port_pin+0x16>
     96c:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     96e:	50 83       	st	Z, r21
     970:	2f 5f       	subi	r18, 0xFF	; 255
     972:	3f 4f       	sbci	r19, 0xFF	; 255
     974:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     976:	28 30       	cpi	r18, 0x08	; 8
     978:	31 05       	cpc	r19, r1
     97a:	89 f7       	brne	.-30     	; 0x95e <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     97c:	40 ff       	sbrs	r20, 0
     97e:	0a c0       	rjmp	.+20     	; 0x994 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
     980:	41 ff       	sbrs	r20, 1
     982:	03 c0       	rjmp	.+6      	; 0x98a <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     984:	fc 01       	movw	r30, r24
     986:	65 83       	std	Z+5, r22	; 0x05
     988:	02 c0       	rjmp	.+4      	; 0x98e <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     98a:	fc 01       	movw	r30, r24
     98c:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     98e:	fc 01       	movw	r30, r24
     990:	61 83       	std	Z+1, r22	; 0x01
     992:	02 c0       	rjmp	.+4      	; 0x998 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     994:	fc 01       	movw	r30, r24
     996:	62 83       	std	Z+2, r22	; 0x02
	}
}
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	08 95       	ret

0000099e <udi_hid_generic_getsetting>:


uint8_t udi_hid_generic_getsetting(void)
{
	return 0;
}
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	08 95       	ret

000009a2 <udi_hid_generic_setreport>:


static bool udi_hid_generic_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
     9a2:	30 91 e6 2b 	lds	r19, 0x2BE6
     9a6:	20 91 e7 2b 	lds	r18, 0x2BE7
     9aa:	82 2f       	mov	r24, r18
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	03 97       	sbiw	r24, 0x03	; 3
     9b0:	e1 f4       	brne	.+56     	; 0x9ea <udi_hid_generic_setreport+0x48>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
     9b2:	31 11       	cpse	r19, r1
     9b4:	1c c0       	rjmp	.+56     	; 0x9ee <udi_hid_generic_setreport+0x4c>
			&& (sizeof(udi_hid_generic_report_feature) ==
     9b6:	80 91 ea 2b 	lds	r24, 0x2BEA
     9ba:	90 91 eb 2b 	lds	r25, 0x2BEB
     9be:	04 97       	sbiw	r24, 0x04	; 4
     9c0:	c1 f4       	brne	.+48     	; 0x9f2 <udi_hid_generic_setreport+0x50>
					udd_g_ctrlreq.req.wLength)) {
		// Feature type on report ID 0
		udd_g_ctrlreq.payload =
     9c2:	86 ed       	ldi	r24, 0xD6	; 214
     9c4:	90 e2       	ldi	r25, 0x20	; 32
     9c6:	80 93 ec 2b 	sts	0x2BEC, r24
     9ca:	90 93 ed 2b 	sts	0x2BED, r25
				(uint8_t *) & udi_hid_generic_report_feature;
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
     9ce:	81 e3       	ldi	r24, 0x31	; 49
     9d0:	95 e0       	ldi	r25, 0x05	; 5
     9d2:	80 93 f0 2b 	sts	0x2BF0, r24
     9d6:	90 93 f1 2b 	sts	0x2BF1, r25
		udd_g_ctrlreq.payload_size =
     9da:	84 e0       	ldi	r24, 0x04	; 4
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	80 93 ee 2b 	sts	0x2BEE, r24
     9e2:	90 93 ef 2b 	sts	0x2BEF, r25
				sizeof(udi_hid_generic_report_feature);
		return true;
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	08 95       	ret
	}
	return false;
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	08 95       	ret
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	08 95       	ret
     9f2:	80 e0       	ldi	r24, 0x00	; 0
}
     9f4:	08 95       	ret

000009f6 <udi_hid_generic_report_in_sent>:
		iram_size_t nb_sent, udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	80 93 dc 22 	sts	0x22DC, r24
     9fc:	08 95       	ret

000009fe <udi_hid_generic_report_out_enable>:
	udi_hid_generic_report_out_enable();
}


static bool udi_hid_generic_report_out_enable(void)
{
     9fe:	0f 93       	push	r16
     a00:	1f 93       	push	r17
	return udd_ep_run(UDI_HID_GENERIC_EP_OUT,
     a02:	0a e1       	ldi	r16, 0x1A	; 26
     a04:	15 e0       	ldi	r17, 0x05	; 5
     a06:	21 e0       	ldi	r18, 0x01	; 1
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	4a ed       	ldi	r20, 0xDA	; 218
     a0c:	50 e2       	ldi	r21, 0x20	; 32
     a0e:	60 e0       	ldi	r22, 0x00	; 0
     a10:	82 e0       	ldi	r24, 0x02	; 2
     a12:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <udd_ep_run>
							false,
							(uint8_t *) & udi_hid_generic_report_out,
							sizeof(udi_hid_generic_report_out),
							udi_hid_generic_report_out_received);
}
     a16:	1f 91       	pop	r17
     a18:	0f 91       	pop	r16
     a1a:	08 95       	ret

00000a1c <udi_hid_generic_enable>:
//------ Interface for UDI HID level

bool udi_hid_generic_enable(void)
{
	// Initialize internal values
	udi_hid_generic_rate = 0;
     a1c:	10 92 de 22 	sts	0x22DE, r1
	udi_hid_generic_protocol = 0;
     a20:	10 92 dd 22 	sts	0x22DD, r1
	udi_hid_generic_b_report_in_free = true;
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	80 93 dc 22 	sts	0x22DC, r24
	if (!udi_hid_generic_report_out_enable())
     a2a:	e9 df       	rcall	.-46     	; 0x9fe <udi_hid_generic_report_out_enable>
     a2c:	81 11       	cpse	r24, r1
		return false;
	return UDI_HID_GENERIC_ENABLE_EXT();
     a2e:	0c 94 7d 11 	jmp	0x22fa	; 0x22fa <main_generic_enable>
}
     a32:	08 95       	ret

00000a34 <udi_hid_generic_report_out_received>:

static void udi_hid_generic_report_out_received(udd_ep_status_t status,
		iram_size_t nb_received, udd_ep_id_t ep)
{
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status)
     a34:	81 11       	cpse	r24, r1
     a36:	07 c0       	rjmp	.+14     	; 0xa46 <udi_hid_generic_report_out_received+0x12>
		return;	// Abort reception

	if (sizeof(udi_hid_generic_report_out) == nb_received) {
     a38:	61 30       	cpi	r22, 0x01	; 1
     a3a:	71 05       	cpc	r23, r1
     a3c:	19 f4       	brne	.+6      	; 0xa44 <udi_hid_generic_report_out_received+0x10>
		UDI_HID_GENERIC_REPORT_OUT(udi_hid_generic_report_out);
     a3e:	8a ed       	ldi	r24, 0xDA	; 218
     a40:	90 e2       	ldi	r25, 0x20	; 32
     a42:	b8 dc       	rcall	.-1680   	; 0x3b4 <ui_led_change>
	}
	udi_hid_generic_report_out_enable();
     a44:	dc cf       	rjmp	.-72     	; 0x9fe <udi_hid_generic_report_out_enable>
     a46:	08 95       	ret

00000a48 <udi_hid_generic_disable>:
}


void udi_hid_generic_disable(void)
{
	UDI_HID_GENERIC_DISABLE_EXT();
     a48:	0c 94 81 11 	jmp	0x2302	; 0x2302 <main_generic_disable>
     a4c:	08 95       	ret

00000a4e <udi_hid_generic_setup>:
}


bool udi_hid_generic_setup(void)
{
	return udi_hid_setup(&udi_hid_generic_rate,
     a4e:	21 ed       	ldi	r18, 0xD1	; 209
     a50:	34 e0       	ldi	r19, 0x04	; 4
     a52:	49 e0       	ldi	r20, 0x09	; 9
     a54:	50 e2       	ldi	r21, 0x20	; 32
     a56:	6d ed       	ldi	r22, 0xDD	; 221
     a58:	72 e2       	ldi	r23, 0x22	; 34
     a5a:	8e ed       	ldi	r24, 0xDE	; 222
     a5c:	92 e2       	ldi	r25, 0x22	; 34
     a5e:	44 c0       	rjmp	.+136    	; 0xae8 <udi_hid_setup>
								&udi_hid_generic_protocol,
								(uint8_t *) &udi_hid_generic_report_desc,
								udi_hid_generic_setreport);
}
     a60:	08 95       	ret

00000a62 <udi_hid_generic_setfeature_valid>:
//--------------------------------------------
//------ Internal routines

static void udi_hid_generic_setfeature_valid(void)
{
	if (sizeof(udi_hid_generic_report_feature) != udd_g_ctrlreq.payload_size)
     a62:	80 91 ee 2b 	lds	r24, 0x2BEE
     a66:	90 91 ef 2b 	lds	r25, 0x2BEF
     a6a:	04 97       	sbiw	r24, 0x04	; 4
     a6c:	21 f4       	brne	.+8      	; 0xa76 <udi_hid_generic_setfeature_valid+0x14>
		return;	// Bad data
	UDI_HID_GENERIC_SET_FEATURE(udi_hid_generic_report_feature);
     a6e:	86 ed       	ldi	r24, 0xD6	; 214
     a70:	90 e2       	ldi	r25, 0x20	; 32
     a72:	0c 94 84 11 	jmp	0x2308	; 0x2308 <main_hid_set_feature>
     a76:	08 95       	ret

00000a78 <udi_hid_generic_send_report_in>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_generic_send_report_in(uint8_t *data)
{
     a78:	ff 92       	push	r15
     a7a:	0f 93       	push	r16
     a7c:	1f 93       	push	r17
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	ec 01       	movw	r28, r24

	if (!udi_hid_generic_b_report_in_free)
     a84:	80 91 dc 22 	lds	r24, 0x22DC
     a88:	88 23       	and	r24, r24
     a8a:	39 f1       	breq	.+78     	; 0xada <udi_hid_generic_send_report_in+0x62>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     a8c:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
     a8e:	f8 94       	cli
		return false;
	irqflags_t flags = cpu_irq_save();
	
	// Fill report
	memset(&udi_hid_generic_report_in, '0',
     a90:	40 e0       	ldi	r20, 0x00	; 0
     a92:	52 e0       	ldi	r21, 0x02	; 2
     a94:	60 e3       	ldi	r22, 0x30	; 48
     a96:	70 e0       	ldi	r23, 0x00	; 0
     a98:	8c ed       	ldi	r24, 0xDC	; 220
     a9a:	90 e2       	ldi	r25, 0x20	; 32
     a9c:	0e 94 b9 11 	call	0x2372	; 0x2372 <memset>
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	92 e0       	ldi	r25, 0x02	; 2
     aa4:	fe 01       	movw	r30, r28
     aa6:	ac ed       	ldi	r26, 0xDC	; 220
     aa8:	b0 e2       	ldi	r27, 0x20	; 32
     aaa:	01 90       	ld	r0, Z+
     aac:	0d 92       	st	X+, r0
     aae:	01 97       	sbiw	r24, 0x01	; 1
     ab0:	e1 f7       	brne	.-8      	; 0xaaa <udi_hid_generic_send_report_in+0x32>
	      		sizeof(udi_hid_generic_report_in));
				  
	udi_hid_generic_b_report_in_free =
			!udd_ep_run(UDI_HID_GENERIC_EP_IN,
     ab2:	0b ef       	ldi	r16, 0xFB	; 251
     ab4:	14 e0       	ldi	r17, 0x04	; 4
     ab6:	20 e0       	ldi	r18, 0x00	; 0
     ab8:	32 e0       	ldi	r19, 0x02	; 2
     aba:	4c ed       	ldi	r20, 0xDC	; 220
     abc:	50 e2       	ldi	r21, 0x20	; 32
     abe:	60 e0       	ldi	r22, 0x00	; 0
     ac0:	81 e8       	ldi	r24, 0x81	; 129
     ac2:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <udd_ep_run>
							false,
							(uint8_t *) & udi_hid_generic_report_in,
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
     ac6:	91 e0       	ldi	r25, 0x01	; 1
     ac8:	89 27       	eor	r24, r25
	memset(&udi_hid_generic_report_in, '0',
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
	      		sizeof(udi_hid_generic_report_in));
				  
	udi_hid_generic_b_report_in_free =
     aca:	80 93 dc 22 	sts	0x22DC, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     ace:	ff be       	out	0x3f, r15	; 63
							false,
							(uint8_t *) & udi_hid_generic_report_in,
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_generic_b_report_in_free;
     ad0:	90 91 dc 22 	lds	r25, 0x22DC
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	89 27       	eor	r24, r25
     ad8:	01 c0       	rjmp	.+2      	; 0xadc <udi_hid_generic_send_report_in+0x64>

bool udi_hid_generic_send_report_in(uint8_t *data)
{

	if (!udi_hid_generic_b_report_in_free)
		return false;
     ada:	80 e0       	ldi	r24, 0x00	; 0
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_generic_b_report_in_free;

}
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	08 95       	ret

00000ae8 <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*set_report)(void) )
{
     ae8:	cf 93       	push	r28
     aea:	df 93       	push	r29
     aec:	ea 01       	movw	r28, r20
	if (Udd_setup_is_in()) {
     aee:	40 91 e4 2b 	lds	r20, 0x2BE4
     af2:	44 23       	and	r20, r20
     af4:	0c f0       	brlt	.+2      	; 0xaf8 <udi_hid_setup+0x10>
     af6:	62 c0       	rjmp	.+196    	; 0xbbc <udi_hid_setup+0xd4>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     af8:	40 76       	andi	r20, 0x60	; 96
     afa:	09 f0       	breq	.+2      	; 0xafe <udi_hid_setup+0x16>
     afc:	40 c0       	rjmp	.+128    	; 0xb7e <udi_hid_setup+0x96>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
     afe:	20 91 e5 2b 	lds	r18, 0x2BE5
     b02:	26 30       	cpi	r18, 0x06	; 6
     b04:	e1 f5       	brne	.+120    	; 0xb7e <udi_hid_setup+0x96>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
     b06:	6e d1       	rcall	.+732    	; 0xde4 <udc_get_interface_desc>
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
     b08:	fc 01       	movw	r30, r24
     b0a:	22 85       	ldd	r18, Z+10	; 0x0a
     b0c:	21 32       	cpi	r18, 0x21	; 33
     b0e:	99 f5       	brne	.+102    	; 0xb76 <udi_hid_setup+0x8e>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     b10:	20 91 e7 2b 	lds	r18, 0x2BE7
     b14:	21 32       	cpi	r18, 0x21	; 33
     b16:	b9 f4       	brne	.+46     	; 0xb46 <udi_hid_setup+0x5e>
{
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
     b18:	9c 01       	movw	r18, r24
     b1a:	27 5f       	subi	r18, 0xF7	; 247
     b1c:	3f 4f       	sbci	r19, 0xFF	; 255
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
     b1e:	20 93 ec 2b 	sts	0x2BEC, r18
     b22:	30 93 ed 2b 	sts	0x2BED, r19
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
     b26:	81 85       	ldd	r24, Z+9	; 0x09
     b28:	20 91 ea 2b 	lds	r18, 0x2BEA
     b2c:	30 91 eb 2b 	lds	r19, 0x2BEB
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	28 17       	cp	r18, r24
     b34:	39 07       	cpc	r19, r25
     b36:	08 f4       	brcc	.+2      	; 0xb3a <udi_hid_setup+0x52>
     b38:	c9 01       	movw	r24, r18
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
		udd_g_ctrlreq.payload_size =
     b3a:	80 93 ee 2b 	sts	0x2BEE, r24
     b3e:	90 93 ef 2b 	sts	0x2BEF, r25
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	64 c0       	rjmp	.+200    	; 0xc0e <udi_hid_setup+0x126>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
     b46:	fc 01       	movw	r30, r24
     b48:	37 85       	ldd	r19, Z+15	; 0x0f
     b4a:	23 13       	cpse	r18, r19
     b4c:	16 c0       	rjmp	.+44     	; 0xb7a <udi_hid_setup+0x92>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
     b4e:	c0 93 ec 2b 	sts	0x2BEC, r28
     b52:	d0 93 ed 2b 	sts	0x2BED, r29
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
     b56:	20 89       	ldd	r18, Z+16	; 0x10
     b58:	31 89       	ldd	r19, Z+17	; 0x11
     b5a:	80 91 ea 2b 	lds	r24, 0x2BEA
     b5e:	90 91 eb 2b 	lds	r25, 0x2BEB
     b62:	28 17       	cp	r18, r24
     b64:	39 07       	cpc	r19, r25
     b66:	08 f4       	brcc	.+2      	; 0xb6a <udi_hid_setup+0x82>
     b68:	c9 01       	movw	r24, r18
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
		udd_g_ctrlreq.payload_size =
     b6a:	80 93 ee 2b 	sts	0x2BEE, r24
     b6e:	90 93 ef 2b 	sts	0x2BEF, r25
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	4c c0       	rjmp	.+152    	; 0xc0e <udi_hid_setup+0x126>
	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
		return false;
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	4a c0       	rjmp	.+148    	; 0xc0e <udi_hid_setup+0x126>
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
     b7a:	80 e0       	ldi	r24, 0x00	; 0
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
     b7c:	48 c0       	rjmp	.+144    	; 0xc0e <udi_hid_setup+0x126>
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     b7e:	40 32       	cpi	r20, 0x20	; 32
     b80:	e9 f5       	brne	.+122    	; 0xbfc <udi_hid_setup+0x114>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
     b82:	20 91 e5 2b 	lds	r18, 0x2BE5
     b86:	22 30       	cpi	r18, 0x02	; 2
     b88:	19 f0       	breq	.+6      	; 0xb90 <udi_hid_setup+0xa8>
     b8a:	23 30       	cpi	r18, 0x03	; 3
     b8c:	61 f0       	breq	.+24     	; 0xba6 <udi_hid_setup+0xbe>
     b8e:	38 c0       	rjmp	.+112    	; 0xc00 <udi_hid_setup+0x118>
			case USB_REQ_HID_GET_REPORT:
				// TODO
				break;

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
     b90:	80 93 ec 2b 	sts	0x2BEC, r24
     b94:	90 93 ed 2b 	sts	0x2BED, r25
				udd_g_ctrlreq.payload_size = 1;
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	80 93 ee 2b 	sts	0x2BEE, r24
     ba0:	90 93 ef 2b 	sts	0x2BEF, r25
				return true;
     ba4:	34 c0       	rjmp	.+104    	; 0xc0e <udi_hid_setup+0x126>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
     ba6:	60 93 ec 2b 	sts	0x2BEC, r22
     baa:	70 93 ed 2b 	sts	0x2BED, r23
				udd_g_ctrlreq.payload_size = 1;
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	80 93 ee 2b 	sts	0x2BEE, r24
     bb6:	90 93 ef 2b 	sts	0x2BEF, r25
				return true;
     bba:	29 c0       	rjmp	.+82     	; 0xc0e <udi_hid_setup+0x126>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     bbc:	40 76       	andi	r20, 0x60	; 96
     bbe:	40 32       	cpi	r20, 0x20	; 32
     bc0:	09 f5       	brne	.+66     	; 0xc04 <udi_hid_setup+0x11c>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
     bc2:	40 91 e5 2b 	lds	r20, 0x2BE5
     bc6:	4a 30       	cpi	r20, 0x0A	; 10
     bc8:	39 f0       	breq	.+14     	; 0xbd8 <udi_hid_setup+0xf0>
     bca:	4b 30       	cpi	r20, 0x0B	; 11
     bcc:	59 f0       	breq	.+22     	; 0xbe4 <udi_hid_setup+0xfc>
     bce:	49 30       	cpi	r20, 0x09	; 9
     bd0:	d9 f4       	brne	.+54     	; 0xc08 <udi_hid_setup+0x120>

			case USB_REQ_HID_SET_REPORT:
				return set_report();
     bd2:	f9 01       	movw	r30, r18
     bd4:	19 95       	eicall
     bd6:	1b c0       	rjmp	.+54     	; 0xc0e <udi_hid_setup+0x126>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
     bd8:	20 91 e7 2b 	lds	r18, 0x2BE7
     bdc:	fc 01       	movw	r30, r24
     bde:	20 83       	st	Z, r18
				return true;
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	15 c0       	rjmp	.+42     	; 0xc0e <udi_hid_setup+0x126>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
     be4:	80 91 ea 2b 	lds	r24, 0x2BEA
     be8:	90 91 eb 2b 	lds	r25, 0x2BEB
     bec:	89 2b       	or	r24, r25
     bee:	71 f4       	brne	.+28     	; 0xc0c <udi_hid_setup+0x124>
					return false;
				*protocol = udd_g_ctrlreq.req.wValue;
     bf0:	80 91 e6 2b 	lds	r24, 0x2BE6
     bf4:	fb 01       	movw	r30, r22
     bf6:	80 83       	st	Z, r24
				return true;
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	09 c0       	rjmp	.+18     	; 0xc0e <udi_hid_setup+0x126>
			}
		}
	}
	return false;	// Request not supported
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	07 c0       	rjmp	.+14     	; 0xc0e <udi_hid_setup+0x126>
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <udi_hid_setup+0x126>
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	03 c0       	rjmp	.+6      	; 0xc0e <udi_hid_setup+0x126>
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	01 c0       	rjmp	.+2      	; 0xc0e <udi_hid_setup+0x126>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
				return true;

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
     c0c:	80 e0       	ldi	r24, 0x00	; 0
				return true;
			}
		}
	}
	return false;	// Request not supported
}
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	08 95       	ret

00000c14 <udc_next_desc_in_iface>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     c14:	e0 91 e4 22 	lds	r30, 0x22E4
     c18:	f0 91 e5 22 	lds	r31, 0x22E5
     c1c:	01 90       	ld	r0, Z+
     c1e:	f0 81       	ld	r31, Z
     c20:	e0 2d       	mov	r30, r0
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     c22:	22 81       	ldd	r18, Z+2	; 0x02
     c24:	33 81       	ldd	r19, Z+3	; 0x03
     c26:	2e 0f       	add	r18, r30
     c28:	3f 1f       	adc	r19, r31
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     c2a:	fc 01       	movw	r30, r24
     c2c:	40 81       	ld	r20, Z
     c2e:	e4 0f       	add	r30, r20
     c30:	f1 1d       	adc	r31, r1
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     c32:	e2 17       	cp	r30, r18
     c34:	f3 07       	cpc	r31, r19
     c36:	a0 f4       	brcc	.+40     	; 0xc60 <udc_next_desc_in_iface+0x4c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	84 30       	cpi	r24, 0x04	; 4
     c3c:	a1 f0       	breq	.+40     	; 0xc66 <udc_next_desc_in_iface+0x52>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
     c3e:	86 13       	cpse	r24, r22
     c40:	06 c0       	rjmp	.+12     	; 0xc4e <udc_next_desc_in_iface+0x3a>
     c42:	14 c0       	rjmp	.+40     	; 0xc6c <udc_next_desc_in_iface+0x58>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     c44:	81 81       	ldd	r24, Z+1	; 0x01
     c46:	84 30       	cpi	r24, 0x04	; 4
     c48:	a1 f0       	breq	.+40     	; 0xc72 <udc_next_desc_in_iface+0x5e>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
     c4a:	86 17       	cp	r24, r22
     c4c:	a9 f0       	breq	.+42     	; 0xc78 <udc_next_desc_in_iface+0x64>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     c4e:	80 81       	ld	r24, Z
     c50:	e8 0f       	add	r30, r24
     c52:	f1 1d       	adc	r31, r1
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     c54:	e2 17       	cp	r30, r18
     c56:	f3 07       	cpc	r31, r19
     c58:	a8 f3       	brcs	.-22     	; 0xc44 <udc_next_desc_in_iface+0x30>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	08 95       	ret
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	08 95       	ret
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	08 95       	ret
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     c6c:	8e 2f       	mov	r24, r30
     c6e:	9f 2f       	mov	r25, r31
     c70:	08 95       	ret
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	08 95       	ret
		}
		if (desc_id == desc->bDescriptorType) {
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     c78:	8e 2f       	mov	r24, r30
     c7a:	9f 2f       	mov	r25, r31
				desc->bLength);
	}
	return NULL; // No specific descriptor found
}
     c7c:	08 95       	ret

00000c7e <udc_valid_address>:
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
     c7e:	80 91 e6 2b 	lds	r24, 0x2BE6
     c82:	8f 77       	andi	r24, 0x7F	; 127
     c84:	83 c7       	rjmp	.+3846   	; 0x1b8c <udd_set_address>
     c86:	08 95       	ret

00000c88 <udc_update_iface_desc>:
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
     c88:	90 91 e6 22 	lds	r25, 0x22E6
     c8c:	99 23       	and	r25, r25
     c8e:	81 f1       	breq	.+96     	; 0xcf0 <udc_update_iface_desc+0x68>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     c90:	e0 91 e4 22 	lds	r30, 0x22E4
     c94:	f0 91 e5 22 	lds	r31, 0x22E5
     c98:	01 90       	ld	r0, Z+
     c9a:	f0 81       	ld	r31, Z
     c9c:	e0 2d       	mov	r30, r0
     c9e:	94 81       	ldd	r25, Z+4	; 0x04
     ca0:	89 17       	cp	r24, r25
     ca2:	40 f5       	brcc	.+80     	; 0xcf4 <udc_update_iface_desc+0x6c>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
     ca4:	e0 93 e2 22 	sts	0x22E2, r30
     ca8:	f0 93 e3 22 	sts	0x22E3, r31
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     cac:	22 81       	ldd	r18, Z+2	; 0x02
     cae:	33 81       	ldd	r19, Z+3	; 0x03
     cb0:	2e 0f       	add	r18, r30
     cb2:	3f 1f       	adc	r19, r31
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
     cb4:	e2 17       	cp	r30, r18
     cb6:	f3 07       	cpc	r31, r19
     cb8:	f8 f4       	brcc	.+62     	; 0xcf8 <udc_update_iface_desc+0x70>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
     cba:	91 81       	ldd	r25, Z+1	; 0x01
     cbc:	94 30       	cpi	r25, 0x04	; 4
     cbe:	61 f4       	brne	.+24     	; 0xcd8 <udc_update_iface_desc+0x50>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
     cc0:	92 81       	ldd	r25, Z+2	; 0x02
     cc2:	98 13       	cpse	r25, r24
     cc4:	09 c0       	rjmp	.+18     	; 0xcd8 <udc_update_iface_desc+0x50>
     cc6:	93 81       	ldd	r25, Z+3	; 0x03
     cc8:	96 13       	cpse	r25, r22
     cca:	06 c0       	rjmp	.+12     	; 0xcd8 <udc_update_iface_desc+0x50>
     ccc:	e0 93 e2 22 	sts	0x22E2, r30
     cd0:	f0 93 e3 22 	sts	0x22E3, r31
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	08 95       	ret
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
     cd8:	90 81       	ld	r25, Z
     cda:	e9 0f       	add	r30, r25
     cdc:	f1 1d       	adc	r31, r1
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
     cde:	e2 17       	cp	r30, r18
     ce0:	f3 07       	cpc	r31, r19
     ce2:	58 f3       	brcs	.-42     	; 0xcba <udc_update_iface_desc+0x32>
     ce4:	e0 93 e2 22 	sts	0x22E2, r30
     ce8:	f0 93 e3 22 	sts	0x22E3, r31
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	08 95       	ret
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
		return false;
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	08 95       	ret
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	08 95       	ret
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
     cf8:	80 e0       	ldi	r24, 0x00	; 0
}
     cfa:	08 95       	ret

00000cfc <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
     cfc:	ff 92       	push	r15
     cfe:	0f 93       	push	r16
     d00:	1f 93       	push	r17
     d02:	cf 93       	push	r28
     d04:	df 93       	push	r29
     d06:	c8 2f       	mov	r28, r24
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	be df       	rcall	.-132    	; 0xc88 <udc_update_iface_desc>
     d0c:	f8 2e       	mov	r15, r24
     d0e:	88 23       	and	r24, r24
     d10:	81 f1       	breq	.+96     	; 0xd72 <udc_iface_disable+0x76>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     d12:	a0 91 e4 22 	lds	r26, 0x22E4
     d16:	b0 91 e5 22 	lds	r27, 0x22E5
     d1a:	ec 2f       	mov	r30, r28
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	ee 0f       	add	r30, r30
     d20:	ff 1f       	adc	r31, r31
     d22:	12 96       	adiw	r26, 0x02	; 2
     d24:	2d 91       	ld	r18, X+
     d26:	3c 91       	ld	r19, X
     d28:	13 97       	sbiw	r26, 0x03	; 3
     d2a:	e2 0f       	add	r30, r18
     d2c:	f3 1f       	adc	r31, r19
     d2e:	00 81       	ld	r16, Z
     d30:	11 81       	ldd	r17, Z+1	; 0x01

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     d32:	d8 01       	movw	r26, r16
     d34:	16 96       	adiw	r26, 0x06	; 6
     d36:	ed 91       	ld	r30, X+
     d38:	fc 91       	ld	r31, X
     d3a:	17 97       	sbiw	r26, 0x07	; 7
     d3c:	19 95       	eicall
     d3e:	68 2f       	mov	r22, r24
     d40:	8c 2f       	mov	r24, r28
     d42:	a2 df       	rcall	.-188    	; 0xc88 <udc_update_iface_desc>
     d44:	f8 2e       	mov	r15, r24
     d46:	88 23       	and	r24, r24
     d48:	a1 f0       	breq	.+40     	; 0xd72 <udc_iface_disable+0x76>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     d4a:	c0 91 e2 22 	lds	r28, 0x22E2
     d4e:	d0 91 e3 22 	lds	r29, 0x22E3
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     d52:	65 e0       	ldi	r22, 0x05	; 5
     d54:	ce 01       	movw	r24, r28
     d56:	5e df       	rcall	.-324    	; 0xc14 <udc_next_desc_in_iface>
     d58:	ec 01       	movw	r28, r24
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
     d5a:	00 97       	sbiw	r24, 0x00	; 0
     d5c:	21 f0       	breq	.+8      	; 0xd66 <udc_iface_disable+0x6a>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
     d5e:	8a 81       	ldd	r24, Y+2	; 0x02
     d60:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <udd_ep_free>
		}
     d64:	f6 cf       	rjmp	.-20     	; 0xd52 <udc_iface_disable+0x56>
	}
#endif

	// Disable interface
	udi_api->disable();
     d66:	d8 01       	movw	r26, r16
     d68:	12 96       	adiw	r26, 0x02	; 2
     d6a:	ed 91       	ld	r30, X+
     d6c:	fc 91       	ld	r31, X
     d6e:	13 97       	sbiw	r26, 0x03	; 3
     d70:	19 95       	eicall
	return true;
}
     d72:	8f 2d       	mov	r24, r15
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	1f 91       	pop	r17
     d7a:	0f 91       	pop	r16
     d7c:	ff 90       	pop	r15
     d7e:	08 95       	ret

00000d80 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
     d80:	1f 93       	push	r17
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	18 2f       	mov	r17, r24
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
     d88:	7f df       	rcall	.-258    	; 0xc88 <udc_update_iface_desc>
     d8a:	88 23       	and	r24, r24
     d8c:	39 f1       	breq	.+78     	; 0xddc <udc_iface_enable+0x5c>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     d8e:	c0 91 e2 22 	lds	r28, 0x22E2
     d92:	d0 91 e3 22 	lds	r29, 0x22E3
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     d96:	65 e0       	ldi	r22, 0x05	; 5
     d98:	ce 01       	movw	r24, r28
     d9a:	3c df       	rcall	.-392    	; 0xc14 <udc_next_desc_in_iface>
     d9c:	ec 01       	movw	r28, r24
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
     d9e:	00 97       	sbiw	r24, 0x00	; 0
     da0:	41 f0       	breq	.+16     	; 0xdb2 <udc_iface_enable+0x32>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     da2:	4c 81       	ldd	r20, Y+4	; 0x04
     da4:	5d 81       	ldd	r21, Y+5	; 0x05
     da6:	6b 81       	ldd	r22, Y+3	; 0x03
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	13 d7       	rcall	.+3622   	; 0x1bd2 <udd_ep_alloc>
     dac:	81 11       	cpse	r24, r1
     dae:	f3 cf       	rjmp	.-26     	; 0xd96 <udc_iface_enable+0x16>
     db0:	15 c0       	rjmp	.+42     	; 0xddc <udc_iface_enable+0x5c>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
     db2:	a0 91 e4 22 	lds	r26, 0x22E4
     db6:	b0 91 e5 22 	lds	r27, 0x22E5
     dba:	81 2f       	mov	r24, r17
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	12 96       	adiw	r26, 0x02	; 2
     dc4:	ed 91       	ld	r30, X+
     dc6:	fc 91       	ld	r31, X
     dc8:	13 97       	sbiw	r26, 0x03	; 3
     dca:	e8 0f       	add	r30, r24
     dcc:	f9 1f       	adc	r31, r25
     dce:	01 90       	ld	r0, Z+
     dd0:	f0 81       	ld	r31, Z
     dd2:	e0 2d       	mov	r30, r0
     dd4:	01 90       	ld	r0, Z+
     dd6:	f0 81       	ld	r31, Z
     dd8:	e0 2d       	mov	r30, r0
     dda:	19 95       	eicall
}
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	1f 91       	pop	r17
     de2:	08 95       	ret

00000de4 <udc_get_interface_desc>:
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
	return udc_ptr_iface;
}
     de4:	80 91 e2 22 	lds	r24, 0x22E2
     de8:	90 91 e3 22 	lds	r25, 0x22E3
     dec:	08 95       	ret

00000dee <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
	udd_enable();
     dee:	5c c6       	rjmp	.+3256   	; 0x1aa8 <udd_enable>
     df0:	08 95       	ret

00000df2 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
     df2:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     df4:	80 91 e6 22 	lds	r24, 0x22E6
     df8:	88 23       	and	r24, r24
     dfa:	c1 f0       	breq	.+48     	; 0xe2c <udc_reset+0x3a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     dfc:	e0 91 e4 22 	lds	r30, 0x22E4
     e00:	f0 91 e5 22 	lds	r31, 0x22E5
     e04:	01 90       	ld	r0, Z+
     e06:	f0 81       	ld	r31, Z
     e08:	e0 2d       	mov	r30, r0
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     e0a:	84 81       	ldd	r24, Z+4	; 0x04
     e0c:	88 23       	and	r24, r24
     e0e:	71 f0       	breq	.+28     	; 0xe2c <udc_reset+0x3a>
     e10:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
     e12:	8c 2f       	mov	r24, r28
     e14:	73 df       	rcall	.-282    	; 0xcfc <udc_iface_disable>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     e16:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     e18:	e0 91 e4 22 	lds	r30, 0x22E4
     e1c:	f0 91 e5 22 	lds	r31, 0x22E5
     e20:	01 90       	ld	r0, Z+
     e22:	f0 81       	ld	r31, Z
     e24:	e0 2d       	mov	r30, r0
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     e26:	84 81       	ldd	r24, Z+4	; 0x04
     e28:	c8 17       	cp	r28, r24
     e2a:	98 f3       	brcs	.-26     	; 0xe12 <udc_reset+0x20>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
     e2c:	10 92 e6 22 	sts	0x22E6, r1
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
     e30:	80 91 e7 22 	lds	r24, 0x22E7
     e34:	81 fd       	sbrc	r24, 1
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
     e36:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <main_remotewakeup_disable>
	}
#endif
	udc_device_status =
     e3a:	10 92 e7 22 	sts	0x22E7, r1
     e3e:	10 92 e8 22 	sts	0x22E8, r1
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
     e42:	cf 91       	pop	r28
     e44:	08 95       	ret

00000e46 <udc_stop>:

/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
     e46:	f3 d5       	rcall	.+3046   	; 0x1a2e <udd_disable>
	udc_reset();
     e48:	d4 cf       	rjmp	.-88     	; 0xdf2 <udc_reset>
     e4a:	08 95       	ret

00000e4c <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     e4c:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     e4e:	80 91 e6 22 	lds	r24, 0x22E6
     e52:	88 23       	and	r24, r24
     e54:	41 f1       	breq	.+80     	; 0xea6 <udc_sof_notify+0x5a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     e56:	e0 91 e4 22 	lds	r30, 0x22E4
     e5a:	f0 91 e5 22 	lds	r31, 0x22E5
     e5e:	a0 81       	ld	r26, Z
     e60:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     e62:	14 96       	adiw	r26, 0x04	; 4
     e64:	8c 91       	ld	r24, X
     e66:	88 23       	and	r24, r24
     e68:	f1 f0       	breq	.+60     	; 0xea6 <udc_sof_notify+0x5a>
     e6a:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     e6c:	8c 2f       	mov	r24, r28
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	02 80       	ldd	r0, Z+2	; 0x02
     e76:	f3 81       	ldd	r31, Z+3	; 0x03
     e78:	e0 2d       	mov	r30, r0
     e7a:	e8 0f       	add	r30, r24
     e7c:	f9 1f       	adc	r31, r25
     e7e:	01 90       	ld	r0, Z+
     e80:	f0 81       	ld	r31, Z
     e82:	e0 2d       	mov	r30, r0
     e84:	00 84       	ldd	r0, Z+8	; 0x08
     e86:	f1 85       	ldd	r31, Z+9	; 0x09
     e88:	e0 2d       	mov	r30, r0
     e8a:	30 97       	sbiw	r30, 0x00	; 0
     e8c:	09 f0       	breq	.+2      	; 0xe90 <udc_sof_notify+0x44>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     e8e:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     e90:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     e92:	e0 91 e4 22 	lds	r30, 0x22E4
     e96:	f0 91 e5 22 	lds	r31, 0x22E5
     e9a:	a0 81       	ld	r26, Z
     e9c:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     e9e:	14 96       	adiw	r26, 0x04	; 4
     ea0:	8c 91       	ld	r24, X
     ea2:	c8 17       	cp	r28, r24
     ea4:	18 f3       	brcs	.-58     	; 0xe6c <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     ea6:	cf 91       	pop	r28
     ea8:	08 95       	ret

00000eaa <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     eaa:	ef 92       	push	r14
     eac:	ff 92       	push	r15
     eae:	0f 93       	push	r16
     eb0:	1f 93       	push	r17
     eb2:	cf 93       	push	r28
     eb4:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     eb6:	10 92 ee 2b 	sts	0x2BEE, r1
     eba:	10 92 ef 2b 	sts	0x2BEF, r1
	udd_g_ctrlreq.callback = NULL;
     ebe:	10 92 f0 2b 	sts	0x2BF0, r1
     ec2:	10 92 f1 2b 	sts	0x2BF1, r1
	udd_g_ctrlreq.over_under_run = NULL;
     ec6:	10 92 f2 2b 	sts	0x2BF2, r1
     eca:	10 92 f3 2b 	sts	0x2BF3, r1

	if (Udd_setup_is_in()) {
     ece:	20 91 e4 2b 	lds	r18, 0x2BE4
     ed2:	22 23       	and	r18, r18
     ed4:	0c f0       	brlt	.+2      	; 0xed8 <udc_process_setup+0x2e>
     ed6:	93 c2       	rjmp	.+1318   	; 0x13fe <udc_process_setup+0x554>
		if (udd_g_ctrlreq.req.wLength == 0) {
     ed8:	80 91 ea 2b 	lds	r24, 0x2BEA
     edc:	90 91 eb 2b 	lds	r25, 0x2BEB
     ee0:	00 97       	sbiw	r24, 0x00	; 0
     ee2:	09 f0       	breq	.+2      	; 0xee6 <udc_process_setup+0x3c>
     ee4:	91 c2       	rjmp	.+1314   	; 0x1408 <udc_process_setup+0x55e>
     ee6:	87 c2       	rjmp	.+1294   	; 0x13f6 <udc_process_setup+0x54c>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     ee8:	2f 71       	andi	r18, 0x1F	; 31
     eea:	09 f0       	breq	.+2      	; 0xeee <udc_process_setup+0x44>
     eec:	9d c0       	rjmp	.+314    	; 0x1028 <udc_process_setup+0x17e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     eee:	30 91 e5 2b 	lds	r19, 0x2BE5
     ef2:	36 30       	cpi	r19, 0x06	; 6
     ef4:	81 f0       	breq	.+32     	; 0xf16 <udc_process_setup+0x6c>
     ef6:	38 30       	cpi	r19, 0x08	; 8
     ef8:	09 f4       	brne	.+2      	; 0xefc <udc_process_setup+0x52>
     efa:	8b c0       	rjmp	.+278    	; 0x1012 <udc_process_setup+0x168>
     efc:	31 11       	cpse	r19, r1
     efe:	94 c0       	rjmp	.+296    	; 0x1028 <udc_process_setup+0x17e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     f00:	02 97       	sbiw	r24, 0x02	; 2
     f02:	39 f4       	brne	.+14     	; 0xf12 <udc_process_setup+0x68>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     f04:	62 e0       	ldi	r22, 0x02	; 2
     f06:	70 e0       	ldi	r23, 0x00	; 0
     f08:	87 ee       	ldi	r24, 0xE7	; 231
     f0a:	92 e2       	ldi	r25, 0x22	; 34
     f0c:	59 d6       	rcall	.+3250   	; 0x1bc0 <udd_set_setup_payload>
			sizeof(udc_device_status));
	return true;
     f0e:	01 e0       	ldi	r16, 0x01	; 1
     f10:	f5 c1       	rjmp	.+1002   	; 0x12fc <udc_process_setup+0x452>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
     f12:	00 e0       	ldi	r16, 0x00	; 0
     f14:	f3 c1       	rjmp	.+998    	; 0x12fc <udc_process_setup+0x452>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     f16:	20 91 e6 2b 	lds	r18, 0x2BE6
     f1a:	30 91 e7 2b 	lds	r19, 0x2BE7

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     f1e:	83 2f       	mov	r24, r19
     f20:	99 27       	eor	r25, r25
     f22:	82 30       	cpi	r24, 0x02	; 2
     f24:	91 05       	cpc	r25, r1
     f26:	79 f0       	breq	.+30     	; 0xf46 <udc_process_setup+0x9c>
     f28:	83 30       	cpi	r24, 0x03	; 3
     f2a:	91 05       	cpc	r25, r1
     f2c:	69 f1       	breq	.+90     	; 0xf88 <udc_process_setup+0xde>
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	09 f0       	breq	.+2      	; 0xf34 <udc_process_setup+0x8a>
     f32:	67 c0       	rjmp	.+206    	; 0x1002 <udc_process_setup+0x158>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     f34:	80 91 48 20 	lds	r24, 0x2048
     f38:	90 91 49 20 	lds	r25, 0x2049
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     f3c:	dc 01       	movw	r26, r24
     f3e:	6c 91       	ld	r22, X
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	3e d6       	rcall	.+3196   	; 0x1bc0 <udd_set_setup_payload>
     f44:	4d c0       	rjmp	.+154    	; 0xfe0 <udc_process_setup+0x136>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     f46:	e0 91 48 20 	lds	r30, 0x2048
     f4a:	f0 91 49 20 	lds	r31, 0x2049
     f4e:	81 89       	ldd	r24, Z+17	; 0x11
     f50:	28 17       	cp	r18, r24
     f52:	08 f0       	brcs	.+2      	; 0xf56 <udc_process_setup+0xac>
     f54:	58 c0       	rjmp	.+176    	; 0x1006 <udc_process_setup+0x15c>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     f56:	c9 01       	movw	r24, r18
     f58:	99 27       	eor	r25, r25
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	e0 91 4a 20 	lds	r30, 0x204A
     f66:	f0 91 4b 20 	lds	r31, 0x204B
     f6a:	e8 0f       	add	r30, r24
     f6c:	f9 1f       	adc	r31, r25
     f6e:	80 81       	ld	r24, Z
     f70:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     f72:	fc 01       	movw	r30, r24
     f74:	62 81       	ldd	r22, Z+2	; 0x02
     f76:	73 81       	ldd	r23, Z+3	; 0x03
     f78:	23 d6       	rcall	.+3142   	; 0x1bc0 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     f7a:	e0 91 ec 2b 	lds	r30, 0x2BEC
     f7e:	f0 91 ed 2b 	lds	r31, 0x2BED
     f82:	82 e0       	ldi	r24, 0x02	; 2
     f84:	81 83       	std	Z+1, r24	; 0x01
     f86:	2c c0       	rjmp	.+88     	; 0xfe0 <udc_process_setup+0x136>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     f88:	33 27       	eor	r19, r19
     f8a:	21 30       	cpi	r18, 0x01	; 1
     f8c:	31 05       	cpc	r19, r1
     f8e:	59 f0       	breq	.+22     	; 0xfa6 <udc_process_setup+0xfc>
     f90:	20 f0       	brcs	.+8      	; 0xf9a <udc_process_setup+0xf0>
     f92:	22 30       	cpi	r18, 0x02	; 2
     f94:	31 05       	cpc	r19, r1
     f96:	59 f0       	breq	.+22     	; 0xfae <udc_process_setup+0x104>
     f98:	38 c0       	rjmp	.+112    	; 0x100a <udc_process_setup+0x160>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     f9a:	64 e0       	ldi	r22, 0x04	; 4
     f9c:	70 e0       	ldi	r23, 0x00	; 0
     f9e:	8c eb       	ldi	r24, 0xBC	; 188
     fa0:	90 e2       	ldi	r25, 0x20	; 32
     fa2:	0e d6       	rcall	.+3100   	; 0x1bc0 <udd_set_setup_payload>
     fa4:	1d c0       	rjmp	.+58     	; 0xfe0 <udc_process_setup+0x136>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
     fa6:	82 eb       	ldi	r24, 0xB2	; 178
     fa8:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     faa:	29 e0       	ldi	r18, 0x09	; 9
     fac:	03 c0       	rjmp	.+6      	; 0xfb4 <udc_process_setup+0x10a>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
     fae:	86 ea       	ldi	r24, 0xA6	; 166
     fb0:	90 e2       	ldi	r25, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
     fb2:	2b e0       	ldi	r18, 0x0B	; 11
     fb4:	38 2f       	mov	r19, r24
     fb6:	a0 e9       	ldi	r26, 0x90	; 144
     fb8:	b0 e2       	ldi	r27, 0x20	; 32
     fba:	e8 2f       	mov	r30, r24
     fbc:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     fbe:	81 91       	ld	r24, Z+
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	8d 93       	st	X+, r24
     fc4:	9d 93       	st	X+, r25
     fc6:	8e 2f       	mov	r24, r30
     fc8:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
     fca:	82 17       	cp	r24, r18
     fcc:	c0 f3       	brcs	.-16     	; 0xfbe <udc_process_setup+0x114>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     fce:	22 0f       	add	r18, r18
     fd0:	62 e0       	ldi	r22, 0x02	; 2
     fd2:	62 0f       	add	r22, r18
     fd4:	60 93 8e 20 	sts	0x208E, r22
		udd_set_setup_payload(
     fd8:	70 e0       	ldi	r23, 0x00	; 0
     fda:	8e e8       	ldi	r24, 0x8E	; 142
     fdc:	90 e2       	ldi	r25, 0x20	; 32
     fde:	f0 d5       	rcall	.+3040   	; 0x1bc0 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     fe0:	80 91 ea 2b 	lds	r24, 0x2BEA
     fe4:	90 91 eb 2b 	lds	r25, 0x2BEB
     fe8:	20 91 ee 2b 	lds	r18, 0x2BEE
     fec:	30 91 ef 2b 	lds	r19, 0x2BEF
     ff0:	82 17       	cp	r24, r18
     ff2:	93 07       	cpc	r25, r19
     ff4:	60 f4       	brcc	.+24     	; 0x100e <udc_process_setup+0x164>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     ff6:	80 93 ee 2b 	sts	0x2BEE, r24
     ffa:	90 93 ef 2b 	sts	0x2BEF, r25
	}
	return true;
     ffe:	01 e0       	ldi	r16, 0x01	; 1
    1000:	7d c1       	rjmp	.+762    	; 0x12fc <udc_process_setup+0x452>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1002:	00 e0       	ldi	r16, 0x00	; 0
    1004:	7b c1       	rjmp	.+758    	; 0x12fc <udc_process_setup+0x452>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
    1006:	00 e0       	ldi	r16, 0x00	; 0
    1008:	79 c1       	rjmp	.+754    	; 0x12fc <udc_process_setup+0x452>
#endif

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
    100a:	00 e0       	ldi	r16, 0x00	; 0
    100c:	77 c1       	rjmp	.+750    	; 0x12fc <udc_process_setup+0x452>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
    100e:	01 e0       	ldi	r16, 0x01	; 1
    1010:	75 c1       	rjmp	.+746    	; 0x12fc <udc_process_setup+0x452>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1012:	01 97       	sbiw	r24, 0x01	; 1
    1014:	39 f4       	brne	.+14     	; 0x1024 <udc_process_setup+0x17a>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    1016:	61 e0       	ldi	r22, 0x01	; 1
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	86 ee       	ldi	r24, 0xE6	; 230
    101c:	92 e2       	ldi	r25, 0x22	; 34
    101e:	d0 d5       	rcall	.+2976   	; 0x1bc0 <udd_set_setup_payload>
	return true;
    1020:	01 e0       	ldi	r16, 0x01	; 1
    1022:	6c c1       	rjmp	.+728    	; 0x12fc <udc_process_setup+0x452>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
    1024:	00 e0       	ldi	r16, 0x00	; 0
    1026:	6a c1       	rjmp	.+724    	; 0x12fc <udc_process_setup+0x452>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1028:	21 30       	cpi	r18, 0x01	; 1
    102a:	09 f0       	breq	.+2      	; 0x102e <udc_process_setup+0x184>
    102c:	3f c0       	rjmp	.+126    	; 0x10ac <udc_process_setup+0x202>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    102e:	30 91 e5 2b 	lds	r19, 0x2BE5
    1032:	3a 30       	cpi	r19, 0x0A	; 10
    1034:	d9 f5       	brne	.+118    	; 0x10ac <udc_process_setup+0x202>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1036:	01 97       	sbiw	r24, 0x01	; 1
    1038:	99 f5       	brne	.+102    	; 0x10a0 <udc_process_setup+0x1f6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    103a:	80 91 e6 22 	lds	r24, 0x22E6
    103e:	88 23       	and	r24, r24
    1040:	89 f1       	breq	.+98     	; 0x10a4 <udc_process_setup+0x1fa>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1042:	c0 91 e8 2b 	lds	r28, 0x2BE8
    1046:	d0 91 e9 2b 	lds	r29, 0x2BE9
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    104a:	e0 90 e4 22 	lds	r14, 0x22E4
    104e:	f0 90 e5 22 	lds	r15, 0x22E5
    1052:	d7 01       	movw	r26, r14
    1054:	ed 91       	ld	r30, X+
    1056:	fc 91       	ld	r31, X
    1058:	84 81       	ldd	r24, Z+4	; 0x04
    105a:	c8 17       	cp	r28, r24
    105c:	28 f5       	brcc	.+74     	; 0x10a8 <udc_process_setup+0x1fe>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	8c 2f       	mov	r24, r28
    1062:	12 de       	rcall	.-988    	; 0xc88 <udc_update_iface_desc>
    1064:	08 2f       	mov	r16, r24
    1066:	88 23       	and	r24, r24
    1068:	09 f4       	brne	.+2      	; 0x106c <udc_process_setup+0x1c2>
    106a:	48 c1       	rjmp	.+656    	; 0x12fc <udc_process_setup+0x452>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    106c:	ce 01       	movw	r24, r28
    106e:	99 27       	eor	r25, r25
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	d7 01       	movw	r26, r14
    1076:	12 96       	adiw	r26, 0x02	; 2
    1078:	ed 91       	ld	r30, X+
    107a:	fc 91       	ld	r31, X
    107c:	13 97       	sbiw	r26, 0x03	; 3
    107e:	e8 0f       	add	r30, r24
    1080:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1082:	01 90       	ld	r0, Z+
    1084:	f0 81       	ld	r31, Z
    1086:	e0 2d       	mov	r30, r0
    1088:	06 80       	ldd	r0, Z+6	; 0x06
    108a:	f7 81       	ldd	r31, Z+7	; 0x07
    108c:	e0 2d       	mov	r30, r0
    108e:	19 95       	eicall
    1090:	80 93 e1 22 	sts	0x22E1, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1094:	61 e0       	ldi	r22, 0x01	; 1
    1096:	70 e0       	ldi	r23, 0x00	; 0
    1098:	81 ee       	ldi	r24, 0xE1	; 225
    109a:	92 e2       	ldi	r25, 0x22	; 34
    109c:	91 d5       	rcall	.+2850   	; 0x1bc0 <udd_set_setup_payload>
    109e:	2e c1       	rjmp	.+604    	; 0x12fc <udc_process_setup+0x452>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
    10a0:	00 e0       	ldi	r16, 0x00	; 0
    10a2:	2c c1       	rjmp	.+600    	; 0x12fc <udc_process_setup+0x452>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
    10a4:	00 e0       	ldi	r16, 0x00	; 0
    10a6:	2a c1       	rjmp	.+596    	; 0x12fc <udc_process_setup+0x452>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
    10a8:	00 e0       	ldi	r16, 0x00	; 0
    10aa:	28 c1       	rjmp	.+592    	; 0x12fc <udc_process_setup+0x452>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    10ac:	22 30       	cpi	r18, 0x02	; 2
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <udc_process_setup+0x208>
    10b0:	27 c1       	rjmp	.+590    	; 0x1300 <udc_process_setup+0x456>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    10b2:	20 91 e5 2b 	lds	r18, 0x2BE5
    10b6:	21 11       	cpse	r18, r1
    10b8:	1e c1       	rjmp	.+572    	; 0x12f6 <udc_process_setup+0x44c>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    10ba:	02 97       	sbiw	r24, 0x02	; 2
    10bc:	79 f4       	brne	.+30     	; 0x10dc <udc_process_setup+0x232>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    10be:	80 91 e8 2b 	lds	r24, 0x2BE8
    10c2:	e8 d5       	rcall	.+3024   	; 0x1c94 <udd_ep_is_halted>
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	80 93 df 22 	sts	0x22DF, r24
    10ca:	90 93 e0 22 	sts	0x22E0, r25
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    10ce:	62 e0       	ldi	r22, 0x02	; 2
    10d0:	70 e0       	ldi	r23, 0x00	; 0
    10d2:	8f ed       	ldi	r24, 0xDF	; 223
    10d4:	92 e2       	ldi	r25, 0x22	; 34
    10d6:	74 d5       	rcall	.+2792   	; 0x1bc0 <udd_set_setup_payload>
			sizeof(udc_ep_status));
	return true;
    10d8:	01 e0       	ldi	r16, 0x01	; 1
    10da:	10 c1       	rjmp	.+544    	; 0x12fc <udc_process_setup+0x452>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
    10dc:	00 e0       	ldi	r16, 0x00	; 0
    10de:	0e c1       	rjmp	.+540    	; 0x12fc <udc_process_setup+0x452>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    10e0:	2f 71       	andi	r18, 0x1F	; 31
    10e2:	09 f0       	breq	.+2      	; 0x10e6 <udc_process_setup+0x23c>
    10e4:	af c0       	rjmp	.+350    	; 0x1244 <udc_process_setup+0x39a>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    10e6:	80 91 e5 2b 	lds	r24, 0x2BE5
    10ea:	83 30       	cpi	r24, 0x03	; 3
    10ec:	b9 f1       	breq	.+110    	; 0x115c <udc_process_setup+0x2b2>
    10ee:	18 f4       	brcc	.+6      	; 0x10f6 <udc_process_setup+0x24c>
    10f0:	81 30       	cpi	r24, 0x01	; 1
    10f2:	b9 f0       	breq	.+46     	; 0x1122 <udc_process_setup+0x278>
    10f4:	a7 c0       	rjmp	.+334    	; 0x1244 <udc_process_setup+0x39a>
    10f6:	85 30       	cpi	r24, 0x05	; 5
    10f8:	21 f0       	breq	.+8      	; 0x1102 <udc_process_setup+0x258>
    10fa:	89 30       	cpi	r24, 0x09	; 9
    10fc:	09 f4       	brne	.+2      	; 0x1100 <udc_process_setup+0x256>
    10fe:	4b c0       	rjmp	.+150    	; 0x1196 <udc_process_setup+0x2ec>
    1100:	a1 c0       	rjmp	.+322    	; 0x1244 <udc_process_setup+0x39a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1102:	80 91 ea 2b 	lds	r24, 0x2BEA
    1106:	90 91 eb 2b 	lds	r25, 0x2BEB
    110a:	89 2b       	or	r24, r25
    110c:	41 f4       	brne	.+16     	; 0x111e <udc_process_setup+0x274>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    110e:	8f e3       	ldi	r24, 0x3F	; 63
    1110:	96 e0       	ldi	r25, 0x06	; 6
    1112:	80 93 f0 2b 	sts	0x2BF0, r24
    1116:	90 93 f1 2b 	sts	0x2BF1, r25
	return true;
    111a:	01 e0       	ldi	r16, 0x01	; 1
    111c:	ef c0       	rjmp	.+478    	; 0x12fc <udc_process_setup+0x452>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    111e:	00 e0       	ldi	r16, 0x00	; 0
    1120:	ed c0       	rjmp	.+474    	; 0x12fc <udc_process_setup+0x452>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1122:	80 91 ea 2b 	lds	r24, 0x2BEA
    1126:	90 91 eb 2b 	lds	r25, 0x2BEB
    112a:	89 2b       	or	r24, r25
    112c:	99 f4       	brne	.+38     	; 0x1154 <udc_process_setup+0x2aa>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    112e:	80 91 e6 2b 	lds	r24, 0x2BE6
    1132:	90 91 e7 2b 	lds	r25, 0x2BE7
    1136:	01 97       	sbiw	r24, 0x01	; 1
    1138:	79 f4       	brne	.+30     	; 0x1158 <udc_process_setup+0x2ae>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    113a:	80 91 e7 22 	lds	r24, 0x22E7
    113e:	90 91 e8 22 	lds	r25, 0x22E8
    1142:	8d 7f       	andi	r24, 0xFD	; 253
    1144:	80 93 e7 22 	sts	0x22E7, r24
    1148:	90 93 e8 22 	sts	0x22E8, r25
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    114c:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <main_remotewakeup_disable>
#endif
		return true;
    1150:	01 e0       	ldi	r16, 0x01	; 1
    1152:	d4 c0       	rjmp	.+424    	; 0x12fc <udc_process_setup+0x452>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    1154:	00 e0       	ldi	r16, 0x00	; 0
    1156:	d2 c0       	rjmp	.+420    	; 0x12fc <udc_process_setup+0x452>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
    1158:	00 e0       	ldi	r16, 0x00	; 0
    115a:	d0 c0       	rjmp	.+416    	; 0x12fc <udc_process_setup+0x452>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    115c:	80 91 ea 2b 	lds	r24, 0x2BEA
    1160:	90 91 eb 2b 	lds	r25, 0x2BEB
    1164:	89 2b       	or	r24, r25
    1166:	99 f4       	brne	.+38     	; 0x118e <udc_process_setup+0x2e4>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    1168:	80 91 e6 2b 	lds	r24, 0x2BE6
    116c:	90 91 e7 2b 	lds	r25, 0x2BE7
    1170:	01 97       	sbiw	r24, 0x01	; 1
    1172:	79 f4       	brne	.+30     	; 0x1192 <udc_process_setup+0x2e8>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    1174:	80 91 e7 22 	lds	r24, 0x22E7
    1178:	90 91 e8 22 	lds	r25, 0x22E8
    117c:	82 60       	ori	r24, 0x02	; 2
    117e:	80 93 e7 22 	sts	0x22E7, r24
    1182:	90 93 e8 22 	sts	0x22E8, r25
		UDC_REMOTEWAKEUP_ENABLE();
    1186:	0e 94 77 11 	call	0x22ee	; 0x22ee <main_remotewakeup_enable>
		return true;
    118a:	01 e0       	ldi	r16, 0x01	; 1
    118c:	b7 c0       	rjmp	.+366    	; 0x12fc <udc_process_setup+0x452>
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    118e:	00 e0       	ldi	r16, 0x00	; 0
    1190:	b5 c0       	rjmp	.+362    	; 0x12fc <udc_process_setup+0x452>
		break;
#endif
	default:
		break;
	}
	return false;
    1192:	00 e0       	ldi	r16, 0x00	; 0
    1194:	b3 c0       	rjmp	.+358    	; 0x12fc <udc_process_setup+0x452>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1196:	80 91 ea 2b 	lds	r24, 0x2BEA
    119a:	90 91 eb 2b 	lds	r25, 0x2BEB
    119e:	89 2b       	or	r24, r25
    11a0:	09 f0       	breq	.+2      	; 0x11a4 <udc_process_setup+0x2fa>
    11a2:	46 c0       	rjmp	.+140    	; 0x1230 <udc_process_setup+0x386>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    11a4:	f6 d4       	rcall	.+2540   	; 0x1b92 <udd_getaddress>
    11a6:	88 23       	and	r24, r24
    11a8:	09 f4       	brne	.+2      	; 0x11ac <udc_process_setup+0x302>
    11aa:	44 c0       	rjmp	.+136    	; 0x1234 <udc_process_setup+0x38a>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    11ac:	20 91 e6 2b 	lds	r18, 0x2BE6
    11b0:	30 91 e7 2b 	lds	r19, 0x2BE7
    11b4:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    11b6:	e0 91 48 20 	lds	r30, 0x2048
    11ba:	f0 91 49 20 	lds	r31, 0x2049
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    11be:	81 89       	ldd	r24, Z+17	; 0x11
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	82 17       	cp	r24, r18
    11c4:	93 07       	cpc	r25, r19
    11c6:	c0 f1       	brcs	.+112    	; 0x1238 <udc_process_setup+0x38e>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    11c8:	14 de       	rcall	.-984    	; 0xdf2 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    11ca:	80 91 e6 2b 	lds	r24, 0x2BE6
    11ce:	90 91 e7 2b 	lds	r25, 0x2BE7
    11d2:	80 93 e6 22 	sts	0x22E6, r24
	if (udc_num_configuration == 0) {
    11d6:	88 23       	and	r24, r24
    11d8:	89 f1       	breq	.+98     	; 0x123c <udc_process_setup+0x392>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    11da:	99 27       	eor	r25, r25
    11dc:	81 50       	subi	r24, 0x01	; 1
    11de:	90 4c       	sbci	r25, 0xC0	; 192
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	e0 91 4a 20 	lds	r30, 0x204A
    11ec:	f0 91 4b 20 	lds	r31, 0x204B
    11f0:	e8 0f       	add	r30, r24
    11f2:	f9 1f       	adc	r31, r25
    11f4:	e0 93 e4 22 	sts	0x22E4, r30
    11f8:	f0 93 e5 22 	sts	0x22E5, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    11fc:	01 90       	ld	r0, Z+
    11fe:	f0 81       	ld	r31, Z
    1200:	e0 2d       	mov	r30, r0
    1202:	84 81       	ldd	r24, Z+4	; 0x04
    1204:	88 23       	and	r24, r24
    1206:	e1 f0       	breq	.+56     	; 0x1240 <udc_process_setup+0x396>
    1208:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    120a:	60 e0       	ldi	r22, 0x00	; 0
    120c:	8c 2f       	mov	r24, r28
    120e:	b8 dd       	rcall	.-1168   	; 0xd80 <udc_iface_enable>
    1210:	08 2f       	mov	r16, r24
    1212:	88 23       	and	r24, r24
    1214:	09 f4       	brne	.+2      	; 0x1218 <udc_process_setup+0x36e>
    1216:	72 c0       	rjmp	.+228    	; 0x12fc <udc_process_setup+0x452>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1218:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    121a:	e0 91 e4 22 	lds	r30, 0x22E4
    121e:	f0 91 e5 22 	lds	r31, 0x22E5
    1222:	01 90       	ld	r0, Z+
    1224:	f0 81       	ld	r31, Z
    1226:	e0 2d       	mov	r30, r0
    1228:	84 81       	ldd	r24, Z+4	; 0x04
    122a:	c8 17       	cp	r28, r24
    122c:	70 f3       	brcs	.-36     	; 0x120a <udc_process_setup+0x360>
    122e:	66 c0       	rjmp	.+204    	; 0x12fc <udc_process_setup+0x452>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    1230:	00 e0       	ldi	r16, 0x00	; 0
    1232:	64 c0       	rjmp	.+200    	; 0x12fc <udc_process_setup+0x452>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
    1234:	00 e0       	ldi	r16, 0x00	; 0
    1236:	62 c0       	rjmp	.+196    	; 0x12fc <udc_process_setup+0x452>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
    1238:	00 e0       	ldi	r16, 0x00	; 0
    123a:	60 c0       	rjmp	.+192    	; 0x12fc <udc_process_setup+0x452>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
    123c:	01 e0       	ldi	r16, 0x01	; 1
    123e:	5e c0       	rjmp	.+188    	; 0x12fc <udc_process_setup+0x452>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
    1240:	01 e0       	ldi	r16, 0x01	; 1
    1242:	5c c0       	rjmp	.+184    	; 0x12fc <udc_process_setup+0x452>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1244:	21 30       	cpi	r18, 0x01	; 1
    1246:	09 f5       	brne	.+66     	; 0x128a <udc_process_setup+0x3e0>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1248:	80 91 e5 2b 	lds	r24, 0x2BE5
    124c:	8b 30       	cpi	r24, 0x0B	; 11
    124e:	e9 f4       	brne	.+58     	; 0x128a <udc_process_setup+0x3e0>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1250:	80 91 ea 2b 	lds	r24, 0x2BEA
    1254:	90 91 eb 2b 	lds	r25, 0x2BEB
    1258:	89 2b       	or	r24, r25
    125a:	99 f4       	brne	.+38     	; 0x1282 <udc_process_setup+0x3d8>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    125c:	80 91 e6 22 	lds	r24, 0x22E6
    1260:	88 23       	and	r24, r24
    1262:	89 f0       	breq	.+34     	; 0x1286 <udc_process_setup+0x3dc>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1264:	c0 91 e8 2b 	lds	r28, 0x2BE8
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1268:	d0 91 e6 2b 	lds	r29, 0x2BE6

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    126c:	8c 2f       	mov	r24, r28
    126e:	46 dd       	rcall	.-1396   	; 0xcfc <udc_iface_disable>
    1270:	08 2f       	mov	r16, r24
    1272:	88 23       	and	r24, r24
    1274:	09 f4       	brne	.+2      	; 0x1278 <udc_process_setup+0x3ce>
    1276:	42 c0       	rjmp	.+132    	; 0x12fc <udc_process_setup+0x452>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1278:	6d 2f       	mov	r22, r29
    127a:	8c 2f       	mov	r24, r28
    127c:	81 dd       	rcall	.-1278   	; 0xd80 <udc_iface_enable>
    127e:	08 2f       	mov	r16, r24
    1280:	3d c0       	rjmp	.+122    	; 0x12fc <udc_process_setup+0x452>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
    1282:	00 e0       	ldi	r16, 0x00	; 0
    1284:	3b c0       	rjmp	.+118    	; 0x12fc <udc_process_setup+0x452>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
    1286:	00 e0       	ldi	r16, 0x00	; 0
    1288:	39 c0       	rjmp	.+114    	; 0x12fc <udc_process_setup+0x452>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    128a:	22 30       	cpi	r18, 0x02	; 2
    128c:	c9 f5       	brne	.+114    	; 0x1300 <udc_process_setup+0x456>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    128e:	80 91 e5 2b 	lds	r24, 0x2BE5
    1292:	81 30       	cpi	r24, 0x01	; 1
    1294:	19 f0       	breq	.+6      	; 0x129c <udc_process_setup+0x3f2>
    1296:	83 30       	cpi	r24, 0x03	; 3
    1298:	b1 f0       	breq	.+44     	; 0x12c6 <udc_process_setup+0x41c>
    129a:	2f c0       	rjmp	.+94     	; 0x12fa <udc_process_setup+0x450>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    129c:	80 91 ea 2b 	lds	r24, 0x2BEA
    12a0:	90 91 eb 2b 	lds	r25, 0x2BEB
    12a4:	89 2b       	or	r24, r25
    12a6:	59 f4       	brne	.+22     	; 0x12be <udc_process_setup+0x414>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    12a8:	80 91 e6 2b 	lds	r24, 0x2BE6
    12ac:	90 91 e7 2b 	lds	r25, 0x2BE7
    12b0:	89 2b       	or	r24, r25
    12b2:	39 f4       	brne	.+14     	; 0x12c2 <udc_process_setup+0x418>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    12b4:	80 91 e8 2b 	lds	r24, 0x2BE8
    12b8:	08 d5       	rcall	.+2576   	; 0x1cca <udd_ep_clear_halt>
    12ba:	08 2f       	mov	r16, r24
    12bc:	1f c0       	rjmp	.+62     	; 0x12fc <udc_process_setup+0x452>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    12be:	00 e0       	ldi	r16, 0x00	; 0
    12c0:	1d c0       	rjmp	.+58     	; 0x12fc <udc_process_setup+0x452>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
    12c2:	00 e0       	ldi	r16, 0x00	; 0
    12c4:	1b c0       	rjmp	.+54     	; 0x12fc <udc_process_setup+0x452>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    12c6:	80 91 ea 2b 	lds	r24, 0x2BEA
    12ca:	90 91 eb 2b 	lds	r25, 0x2BEB
    12ce:	89 2b       	or	r24, r25
    12d0:	71 f4       	brne	.+28     	; 0x12ee <udc_process_setup+0x444>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    12d2:	80 91 e6 2b 	lds	r24, 0x2BE6
    12d6:	90 91 e7 2b 	lds	r25, 0x2BE7
    12da:	89 2b       	or	r24, r25
    12dc:	51 f4       	brne	.+20     	; 0x12f2 <udc_process_setup+0x448>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    12de:	c8 ee       	ldi	r28, 0xE8	; 232
    12e0:	db e2       	ldi	r29, 0x2B	; 43
    12e2:	88 81       	ld	r24, Y
    12e4:	8e d5       	rcall	.+2844   	; 0x1e02 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    12e6:	88 81       	ld	r24, Y
    12e8:	e2 d5       	rcall	.+3012   	; 0x1eae <udd_ep_set_halt>
    12ea:	08 2f       	mov	r16, r24
    12ec:	07 c0       	rjmp	.+14     	; 0x12fc <udc_process_setup+0x452>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    12ee:	00 e0       	ldi	r16, 0x00	; 0
    12f0:	05 c0       	rjmp	.+10     	; 0x12fc <udc_process_setup+0x452>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
    12f2:	00 e0       	ldi	r16, 0x00	; 0
    12f4:	03 c0       	rjmp	.+6      	; 0x12fc <udc_process_setup+0x452>
				break;
			}
		}
#endif
	}
	return false;
    12f6:	00 e0       	ldi	r16, 0x00	; 0
    12f8:	01 c0       	rjmp	.+2      	; 0x12fc <udc_process_setup+0x452>
    12fa:	00 e0       	ldi	r16, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    12fc:	01 11       	cpse	r16, r1
    12fe:	89 c0       	rjmp	.+274    	; 0x1412 <udc_process_setup+0x568>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1300:	80 91 e4 2b 	lds	r24, 0x2BE4
    1304:	8f 71       	andi	r24, 0x1F	; 31
    1306:	81 30       	cpi	r24, 0x01	; 1
    1308:	c1 f5       	brne	.+112    	; 0x137a <udc_process_setup+0x4d0>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    130a:	80 91 e6 22 	lds	r24, 0x22E6
    130e:	88 23       	and	r24, r24
    1310:	a1 f1       	breq	.+104    	; 0x137a <udc_process_setup+0x4d0>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1312:	c0 91 e8 2b 	lds	r28, 0x2BE8
    1316:	d0 91 e9 2b 	lds	r29, 0x2BE9
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    131a:	00 91 e4 22 	lds	r16, 0x22E4
    131e:	10 91 e5 22 	lds	r17, 0x22E5
    1322:	d8 01       	movw	r26, r16
    1324:	ed 91       	ld	r30, X+
    1326:	fc 91       	ld	r31, X
    1328:	84 81       	ldd	r24, Z+4	; 0x04
    132a:	c8 17       	cp	r28, r24
    132c:	30 f5       	brcc	.+76     	; 0x137a <udc_process_setup+0x4d0>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    132e:	60 e0       	ldi	r22, 0x00	; 0
    1330:	8c 2f       	mov	r24, r28
    1332:	aa dc       	rcall	.-1708   	; 0xc88 <udc_update_iface_desc>
    1334:	88 23       	and	r24, r24
    1336:	09 f1       	breq	.+66     	; 0x137a <udc_process_setup+0x4d0>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1338:	ce 01       	movw	r24, r28
    133a:	99 27       	eor	r25, r25
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	d8 01       	movw	r26, r16
    1342:	12 96       	adiw	r26, 0x02	; 2
    1344:	ed 91       	ld	r30, X+
    1346:	fc 91       	ld	r31, X
    1348:	13 97       	sbiw	r26, 0x03	; 3
    134a:	e8 0f       	add	r30, r24
    134c:	f9 1f       	adc	r31, r25
    134e:	00 81       	ld	r16, Z
    1350:	11 81       	ldd	r17, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1352:	d8 01       	movw	r26, r16
    1354:	16 96       	adiw	r26, 0x06	; 6
    1356:	ed 91       	ld	r30, X+
    1358:	fc 91       	ld	r31, X
    135a:	17 97       	sbiw	r26, 0x07	; 7
    135c:	19 95       	eicall
    135e:	68 2f       	mov	r22, r24
    1360:	8c 2f       	mov	r24, r28
    1362:	92 dc       	rcall	.-1756   	; 0xc88 <udc_update_iface_desc>
    1364:	88 23       	and	r24, r24
    1366:	49 f0       	breq	.+18     	; 0x137a <udc_process_setup+0x4d0>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1368:	d8 01       	movw	r26, r16
    136a:	14 96       	adiw	r26, 0x04	; 4
    136c:	ed 91       	ld	r30, X+
    136e:	fc 91       	ld	r31, X
    1370:	15 97       	sbiw	r26, 0x05	; 5
    1372:	19 95       	eicall
    1374:	08 2f       	mov	r16, r24
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1376:	81 11       	cpse	r24, r1
    1378:	4c c0       	rjmp	.+152    	; 0x1412 <udc_process_setup+0x568>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    137a:	80 91 e4 2b 	lds	r24, 0x2BE4
    137e:	8f 71       	andi	r24, 0x1F	; 31
    1380:	82 30       	cpi	r24, 0x02	; 2
    1382:	d9 f5       	brne	.+118    	; 0x13fa <udc_process_setup+0x550>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1384:	80 91 e6 22 	lds	r24, 0x22E6
    1388:	88 23       	and	r24, r24
    138a:	89 f1       	breq	.+98     	; 0x13ee <udc_process_setup+0x544>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    138c:	e0 91 e4 22 	lds	r30, 0x22E4
    1390:	f0 91 e5 22 	lds	r31, 0x22E5
    1394:	a0 81       	ld	r26, Z
    1396:	b1 81       	ldd	r27, Z+1	; 0x01
    1398:	14 96       	adiw	r26, 0x04	; 4
    139a:	8c 91       	ld	r24, X
    139c:	88 23       	and	r24, r24
    139e:	49 f1       	breq	.+82     	; 0x13f2 <udc_process_setup+0x548>
    13a0:	10 e0       	ldi	r17, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    13a2:	21 2f       	mov	r18, r17
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	22 0f       	add	r18, r18
    13a8:	33 1f       	adc	r19, r19
    13aa:	02 80       	ldd	r0, Z+2	; 0x02
    13ac:	f3 81       	ldd	r31, Z+3	; 0x03
    13ae:	e0 2d       	mov	r30, r0
    13b0:	e2 0f       	add	r30, r18
    13b2:	f3 1f       	adc	r31, r19
    13b4:	c0 81       	ld	r28, Z
    13b6:	d1 81       	ldd	r29, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    13b8:	ee 81       	ldd	r30, Y+6	; 0x06
    13ba:	ff 81       	ldd	r31, Y+7	; 0x07
    13bc:	19 95       	eicall
    13be:	68 2f       	mov	r22, r24
    13c0:	81 2f       	mov	r24, r17
    13c2:	62 dc       	rcall	.-1852   	; 0xc88 <udc_update_iface_desc>
    13c4:	08 2f       	mov	r16, r24
    13c6:	88 23       	and	r24, r24
    13c8:	21 f1       	breq	.+72     	; 0x1412 <udc_process_setup+0x568>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    13ca:	ec 81       	ldd	r30, Y+4	; 0x04
    13cc:	fd 81       	ldd	r31, Y+5	; 0x05
    13ce:	19 95       	eicall
    13d0:	08 2f       	mov	r16, r24
    13d2:	81 11       	cpse	r24, r1
    13d4:	1e c0       	rjmp	.+60     	; 0x1412 <udc_process_setup+0x568>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    13d6:	1f 5f       	subi	r17, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    13d8:	e0 91 e4 22 	lds	r30, 0x22E4
    13dc:	f0 91 e5 22 	lds	r31, 0x22E5
    13e0:	a0 81       	ld	r26, Z
    13e2:	b1 81       	ldd	r27, Z+1	; 0x01
    13e4:	14 96       	adiw	r26, 0x04	; 4
    13e6:	8c 91       	ld	r24, X
    13e8:	18 17       	cp	r17, r24
    13ea:	d8 f2       	brcs	.-74     	; 0x13a2 <udc_process_setup+0x4f8>
    13ec:	12 c0       	rjmp	.+36     	; 0x1412 <udc_process_setup+0x568>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    13ee:	00 e0       	ldi	r16, 0x00	; 0
    13f0:	10 c0       	rjmp	.+32     	; 0x1412 <udc_process_setup+0x568>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    13f2:	00 e0       	ldi	r16, 0x00	; 0
    13f4:	0e c0       	rjmp	.+28     	; 0x1412 <udc_process_setup+0x568>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    13f6:	00 e0       	ldi	r16, 0x00	; 0
    13f8:	0c c0       	rjmp	.+24     	; 0x1412 <udc_process_setup+0x568>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    13fa:	00 e0       	ldi	r16, 0x00	; 0
    13fc:	0a c0       	rjmp	.+20     	; 0x1412 <udc_process_setup+0x568>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    13fe:	82 2f       	mov	r24, r18
    1400:	80 76       	andi	r24, 0x60	; 96
    1402:	09 f0       	breq	.+2      	; 0x1406 <udc_process_setup+0x55c>
    1404:	7d cf       	rjmp	.-262    	; 0x1300 <udc_process_setup+0x456>
    1406:	6c ce       	rjmp	.-808    	; 0x10e0 <udc_process_setup+0x236>
    1408:	32 2f       	mov	r19, r18
    140a:	30 76       	andi	r19, 0x60	; 96
    140c:	09 f0       	breq	.+2      	; 0x1410 <udc_process_setup+0x566>
    140e:	78 cf       	rjmp	.-272    	; 0x1300 <udc_process_setup+0x456>
    1410:	6b cd       	rjmp	.-1322   	; 0xee8 <udc_process_setup+0x3e>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1412:	80 2f       	mov	r24, r16
    1414:	df 91       	pop	r29
    1416:	cf 91       	pop	r28
    1418:	1f 91       	pop	r17
    141a:	0f 91       	pop	r16
    141c:	ff 90       	pop	r15
    141e:	ef 90       	pop	r14
    1420:	08 95       	ret

00001422 <board_init>:
    1422:	41 e0       	ldi	r20, 0x01	; 1
    1424:	50 e0       	ldi	r21, 0x00	; 0
    1426:	61 e0       	ldi	r22, 0x01	; 1
    1428:	80 ea       	ldi	r24, 0xA0	; 160
    142a:	96 e0       	ldi	r25, 0x06	; 6
    142c:	90 da       	rcall	.-2784   	; 0x94e <ioport_configure_port_pin>
    142e:	41 e0       	ldi	r20, 0x01	; 1
    1430:	50 e0       	ldi	r21, 0x00	; 0
    1432:	62 e0       	ldi	r22, 0x02	; 2
    1434:	80 ea       	ldi	r24, 0xA0	; 160
    1436:	96 e0       	ldi	r25, 0x06	; 6
    1438:	8a da       	rcall	.-2796   	; 0x94e <ioport_configure_port_pin>
    143a:	41 e0       	ldi	r20, 0x01	; 1
    143c:	50 e0       	ldi	r21, 0x00	; 0
    143e:	64 e0       	ldi	r22, 0x04	; 4
    1440:	80 ea       	ldi	r24, 0xA0	; 160
    1442:	96 e0       	ldi	r25, 0x06	; 6
    1444:	84 da       	rcall	.-2808   	; 0x94e <ioport_configure_port_pin>
    1446:	41 e0       	ldi	r20, 0x01	; 1
    1448:	50 e0       	ldi	r21, 0x00	; 0
    144a:	68 e0       	ldi	r22, 0x08	; 8
    144c:	80 ea       	ldi	r24, 0xA0	; 160
    144e:	96 e0       	ldi	r25, 0x06	; 6
    1450:	7e da       	rcall	.-2820   	; 0x94e <ioport_configure_port_pin>
    1452:	41 e0       	ldi	r20, 0x01	; 1
    1454:	50 e0       	ldi	r21, 0x00	; 0
    1456:	60 e1       	ldi	r22, 0x10	; 16
    1458:	80 ea       	ldi	r24, 0xA0	; 160
    145a:	96 e0       	ldi	r25, 0x06	; 6
    145c:	78 da       	rcall	.-2832   	; 0x94e <ioport_configure_port_pin>
    145e:	41 e0       	ldi	r20, 0x01	; 1
    1460:	50 e0       	ldi	r21, 0x00	; 0
    1462:	60 e2       	ldi	r22, 0x20	; 32
    1464:	80 ea       	ldi	r24, 0xA0	; 160
    1466:	96 e0       	ldi	r25, 0x06	; 6
    1468:	72 da       	rcall	.-2844   	; 0x94e <ioport_configure_port_pin>
    146a:	41 e0       	ldi	r20, 0x01	; 1
    146c:	50 e0       	ldi	r21, 0x00	; 0
    146e:	60 e4       	ldi	r22, 0x40	; 64
    1470:	80 ea       	ldi	r24, 0xA0	; 160
    1472:	96 e0       	ldi	r25, 0x06	; 6
    1474:	6c da       	rcall	.-2856   	; 0x94e <ioport_configure_port_pin>
    1476:	41 e0       	ldi	r20, 0x01	; 1
    1478:	50 e0       	ldi	r21, 0x00	; 0
    147a:	60 e8       	ldi	r22, 0x80	; 128
    147c:	80 ea       	ldi	r24, 0xA0	; 160
    147e:	96 e0       	ldi	r25, 0x06	; 6
    1480:	66 da       	rcall	.-2868   	; 0x94e <ioport_configure_port_pin>
    1482:	41 e0       	ldi	r20, 0x01	; 1
    1484:	50 e0       	ldi	r21, 0x00	; 0
    1486:	61 e0       	ldi	r22, 0x01	; 1
    1488:	80 e6       	ldi	r24, 0x60	; 96
    148a:	96 e0       	ldi	r25, 0x06	; 6
    148c:	60 da       	rcall	.-2880   	; 0x94e <ioport_configure_port_pin>
    148e:	40 e0       	ldi	r20, 0x00	; 0
    1490:	50 e0       	ldi	r21, 0x00	; 0
    1492:	61 e0       	ldi	r22, 0x01	; 1
    1494:	80 e4       	ldi	r24, 0x40	; 64
    1496:	96 e0       	ldi	r25, 0x06	; 6
    1498:	5a da       	rcall	.-2892   	; 0x94e <ioport_configure_port_pin>
    149a:	41 e0       	ldi	r20, 0x01	; 1
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	64 e0       	ldi	r22, 0x04	; 4
    14a0:	80 e6       	ldi	r24, 0x60	; 96
    14a2:	96 e0       	ldi	r25, 0x06	; 6
    14a4:	54 da       	rcall	.-2904   	; 0x94e <ioport_configure_port_pin>
    14a6:	41 e0       	ldi	r20, 0x01	; 1
    14a8:	50 e0       	ldi	r21, 0x00	; 0
    14aa:	62 e0       	ldi	r22, 0x02	; 2
    14ac:	80 e6       	ldi	r24, 0x60	; 96
    14ae:	96 e0       	ldi	r25, 0x06	; 6
    14b0:	4e da       	rcall	.-2916   	; 0x94e <ioport_configure_port_pin>
    14b2:	41 e0       	ldi	r20, 0x01	; 1
    14b4:	50 e0       	ldi	r21, 0x00	; 0
    14b6:	68 e0       	ldi	r22, 0x08	; 8
    14b8:	80 e6       	ldi	r24, 0x60	; 96
    14ba:	96 e0       	ldi	r25, 0x06	; 6
    14bc:	48 da       	rcall	.-2928   	; 0x94e <ioport_configure_port_pin>
    14be:	40 e0       	ldi	r20, 0x00	; 0
    14c0:	58 e1       	ldi	r21, 0x18	; 24
    14c2:	61 e0       	ldi	r22, 0x01	; 1
    14c4:	80 e2       	ldi	r24, 0x20	; 32
    14c6:	96 e0       	ldi	r25, 0x06	; 6
    14c8:	42 da       	rcall	.-2940   	; 0x94e <ioport_configure_port_pin>
    14ca:	40 e0       	ldi	r20, 0x00	; 0
    14cc:	58 e1       	ldi	r21, 0x18	; 24
    14ce:	62 e0       	ldi	r22, 0x02	; 2
    14d0:	80 e2       	ldi	r24, 0x20	; 32
    14d2:	96 e0       	ldi	r25, 0x06	; 6
    14d4:	3c da       	rcall	.-2952   	; 0x94e <ioport_configure_port_pin>
    14d6:	40 e0       	ldi	r20, 0x00	; 0
    14d8:	58 e1       	ldi	r21, 0x18	; 24
    14da:	64 e0       	ldi	r22, 0x04	; 4
    14dc:	80 e2       	ldi	r24, 0x20	; 32
    14de:	96 e0       	ldi	r25, 0x06	; 6
    14e0:	36 da       	rcall	.-2964   	; 0x94e <ioport_configure_port_pin>
    14e2:	40 e0       	ldi	r20, 0x00	; 0
    14e4:	58 e1       	ldi	r21, 0x18	; 24
    14e6:	68 e0       	ldi	r22, 0x08	; 8
    14e8:	80 e2       	ldi	r24, 0x20	; 32
    14ea:	96 e0       	ldi	r25, 0x06	; 6
    14ec:	30 ca       	rjmp	.-2976   	; 0x94e <ioport_configure_port_pin>
    14ee:	08 95       	ret

000014f0 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    14f0:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    14f2:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    14f4:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    14f6:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    14f8:	60 83       	st	Z, r22
	ret                             // Return to caller
    14fa:	08 95       	ret

000014fc <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    14fc:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    1500:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1502:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1504:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    1508:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    150a:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    150e:	08 95       	ret

00001510 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1510:	81 11       	cpse	r24, r1
    1512:	18 c0       	rjmp	.+48     	; 0x1544 <udd_sleep_mode+0x34>
    1514:	90 91 dc 23 	lds	r25, 0x23DC
    1518:	99 23       	and	r25, r25
    151a:	89 f0       	breq	.+34     	; 0x153e <udd_sleep_mode+0x2e>
    151c:	9f b7       	in	r25, 0x3f	; 63
    151e:	f8 94       	cli
    1520:	ef ed       	ldi	r30, 0xDF	; 223
    1522:	fb e2       	ldi	r31, 0x2B	; 43
    1524:	20 81       	ld	r18, Z
    1526:	21 50       	subi	r18, 0x01	; 1
    1528:	20 83       	st	Z, r18
    152a:	9f bf       	out	0x3f, r25	; 63
    152c:	08 c0       	rjmp	.+16     	; 0x153e <udd_sleep_mode+0x2e>
    152e:	9f b7       	in	r25, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	ef ed       	ldi	r30, 0xDF	; 223
    1534:	fb e2       	ldi	r31, 0x2B	; 43
    1536:	20 81       	ld	r18, Z
    1538:	2f 5f       	subi	r18, 0xFF	; 255
    153a:	20 83       	st	Z, r18
    153c:	9f bf       	out	0x3f, r25	; 63
    153e:	80 93 dc 23 	sts	0x23DC, r24
    1542:	08 95       	ret
    1544:	90 91 dc 23 	lds	r25, 0x23DC
    1548:	99 23       	and	r25, r25
    154a:	89 f3       	breq	.-30     	; 0x152e <udd_sleep_mode+0x1e>
    154c:	f8 cf       	rjmp	.-16     	; 0x153e <udd_sleep_mode+0x2e>

0000154e <udd_ctrl_init>:
    154e:	0f 93       	push	r16
    1550:	e8 ec       	ldi	r30, 0xC8	; 200
    1552:	f4 e0       	ldi	r31, 0x04	; 4
    1554:	80 81       	ld	r24, Z
    1556:	8f 7d       	andi	r24, 0xDF	; 223
    1558:	80 83       	st	Z, r24
    155a:	80 81       	ld	r24, Z
    155c:	8f 7d       	andi	r24, 0xDF	; 223
    155e:	80 83       	st	Z, r24
    1560:	e0 eb       	ldi	r30, 0xB0	; 176
    1562:	f3 e2       	ldi	r31, 0x23	; 35
    1564:	02 e0       	ldi	r16, 0x02	; 2
    1566:	05 93       	las	Z, r16
    1568:	10 92 b2 23 	sts	0x23B2, r1
    156c:	10 92 b3 23 	sts	0x23B3, r1
    1570:	00 e2       	ldi	r16, 0x20	; 32
    1572:	06 93       	lac	Z, r16
    1574:	00 e4       	ldi	r16, 0x40	; 64
    1576:	06 93       	lac	Z, r16
    1578:	e8 ea       	ldi	r30, 0xA8	; 168
    157a:	f3 e2       	ldi	r31, 0x23	; 35
    157c:	00 e2       	ldi	r16, 0x20	; 32
    157e:	06 93       	lac	Z, r16
    1580:	00 e4       	ldi	r16, 0x40	; 64
    1582:	06 93       	lac	Z, r16
    1584:	10 92 f0 2b 	sts	0x2BF0, r1
    1588:	10 92 f1 2b 	sts	0x2BF1, r1
    158c:	10 92 f2 2b 	sts	0x2BF2, r1
    1590:	10 92 f3 2b 	sts	0x2BF3, r1
    1594:	10 92 ee 2b 	sts	0x2BEE, r1
    1598:	10 92 ef 2b 	sts	0x2BEF, r1
    159c:	10 92 9a 23 	sts	0x239A, r1
    15a0:	0f 91       	pop	r16
    15a2:	08 95       	ret

000015a4 <udd_ctrl_stall_data>:
    15a4:	0f 93       	push	r16
    15a6:	85 e0       	ldi	r24, 0x05	; 5
    15a8:	80 93 9a 23 	sts	0x239A, r24
    15ac:	e1 eb       	ldi	r30, 0xB1	; 177
    15ae:	f3 e2       	ldi	r31, 0x23	; 35
    15b0:	04 e0       	ldi	r16, 0x04	; 4
    15b2:	05 93       	las	Z, r16
    15b4:	e9 ea       	ldi	r30, 0xA9	; 169
    15b6:	f3 e2       	ldi	r31, 0x23	; 35
    15b8:	04 e0       	ldi	r16, 0x04	; 4
    15ba:	05 93       	las	Z, r16
    15bc:	0f 91       	pop	r16
    15be:	08 95       	ret

000015c0 <udd_ctrl_send_zlp_in>:
    15c0:	0f 93       	push	r16
    15c2:	83 e0       	ldi	r24, 0x03	; 3
    15c4:	80 93 9a 23 	sts	0x239A, r24
    15c8:	10 92 b2 23 	sts	0x23B2, r1
    15cc:	10 92 b3 23 	sts	0x23B3, r1
    15d0:	e0 eb       	ldi	r30, 0xB0	; 176
    15d2:	f3 e2       	ldi	r31, 0x23	; 35
    15d4:	02 e0       	ldi	r16, 0x02	; 2
    15d6:	06 93       	lac	Z, r16
    15d8:	0f 91       	pop	r16
    15da:	08 95       	ret

000015dc <udd_ctrl_endofrequest>:
    15dc:	e0 91 f0 2b 	lds	r30, 0x2BF0
    15e0:	f0 91 f1 2b 	lds	r31, 0x2BF1
    15e4:	30 97       	sbiw	r30, 0x00	; 0
    15e6:	09 f0       	breq	.+2      	; 0x15ea <udd_ctrl_endofrequest+0xe>
    15e8:	19 95       	eicall
    15ea:	08 95       	ret

000015ec <udd_ctrl_in_sent>:
    15ec:	0f 93       	push	r16
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
    15f2:	80 91 9a 23 	lds	r24, 0x239A
    15f6:	83 30       	cpi	r24, 0x03	; 3
    15f8:	19 f4       	brne	.+6      	; 0x1600 <udd_ctrl_in_sent+0x14>
    15fa:	f0 df       	rcall	.-32     	; 0x15dc <udd_ctrl_endofrequest>
    15fc:	a8 df       	rcall	.-176    	; 0x154e <udd_ctrl_init>
    15fe:	60 c0       	rjmp	.+192    	; 0x16c0 <udd_ctrl_in_sent+0xd4>
    1600:	80 91 96 23 	lds	r24, 0x2396
    1604:	90 91 97 23 	lds	r25, 0x2397
    1608:	c0 91 ee 2b 	lds	r28, 0x2BEE
    160c:	d0 91 ef 2b 	lds	r29, 0x2BEF
    1610:	c8 1b       	sub	r28, r24
    1612:	d9 0b       	sbc	r29, r25
    1614:	71 f5       	brne	.+92     	; 0x1672 <udd_ctrl_in_sent+0x86>
    1616:	20 91 98 23 	lds	r18, 0x2398
    161a:	30 91 99 23 	lds	r19, 0x2399
    161e:	82 0f       	add	r24, r18
    1620:	93 1f       	adc	r25, r19
    1622:	80 93 98 23 	sts	0x2398, r24
    1626:	90 93 99 23 	sts	0x2399, r25
    162a:	20 91 ea 2b 	lds	r18, 0x2BEA
    162e:	30 91 eb 2b 	lds	r19, 0x2BEB
    1632:	82 17       	cp	r24, r18
    1634:	93 07       	cpc	r25, r19
    1636:	21 f0       	breq	.+8      	; 0x1640 <udd_ctrl_in_sent+0x54>
    1638:	80 91 e9 22 	lds	r24, 0x22E9
    163c:	88 23       	and	r24, r24
    163e:	41 f0       	breq	.+16     	; 0x1650 <udd_ctrl_in_sent+0x64>
    1640:	84 e0       	ldi	r24, 0x04	; 4
    1642:	80 93 9a 23 	sts	0x239A, r24
    1646:	e8 ea       	ldi	r30, 0xA8	; 168
    1648:	f3 e2       	ldi	r31, 0x23	; 35
    164a:	02 e0       	ldi	r16, 0x02	; 2
    164c:	06 93       	lac	Z, r16
    164e:	38 c0       	rjmp	.+112    	; 0x16c0 <udd_ctrl_in_sent+0xd4>
    1650:	e0 91 f2 2b 	lds	r30, 0x2BF2
    1654:	f0 91 f3 2b 	lds	r31, 0x2BF3
    1658:	30 97       	sbiw	r30, 0x00	; 0
    165a:	99 f0       	breq	.+38     	; 0x1682 <udd_ctrl_in_sent+0x96>
    165c:	19 95       	eicall
    165e:	88 23       	and	r24, r24
    1660:	81 f0       	breq	.+32     	; 0x1682 <udd_ctrl_in_sent+0x96>
    1662:	10 92 96 23 	sts	0x2396, r1
    1666:	10 92 97 23 	sts	0x2397, r1
    166a:	c0 91 ee 2b 	lds	r28, 0x2BEE
    166e:	d0 91 ef 2b 	lds	r29, 0x2BEF
    1672:	c8 30       	cpi	r28, 0x08	; 8
    1674:	d1 05       	cpc	r29, r1
    1676:	28 f0       	brcs	.+10     	; 0x1682 <udd_ctrl_in_sent+0x96>
    1678:	10 92 e9 22 	sts	0x22E9, r1
    167c:	c8 e0       	ldi	r28, 0x08	; 8
    167e:	d0 e0       	ldi	r29, 0x00	; 0
    1680:	03 c0       	rjmp	.+6      	; 0x1688 <udd_ctrl_in_sent+0x9c>
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	80 93 e9 22 	sts	0x22E9, r24
    1688:	c0 93 b2 23 	sts	0x23B2, r28
    168c:	d0 93 b3 23 	sts	0x23B3, r29
    1690:	80 91 96 23 	lds	r24, 0x2396
    1694:	90 91 97 23 	lds	r25, 0x2397
    1698:	20 91 ec 2b 	lds	r18, 0x2BEC
    169c:	30 91 ed 2b 	lds	r19, 0x2BED
    16a0:	28 0f       	add	r18, r24
    16a2:	39 1f       	adc	r19, r25
    16a4:	20 93 b4 23 	sts	0x23B4, r18
    16a8:	30 93 b5 23 	sts	0x23B5, r19
    16ac:	c8 0f       	add	r28, r24
    16ae:	d9 1f       	adc	r29, r25
    16b0:	c0 93 96 23 	sts	0x2396, r28
    16b4:	d0 93 97 23 	sts	0x2397, r29
    16b8:	e0 eb       	ldi	r30, 0xB0	; 176
    16ba:	f3 e2       	ldi	r31, 0x23	; 35
    16bc:	02 e0       	ldi	r16, 0x02	; 2
    16be:	06 93       	lac	Z, r16
    16c0:	df 91       	pop	r29
    16c2:	cf 91       	pop	r28
    16c4:	0f 91       	pop	r16
    16c6:	08 95       	ret

000016c8 <udd_ep_get_job>:
    16c8:	28 2f       	mov	r18, r24
    16ca:	2f 70       	andi	r18, 0x0F	; 15
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	22 0f       	add	r18, r18
    16d0:	33 1f       	adc	r19, r19
    16d2:	99 27       	eor	r25, r25
    16d4:	87 fd       	sbrc	r24, 7
    16d6:	90 95       	com	r25
    16d8:	88 27       	eor	r24, r24
    16da:	99 0f       	add	r25, r25
    16dc:	88 1f       	adc	r24, r24
    16de:	99 27       	eor	r25, r25
    16e0:	82 0f       	add	r24, r18
    16e2:	93 1f       	adc	r25, r19
    16e4:	02 97       	sbiw	r24, 0x02	; 2
    16e6:	9c 01       	movw	r18, r24
    16e8:	22 0f       	add	r18, r18
    16ea:	33 1f       	adc	r19, r19
    16ec:	22 0f       	add	r18, r18
    16ee:	33 1f       	adc	r19, r19
    16f0:	22 0f       	add	r18, r18
    16f2:	33 1f       	adc	r19, r19
    16f4:	82 0f       	add	r24, r18
    16f6:	93 1f       	adc	r25, r19
    16f8:	86 59       	subi	r24, 0x96	; 150
    16fa:	9c 4d       	sbci	r25, 0xDC	; 220
    16fc:	08 95       	ret

000016fe <udd_ctrl_interrupt_tc_setup>:
    16fe:	0f 93       	push	r16
    1700:	cf 93       	push	r28
    1702:	80 91 cc 04 	lds	r24, 0x04CC
    1706:	80 ff       	sbrs	r24, 0
    1708:	62 c0       	rjmp	.+196    	; 0x17ce <udd_ctrl_interrupt_tc_setup+0xd0>
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	80 93 cc 04 	sts	0x04CC, r24
    1710:	e8 ea       	ldi	r30, 0xA8	; 168
    1712:	f3 e2       	ldi	r31, 0x23	; 35
    1714:	00 e8       	ldi	r16, 0x80	; 128
    1716:	06 93       	lac	Z, r16
    1718:	e0 eb       	ldi	r30, 0xB0	; 176
    171a:	f3 e2       	ldi	r31, 0x23	; 35
    171c:	00 e8       	ldi	r16, 0x80	; 128
    171e:	06 93       	lac	Z, r16
    1720:	80 93 ca 04 	sts	0x04CA, r24
    1724:	e8 ea       	ldi	r30, 0xA8	; 168
    1726:	f3 e2       	ldi	r31, 0x23	; 35
    1728:	00 e1       	ldi	r16, 0x10	; 16
    172a:	06 93       	lac	Z, r16
    172c:	80 91 9a 23 	lds	r24, 0x239A
    1730:	88 23       	and	r24, r24
    1732:	29 f0       	breq	.+10     	; 0x173e <udd_ctrl_interrupt_tc_setup+0x40>
    1734:	83 50       	subi	r24, 0x03	; 3
    1736:	82 30       	cpi	r24, 0x02	; 2
    1738:	08 f4       	brcc	.+2      	; 0x173c <udd_ctrl_interrupt_tc_setup+0x3e>
    173a:	50 df       	rcall	.-352    	; 0x15dc <udd_ctrl_endofrequest>
    173c:	08 df       	rcall	.-496    	; 0x154e <udd_ctrl_init>
    173e:	80 91 aa 23 	lds	r24, 0x23AA
    1742:	90 91 ab 23 	lds	r25, 0x23AB
    1746:	08 97       	sbiw	r24, 0x08	; 8
    1748:	09 f0       	breq	.+2      	; 0x174c <udd_ctrl_interrupt_tc_setup+0x4e>
    174a:	43 c0       	rjmp	.+134    	; 0x17d2 <udd_ctrl_interrupt_tc_setup+0xd4>
    174c:	88 e0       	ldi	r24, 0x08	; 8
    174e:	ee e8       	ldi	r30, 0x8E	; 142
    1750:	f3 e2       	ldi	r31, 0x23	; 35
    1752:	a4 ee       	ldi	r26, 0xE4	; 228
    1754:	bb e2       	ldi	r27, 0x2B	; 43
    1756:	01 90       	ld	r0, Z+
    1758:	0d 92       	st	X+, r0
    175a:	8a 95       	dec	r24
    175c:	e1 f7       	brne	.-8      	; 0x1756 <udd_ctrl_interrupt_tc_setup+0x58>
    175e:	e8 ec       	ldi	r30, 0xC8	; 200
    1760:	f4 e0       	ldi	r31, 0x04	; 4
    1762:	80 81       	ld	r24, Z
    1764:	80 62       	ori	r24, 0x20	; 32
    1766:	80 83       	st	Z, r24
    1768:	80 81       	ld	r24, Z
    176a:	80 62       	ori	r24, 0x20	; 32
    176c:	80 83       	st	Z, r24
    176e:	9d db       	rcall	.-2246   	; 0xeaa <udc_process_setup>
    1770:	c8 2f       	mov	r28, r24
    1772:	81 11       	cpse	r24, r1
    1774:	03 c0       	rjmp	.+6      	; 0x177c <udd_ctrl_interrupt_tc_setup+0x7e>
    1776:	16 df       	rcall	.-468    	; 0x15a4 <udd_ctrl_stall_data>
    1778:	c1 e0       	ldi	r28, 0x01	; 1
    177a:	2c c0       	rjmp	.+88     	; 0x17d4 <udd_ctrl_interrupt_tc_setup+0xd6>
    177c:	80 91 e4 2b 	lds	r24, 0x2BE4
    1780:	88 23       	and	r24, r24
    1782:	6c f4       	brge	.+26     	; 0x179e <udd_ctrl_interrupt_tc_setup+0xa0>
    1784:	10 92 98 23 	sts	0x2398, r1
    1788:	10 92 99 23 	sts	0x2399, r1
    178c:	10 92 96 23 	sts	0x2396, r1
    1790:	10 92 97 23 	sts	0x2397, r1
    1794:	82 e0       	ldi	r24, 0x02	; 2
    1796:	80 93 9a 23 	sts	0x239A, r24
    179a:	28 df       	rcall	.-432    	; 0x15ec <udd_ctrl_in_sent>
    179c:	1b c0       	rjmp	.+54     	; 0x17d4 <udd_ctrl_interrupt_tc_setup+0xd6>
    179e:	20 91 ea 2b 	lds	r18, 0x2BEA
    17a2:	30 91 eb 2b 	lds	r19, 0x2BEB
    17a6:	23 2b       	or	r18, r19
    17a8:	11 f4       	brne	.+4      	; 0x17ae <udd_ctrl_interrupt_tc_setup+0xb0>
    17aa:	0a df       	rcall	.-492    	; 0x15c0 <udd_ctrl_send_zlp_in>
    17ac:	13 c0       	rjmp	.+38     	; 0x17d4 <udd_ctrl_interrupt_tc_setup+0xd6>
    17ae:	10 92 98 23 	sts	0x2398, r1
    17b2:	10 92 99 23 	sts	0x2399, r1
    17b6:	10 92 96 23 	sts	0x2396, r1
    17ba:	10 92 97 23 	sts	0x2397, r1
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	80 93 9a 23 	sts	0x239A, r24
    17c4:	e8 ea       	ldi	r30, 0xA8	; 168
    17c6:	f3 e2       	ldi	r31, 0x23	; 35
    17c8:	02 e0       	ldi	r16, 0x02	; 2
    17ca:	06 93       	lac	Z, r16
    17cc:	03 c0       	rjmp	.+6      	; 0x17d4 <udd_ctrl_interrupt_tc_setup+0xd6>
    17ce:	c0 e0       	ldi	r28, 0x00	; 0
    17d0:	01 c0       	rjmp	.+2      	; 0x17d4 <udd_ctrl_interrupt_tc_setup+0xd6>
    17d2:	c1 e0       	ldi	r28, 0x01	; 1
    17d4:	8c 2f       	mov	r24, r28
    17d6:	cf 91       	pop	r28
    17d8:	0f 91       	pop	r16
    17da:	08 95       	ret

000017dc <udd_ep_trans_complet>:
    17dc:	bf 92       	push	r11
    17de:	cf 92       	push	r12
    17e0:	df 92       	push	r13
    17e2:	ef 92       	push	r14
    17e4:	ff 92       	push	r15
    17e6:	0f 93       	push	r16
    17e8:	1f 93       	push	r17
    17ea:	cf 93       	push	r28
    17ec:	df 93       	push	r29
    17ee:	b8 2e       	mov	r11, r24
    17f0:	6b df       	rcall	.-298    	; 0x16c8 <udd_ep_get_job>
    17f2:	ec 01       	movw	r28, r24
    17f4:	8b 2d       	mov	r24, r11
    17f6:	88 1f       	adc	r24, r24
    17f8:	88 27       	eor	r24, r24
    17fa:	88 1f       	adc	r24, r24
    17fc:	9b 2d       	mov	r25, r11
    17fe:	9f 70       	andi	r25, 0x0F	; 15
    1800:	e9 2e       	mov	r14, r25
    1802:	f1 2c       	mov	r15, r1
    1804:	ee 0c       	add	r14, r14
    1806:	ff 1c       	adc	r15, r15
    1808:	e8 0e       	add	r14, r24
    180a:	f1 1c       	adc	r15, r1
    180c:	97 01       	movw	r18, r14
    180e:	22 0f       	add	r18, r18
    1810:	33 1f       	adc	r19, r19
    1812:	22 0f       	add	r18, r18
    1814:	33 1f       	adc	r19, r19
    1816:	22 0f       	add	r18, r18
    1818:	33 1f       	adc	r19, r19
    181a:	a9 01       	movw	r20, r18
    181c:	48 55       	subi	r20, 0x58	; 88
    181e:	5c 4d       	sbci	r21, 0xDC	; 220
    1820:	7a 01       	movw	r14, r20
    1822:	fa 01       	movw	r30, r20
    1824:	01 81       	ldd	r16, Z+1	; 0x01
    1826:	07 70       	andi	r16, 0x07	; 7
    1828:	10 e0       	ldi	r17, 0x00	; 0
    182a:	f8 01       	movw	r30, r16
    182c:	31 97       	sbiw	r30, 0x01	; 1
    182e:	e7 30       	cpi	r30, 0x07	; 7
    1830:	f1 05       	cpc	r31, r1
    1832:	18 f4       	brcc	.+6      	; 0x183a <udd_ep_trans_complet+0x5e>
    1834:	e2 50       	subi	r30, 0x02	; 2
    1836:	ff 4f       	sbci	r31, 0xFF	; 255
    1838:	8d c5       	rjmp	.+2842   	; 0x2354 <__tablejump2__>
    183a:	68 94       	set
    183c:	cc 24       	eor	r12, r12
    183e:	c3 f8       	bld	r12, 3
    1840:	d1 2c       	mov	r13, r1
    1842:	23 c0       	rjmp	.+70     	; 0x188a <udd_ep_trans_complet+0xae>
    1844:	68 94       	set
    1846:	cc 24       	eor	r12, r12
    1848:	c5 f8       	bld	r12, 5
    184a:	d1 2c       	mov	r13, r1
    184c:	1e c0       	rjmp	.+60     	; 0x188a <udd_ep_trans_complet+0xae>
    184e:	68 94       	set
    1850:	cc 24       	eor	r12, r12
    1852:	c6 f8       	bld	r12, 6
    1854:	d1 2c       	mov	r13, r1
    1856:	19 c0       	rjmp	.+50     	; 0x188a <udd_ep_trans_complet+0xae>
    1858:	68 94       	set
    185a:	cc 24       	eor	r12, r12
    185c:	c7 f8       	bld	r12, 7
    185e:	d1 2c       	mov	r13, r1
    1860:	14 c0       	rjmp	.+40     	; 0x188a <udd_ep_trans_complet+0xae>
    1862:	c1 2c       	mov	r12, r1
    1864:	dd 24       	eor	r13, r13
    1866:	d3 94       	inc	r13
    1868:	10 c0       	rjmp	.+32     	; 0x188a <udd_ep_trans_complet+0xae>
    186a:	c1 2c       	mov	r12, r1
    186c:	68 94       	set
    186e:	dd 24       	eor	r13, r13
    1870:	d1 f8       	bld	r13, 1
    1872:	0b c0       	rjmp	.+22     	; 0x188a <udd_ep_trans_complet+0xae>
    1874:	0f 2e       	mov	r0, r31
    1876:	cc 24       	eor	r12, r12
    1878:	ca 94       	dec	r12
    187a:	f3 e0       	ldi	r31, 0x03	; 3
    187c:	df 2e       	mov	r13, r31
    187e:	f0 2d       	mov	r31, r0
    1880:	04 c0       	rjmp	.+8      	; 0x188a <udd_ep_trans_complet+0xae>
    1882:	68 94       	set
    1884:	cc 24       	eor	r12, r12
    1886:	c4 f8       	bld	r12, 4
    1888:	d1 2c       	mov	r13, r1
    188a:	88 23       	and	r24, r24
    188c:	09 f4       	brne	.+2      	; 0x1890 <udd_ep_trans_complet+0xb4>
    188e:	4b c0       	rjmp	.+150    	; 0x1926 <udd_ep_trans_complet+0x14a>
    1890:	f7 01       	movw	r30, r14
    1892:	26 81       	ldd	r18, Z+6	; 0x06
    1894:	37 81       	ldd	r19, Z+7	; 0x07
    1896:	8d 81       	ldd	r24, Y+5	; 0x05
    1898:	9e 81       	ldd	r25, Y+6	; 0x06
    189a:	28 0f       	add	r18, r24
    189c:	39 1f       	adc	r19, r25
    189e:	2d 83       	std	Y+5, r18	; 0x05
    18a0:	3e 83       	std	Y+6, r19	; 0x06
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	9c 81       	ldd	r25, Y+4	; 0x04
    18a6:	28 17       	cp	r18, r24
    18a8:	39 07       	cpc	r19, r25
    18aa:	81 f1       	breq	.+96     	; 0x190c <udd_ep_trans_complet+0x130>
    18ac:	ac 01       	movw	r20, r24
    18ae:	42 1b       	sub	r20, r18
    18b0:	53 0b       	sbc	r21, r19
    18b2:	9a 01       	movw	r18, r20
    18b4:	21 15       	cp	r18, r1
    18b6:	54 e0       	ldi	r21, 0x04	; 4
    18b8:	35 07       	cpc	r19, r21
    18ba:	38 f0       	brcs	.+14     	; 0x18ca <udd_ep_trans_complet+0xee>
    18bc:	2f ef       	ldi	r18, 0xFF	; 255
    18be:	33 e0       	ldi	r19, 0x03	; 3
    18c0:	c9 01       	movw	r24, r18
    18c2:	b6 01       	movw	r22, r12
    18c4:	33 d5       	rcall	.+2662   	; 0x232c <__udivmodhi4>
    18c6:	28 1b       	sub	r18, r24
    18c8:	39 0b       	sbc	r19, r25
    18ca:	88 81       	ld	r24, Y
    18cc:	81 ff       	sbrs	r24, 1
    18ce:	09 c0       	rjmp	.+18     	; 0x18e2 <udd_ep_trans_complet+0x106>
    18d0:	c9 01       	movw	r24, r18
    18d2:	b6 01       	movw	r22, r12
    18d4:	2b d5       	rcall	.+2646   	; 0x232c <__udivmodhi4>
    18d6:	41 e0       	ldi	r20, 0x01	; 1
    18d8:	89 2b       	or	r24, r25
    18da:	09 f0       	breq	.+2      	; 0x18de <udd_ep_trans_complet+0x102>
    18dc:	40 e0       	ldi	r20, 0x00	; 0
    18de:	94 2f       	mov	r25, r20
    18e0:	01 c0       	rjmp	.+2      	; 0x18e4 <udd_ep_trans_complet+0x108>
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	88 81       	ld	r24, Y
    18e6:	90 fb       	bst	r25, 0
    18e8:	81 f9       	bld	r24, 1
    18ea:	88 83       	st	Y, r24
    18ec:	f7 01       	movw	r30, r14
    18ee:	16 82       	std	Z+6, r1	; 0x06
    18f0:	17 82       	std	Z+7, r1	; 0x07
    18f2:	22 83       	std	Z+2, r18	; 0x02
    18f4:	33 83       	std	Z+3, r19	; 0x03
    18f6:	29 81       	ldd	r18, Y+1	; 0x01
    18f8:	3a 81       	ldd	r19, Y+2	; 0x02
    18fa:	8d 81       	ldd	r24, Y+5	; 0x05
    18fc:	9e 81       	ldd	r25, Y+6	; 0x06
    18fe:	82 0f       	add	r24, r18
    1900:	93 1f       	adc	r25, r19
    1902:	84 83       	std	Z+4, r24	; 0x04
    1904:	95 83       	std	Z+5, r25	; 0x05
    1906:	02 e0       	ldi	r16, 0x02	; 2
    1908:	06 93       	lac	Z, r16
    190a:	87 c0       	rjmp	.+270    	; 0x1a1a <udd_ep_trans_complet+0x23e>
    190c:	88 81       	ld	r24, Y
    190e:	81 ff       	sbrs	r24, 1
    1910:	76 c0       	rjmp	.+236    	; 0x19fe <udd_ep_trans_complet+0x222>
    1912:	8d 7f       	andi	r24, 0xFD	; 253
    1914:	88 83       	st	Y, r24
    1916:	f7 01       	movw	r30, r14
    1918:	16 82       	std	Z+6, r1	; 0x06
    191a:	17 82       	std	Z+7, r1	; 0x07
    191c:	12 82       	std	Z+2, r1	; 0x02
    191e:	13 82       	std	Z+3, r1	; 0x03
    1920:	02 e0       	ldi	r16, 0x02	; 2
    1922:	06 93       	lac	Z, r16
    1924:	7a c0       	rjmp	.+244    	; 0x1a1a <udd_ep_trans_complet+0x23e>
    1926:	f7 01       	movw	r30, r14
    1928:	02 81       	ldd	r16, Z+2	; 0x02
    192a:	13 81       	ldd	r17, Z+3	; 0x03
    192c:	88 81       	ld	r24, Y
    192e:	82 ff       	sbrs	r24, 2
    1930:	13 c0       	rjmp	.+38     	; 0x1958 <udd_ep_trans_complet+0x17c>
    1932:	e9 81       	ldd	r30, Y+1	; 0x01
    1934:	fa 81       	ldd	r31, Y+2	; 0x02
    1936:	2d 81       	ldd	r18, Y+5	; 0x05
    1938:	3e 81       	ldd	r19, Y+6	; 0x06
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	9c 81       	ldd	r25, Y+4	; 0x04
    193e:	b6 01       	movw	r22, r12
    1940:	f5 d4       	rcall	.+2538   	; 0x232c <__udivmodhi4>
    1942:	40 e4       	ldi	r20, 0x40	; 64
    1944:	b4 9e       	mul	r11, r20
    1946:	b0 01       	movw	r22, r0
    1948:	11 24       	eor	r1, r1
    194a:	66 55       	subi	r22, 0x56	; 86
    194c:	7d 4d       	sbci	r23, 0xDD	; 221
    194e:	ac 01       	movw	r20, r24
    1950:	cf 01       	movw	r24, r30
    1952:	82 0f       	add	r24, r18
    1954:	93 1f       	adc	r25, r19
    1956:	04 d5       	rcall	.+2568   	; 0x2360 <memcpy>
    1958:	2d 81       	ldd	r18, Y+5	; 0x05
    195a:	3e 81       	ldd	r19, Y+6	; 0x06
    195c:	20 0f       	add	r18, r16
    195e:	31 1f       	adc	r19, r17
    1960:	2d 83       	std	Y+5, r18	; 0x05
    1962:	3e 83       	std	Y+6, r19	; 0x06
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	9c 81       	ldd	r25, Y+4	; 0x04
    1968:	82 17       	cp	r24, r18
    196a:	93 07       	cpc	r25, r19
    196c:	10 f4       	brcc	.+4      	; 0x1972 <udd_ep_trans_complet+0x196>
    196e:	8d 83       	std	Y+5, r24	; 0x05
    1970:	9e 83       	std	Y+6, r25	; 0x06
    1972:	f7 01       	movw	r30, r14
    1974:	26 81       	ldd	r18, Z+6	; 0x06
    1976:	37 81       	ldd	r19, Z+7	; 0x07
    1978:	20 17       	cp	r18, r16
    197a:	31 07       	cpc	r19, r17
    197c:	09 f0       	breq	.+2      	; 0x1980 <udd_ep_trans_complet+0x1a4>
    197e:	3f c0       	rjmp	.+126    	; 0x19fe <udd_ep_trans_complet+0x222>
    1980:	2d 81       	ldd	r18, Y+5	; 0x05
    1982:	3e 81       	ldd	r19, Y+6	; 0x06
    1984:	82 17       	cp	r24, r18
    1986:	93 07       	cpc	r25, r19
    1988:	09 f4       	brne	.+2      	; 0x198c <udd_ep_trans_complet+0x1b0>
    198a:	39 c0       	rjmp	.+114    	; 0x19fe <udd_ep_trans_complet+0x222>
    198c:	ac 01       	movw	r20, r24
    198e:	42 1b       	sub	r20, r18
    1990:	53 0b       	sbc	r21, r19
    1992:	9a 01       	movw	r18, r20
    1994:	21 15       	cp	r18, r1
    1996:	54 e0       	ldi	r21, 0x04	; 4
    1998:	35 07       	cpc	r19, r21
    199a:	40 f0       	brcs	.+16     	; 0x19ac <udd_ep_trans_complet+0x1d0>
    199c:	2f ef       	ldi	r18, 0xFF	; 255
    199e:	33 e0       	ldi	r19, 0x03	; 3
    19a0:	c9 01       	movw	r24, r18
    19a2:	b6 01       	movw	r22, r12
    19a4:	c3 d4       	rcall	.+2438   	; 0x232c <__udivmodhi4>
    19a6:	28 1b       	sub	r18, r24
    19a8:	39 0b       	sbc	r19, r25
    19aa:	05 c0       	rjmp	.+10     	; 0x19b6 <udd_ep_trans_complet+0x1da>
    19ac:	c9 01       	movw	r24, r18
    19ae:	b6 01       	movw	r22, r12
    19b0:	bd d4       	rcall	.+2426   	; 0x232c <__udivmodhi4>
    19b2:	28 1b       	sub	r18, r24
    19b4:	39 0b       	sbc	r19, r25
    19b6:	f7 01       	movw	r30, r14
    19b8:	12 82       	std	Z+2, r1	; 0x02
    19ba:	13 82       	std	Z+3, r1	; 0x03
    19bc:	2c 15       	cp	r18, r12
    19be:	3d 05       	cpc	r19, r13
    19c0:	78 f4       	brcc	.+30     	; 0x19e0 <udd_ep_trans_complet+0x204>
    19c2:	88 81       	ld	r24, Y
    19c4:	84 60       	ori	r24, 0x04	; 4
    19c6:	88 83       	st	Y, r24
    19c8:	f0 e4       	ldi	r31, 0x40	; 64
    19ca:	bf 9e       	mul	r11, r31
    19cc:	c0 01       	movw	r24, r0
    19ce:	11 24       	eor	r1, r1
    19d0:	86 55       	subi	r24, 0x56	; 86
    19d2:	9d 4d       	sbci	r25, 0xDD	; 221
    19d4:	f7 01       	movw	r30, r14
    19d6:	84 83       	std	Z+4, r24	; 0x04
    19d8:	95 83       	std	Z+5, r25	; 0x05
    19da:	c6 82       	std	Z+6, r12	; 0x06
    19dc:	d7 82       	std	Z+7, r13	; 0x07
    19de:	0b c0       	rjmp	.+22     	; 0x19f6 <udd_ep_trans_complet+0x21a>
    19e0:	49 81       	ldd	r20, Y+1	; 0x01
    19e2:	5a 81       	ldd	r21, Y+2	; 0x02
    19e4:	8d 81       	ldd	r24, Y+5	; 0x05
    19e6:	9e 81       	ldd	r25, Y+6	; 0x06
    19e8:	84 0f       	add	r24, r20
    19ea:	95 1f       	adc	r25, r21
    19ec:	f7 01       	movw	r30, r14
    19ee:	84 83       	std	Z+4, r24	; 0x04
    19f0:	95 83       	std	Z+5, r25	; 0x05
    19f2:	26 83       	std	Z+6, r18	; 0x06
    19f4:	37 83       	std	Z+7, r19	; 0x07
    19f6:	f7 01       	movw	r30, r14
    19f8:	02 e0       	ldi	r16, 0x02	; 2
    19fa:	06 93       	lac	Z, r16
    19fc:	0e c0       	rjmp	.+28     	; 0x1a1a <udd_ep_trans_complet+0x23e>
    19fe:	88 81       	ld	r24, Y
    1a00:	80 ff       	sbrs	r24, 0
    1a02:	0b c0       	rjmp	.+22     	; 0x1a1a <udd_ep_trans_complet+0x23e>
    1a04:	8e 7f       	andi	r24, 0xFE	; 254
    1a06:	88 83       	st	Y, r24
    1a08:	ef 81       	ldd	r30, Y+7	; 0x07
    1a0a:	f8 85       	ldd	r31, Y+8	; 0x08
    1a0c:	30 97       	sbiw	r30, 0x00	; 0
    1a0e:	29 f0       	breq	.+10     	; 0x1a1a <udd_ep_trans_complet+0x23e>
    1a10:	6d 81       	ldd	r22, Y+5	; 0x05
    1a12:	7e 81       	ldd	r23, Y+6	; 0x06
    1a14:	4b 2d       	mov	r20, r11
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	19 95       	eicall
    1a1a:	df 91       	pop	r29
    1a1c:	cf 91       	pop	r28
    1a1e:	1f 91       	pop	r17
    1a20:	0f 91       	pop	r16
    1a22:	ff 90       	pop	r15
    1a24:	ef 90       	pop	r14
    1a26:	df 90       	pop	r13
    1a28:	cf 90       	pop	r12
    1a2a:	bf 90       	pop	r11
    1a2c:	08 95       	ret

00001a2e <udd_disable>:
    1a2e:	cf 93       	push	r28
    1a30:	cf b7       	in	r28, 0x3f	; 63
    1a32:	f8 94       	cli
    1a34:	e1 ec       	ldi	r30, 0xC1	; 193
    1a36:	f4 e0       	ldi	r31, 0x04	; 4
    1a38:	80 81       	ld	r24, Z
    1a3a:	8e 7f       	andi	r24, 0xFE	; 254
    1a3c:	80 83       	st	Z, r24
    1a3e:	10 92 c0 04 	sts	0x04C0, r1
    1a42:	10 82       	st	Z, r1
    1a44:	0e 94 9f 04 	call	0x93e	; 0x93e <sysclk_disable_usb>
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	62 dd       	rcall	.-1340   	; 0x1510 <udd_sleep_mode>
    1a4c:	8f b7       	in	r24, 0x3f	; 63
    1a4e:	f8 94       	cli
    1a50:	e3 ee       	ldi	r30, 0xE3	; 227
    1a52:	fb e2       	ldi	r31, 0x2B	; 43
    1a54:	90 81       	ld	r25, Z
    1a56:	91 50       	subi	r25, 0x01	; 1
    1a58:	90 83       	st	Z, r25
    1a5a:	8f bf       	out	0x3f, r24	; 63
    1a5c:	cf bf       	out	0x3f, r28	; 63
    1a5e:	cf 91       	pop	r28
    1a60:	08 95       	ret

00001a62 <udd_attach>:
    1a62:	cf 93       	push	r28
    1a64:	cf b7       	in	r28, 0x3f	; 63
    1a66:	f8 94       	cli
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	52 dd       	rcall	.-1372   	; 0x1510 <udd_sleep_mode>
    1a6c:	ea ec       	ldi	r30, 0xCA	; 202
    1a6e:	f4 e0       	ldi	r31, 0x04	; 4
    1a70:	80 e4       	ldi	r24, 0x40	; 64
    1a72:	80 83       	st	Z, r24
    1a74:	80 e2       	ldi	r24, 0x20	; 32
    1a76:	80 83       	st	Z, r24
    1a78:	e1 ec       	ldi	r30, 0xC1	; 193
    1a7a:	f4 e0       	ldi	r31, 0x04	; 4
    1a7c:	80 81       	ld	r24, Z
    1a7e:	81 60       	ori	r24, 0x01	; 1
    1a80:	80 83       	st	Z, r24
    1a82:	a9 ec       	ldi	r26, 0xC9	; 201
    1a84:	b4 e0       	ldi	r27, 0x04	; 4
    1a86:	8c 91       	ld	r24, X
    1a88:	82 60       	ori	r24, 0x02	; 2
    1a8a:	8c 93       	st	X, r24
    1a8c:	e8 ec       	ldi	r30, 0xC8	; 200
    1a8e:	f4 e0       	ldi	r31, 0x04	; 4
    1a90:	80 81       	ld	r24, Z
    1a92:	80 64       	ori	r24, 0x40	; 64
    1a94:	80 83       	st	Z, r24
    1a96:	8c 91       	ld	r24, X
    1a98:	81 60       	ori	r24, 0x01	; 1
    1a9a:	8c 93       	st	X, r24
    1a9c:	80 81       	ld	r24, Z
    1a9e:	80 68       	ori	r24, 0x80	; 128
    1aa0:	80 83       	st	Z, r24
    1aa2:	cf bf       	out	0x3f, r28	; 63
    1aa4:	cf 91       	pop	r28
    1aa6:	08 95       	ret

00001aa8 <udd_enable>:
    1aa8:	cf 93       	push	r28
    1aaa:	df 93       	push	r29
    1aac:	c0 e6       	ldi	r28, 0x60	; 96
    1aae:	d0 e0       	ldi	r29, 0x00	; 0
    1ab0:	18 82       	st	Y, r1
    1ab2:	80 e3       	ldi	r24, 0x30	; 48
    1ab4:	0e 94 69 04 	call	0x8d2	; 0x8d2 <sysclk_enable_usb>
    1ab8:	e0 ec       	ldi	r30, 0xC0	; 192
    1aba:	f4 e0       	ldi	r31, 0x04	; 4
    1abc:	80 81       	ld	r24, Z
    1abe:	80 64       	ori	r24, 0x40	; 64
    1ac0:	80 83       	st	Z, r24
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	88 83       	st	Y, r24
    1ac6:	cf b7       	in	r28, 0x3f	; 63
    1ac8:	f8 94       	cli
    1aca:	10 92 a9 23 	sts	0x23A9, r1
    1ace:	10 92 b1 23 	sts	0x23B1, r1
    1ad2:	10 92 b9 23 	sts	0x23B9, r1
    1ad6:	10 92 c1 23 	sts	0x23C1, r1
    1ada:	10 92 c9 23 	sts	0x23C9, r1
    1ade:	10 92 d1 23 	sts	0x23D1, r1
    1ae2:	ea e6       	ldi	r30, 0x6A	; 106
    1ae4:	f3 e2       	ldi	r31, 0x23	; 35
    1ae6:	80 81       	ld	r24, Z
    1ae8:	8e 7f       	andi	r24, 0xFE	; 254
    1aea:	80 83       	st	Z, r24
    1aec:	e3 e7       	ldi	r30, 0x73	; 115
    1aee:	f3 e2       	ldi	r31, 0x23	; 35
    1af0:	80 81       	ld	r24, Z
    1af2:	8e 7f       	andi	r24, 0xFE	; 254
    1af4:	80 83       	st	Z, r24
    1af6:	ec e7       	ldi	r30, 0x7C	; 124
    1af8:	f3 e2       	ldi	r31, 0x23	; 35
    1afa:	80 81       	ld	r24, Z
    1afc:	8e 7f       	andi	r24, 0xFE	; 254
    1afe:	80 83       	st	Z, r24
    1b00:	e5 e8       	ldi	r30, 0x85	; 133
    1b02:	f3 e2       	ldi	r31, 0x23	; 35
    1b04:	80 81       	ld	r24, Z
    1b06:	8e 7f       	andi	r24, 0xFE	; 254
    1b08:	80 83       	st	Z, r24
    1b0a:	6a e1       	ldi	r22, 0x1A	; 26
    1b0c:	70 e0       	ldi	r23, 0x00	; 0
    1b0e:	82 e0       	ldi	r24, 0x02	; 2
    1b10:	f5 dc       	rcall	.-1558   	; 0x14fc <nvm_read_byte>
    1b12:	8f 3f       	cpi	r24, 0xFF	; 255
    1b14:	19 f0       	breq	.+6      	; 0x1b1c <udd_enable+0x74>
    1b16:	80 93 fa 04 	sts	0x04FA, r24
    1b1a:	03 c0       	rjmp	.+6      	; 0x1b22 <udd_enable+0x7a>
    1b1c:	8f e1       	ldi	r24, 0x1F	; 31
    1b1e:	80 93 fa 04 	sts	0x04FA, r24
    1b22:	6b e1       	ldi	r22, 0x1B	; 27
    1b24:	70 e0       	ldi	r23, 0x00	; 0
    1b26:	82 e0       	ldi	r24, 0x02	; 2
    1b28:	e9 dc       	rcall	.-1582   	; 0x14fc <nvm_read_byte>
    1b2a:	8f 3f       	cpi	r24, 0xFF	; 255
    1b2c:	19 f0       	breq	.+6      	; 0x1b34 <udd_enable+0x8c>
    1b2e:	80 93 fb 04 	sts	0x04FB, r24
    1b32:	03 c0       	rjmp	.+6      	; 0x1b3a <udd_enable+0x92>
    1b34:	8f e1       	ldi	r24, 0x1F	; 31
    1b36:	80 93 fb 04 	sts	0x04FB, r24
    1b3a:	e0 ec       	ldi	r30, 0xC0	; 192
    1b3c:	f4 e0       	ldi	r31, 0x04	; 4
    1b3e:	80 81       	ld	r24, Z
    1b40:	82 60       	ori	r24, 0x02	; 2
    1b42:	80 83       	st	Z, r24
    1b44:	80 81       	ld	r24, Z
    1b46:	80 68       	ori	r24, 0x80	; 128
    1b48:	80 83       	st	Z, r24
    1b4a:	80 81       	ld	r24, Z
    1b4c:	80 61       	ori	r24, 0x10	; 16
    1b4e:	80 83       	st	Z, r24
    1b50:	88 ea       	ldi	r24, 0xA8	; 168
    1b52:	93 e2       	ldi	r25, 0x23	; 35
    1b54:	86 83       	std	Z+6, r24	; 0x06
    1b56:	97 83       	std	Z+7, r25	; 0x07
    1b58:	80 81       	ld	r24, Z
    1b5a:	80 62       	ori	r24, 0x20	; 32
    1b5c:	80 83       	st	Z, r24
    1b5e:	8f ef       	ldi	r24, 0xFF	; 255
    1b60:	80 93 c5 04 	sts	0x04C5, r24
    1b64:	e8 ec       	ldi	r30, 0xC8	; 200
    1b66:	f4 e0       	ldi	r31, 0x04	; 4
    1b68:	80 81       	ld	r24, Z
    1b6a:	81 60       	ori	r24, 0x01	; 1
    1b6c:	80 83       	st	Z, r24
    1b6e:	10 92 dc 23 	sts	0x23DC, r1
    1b72:	8f b7       	in	r24, 0x3f	; 63
    1b74:	f8 94       	cli
    1b76:	e3 ee       	ldi	r30, 0xE3	; 227
    1b78:	fb e2       	ldi	r31, 0x2B	; 43
    1b7a:	90 81       	ld	r25, Z
    1b7c:	9f 5f       	subi	r25, 0xFF	; 255
    1b7e:	90 83       	st	Z, r25
    1b80:	8f bf       	out	0x3f, r24	; 63
    1b82:	6f df       	rcall	.-290    	; 0x1a62 <udd_attach>
    1b84:	cf bf       	out	0x3f, r28	; 63
    1b86:	df 91       	pop	r29
    1b88:	cf 91       	pop	r28
    1b8a:	08 95       	ret

00001b8c <udd_set_address>:
    1b8c:	80 93 c3 04 	sts	0x04C3, r24
    1b90:	08 95       	ret

00001b92 <udd_getaddress>:
    1b92:	80 91 c3 04 	lds	r24, 0x04C3
    1b96:	08 95       	ret

00001b98 <udd_get_frame_number>:
    1b98:	80 91 d8 23 	lds	r24, 0x23D8
    1b9c:	90 91 d9 23 	lds	r25, 0x23D9
    1ba0:	08 95       	ret

00001ba2 <udd_send_remotewakeup>:
    1ba2:	80 91 dc 23 	lds	r24, 0x23DC
    1ba6:	81 11       	cpse	r24, r1
    1ba8:	0a c0       	rjmp	.+20     	; 0x1bbe <udd_send_remotewakeup+0x1c>
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	b1 dc       	rcall	.-1694   	; 0x1510 <udd_sleep_mode>
    1bae:	e1 ec       	ldi	r30, 0xC1	; 193
    1bb0:	f4 e0       	ldi	r31, 0x04	; 4
    1bb2:	80 81       	ld	r24, Z
    1bb4:	8b 7f       	andi	r24, 0xFB	; 251
    1bb6:	80 83       	st	Z, r24
    1bb8:	80 81       	ld	r24, Z
    1bba:	84 60       	ori	r24, 0x04	; 4
    1bbc:	80 83       	st	Z, r24
    1bbe:	08 95       	ret

00001bc0 <udd_set_setup_payload>:
    1bc0:	80 93 ec 2b 	sts	0x2BEC, r24
    1bc4:	90 93 ed 2b 	sts	0x2BED, r25
    1bc8:	60 93 ee 2b 	sts	0x2BEE, r22
    1bcc:	70 93 ef 2b 	sts	0x2BEF, r23
    1bd0:	08 95       	ret

00001bd2 <udd_ep_alloc>:
    1bd2:	e8 2f       	mov	r30, r24
    1bd4:	ef 70       	andi	r30, 0x0F	; 15
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	ee 0f       	add	r30, r30
    1bda:	ff 1f       	adc	r31, r31
    1bdc:	99 27       	eor	r25, r25
    1bde:	87 fd       	sbrc	r24, 7
    1be0:	90 95       	com	r25
    1be2:	88 27       	eor	r24, r24
    1be4:	99 0f       	add	r25, r25
    1be6:	88 1f       	adc	r24, r24
    1be8:	99 27       	eor	r25, r25
    1bea:	e8 0f       	add	r30, r24
    1bec:	f9 1f       	adc	r31, r25
    1bee:	ee 0f       	add	r30, r30
    1bf0:	ff 1f       	adc	r31, r31
    1bf2:	ee 0f       	add	r30, r30
    1bf4:	ff 1f       	adc	r31, r31
    1bf6:	ee 0f       	add	r30, r30
    1bf8:	ff 1f       	adc	r31, r31
    1bfa:	e8 55       	subi	r30, 0x58	; 88
    1bfc:	fc 4d       	sbci	r31, 0xDC	; 220
    1bfe:	81 81       	ldd	r24, Z+1	; 0x01
    1c00:	80 7c       	andi	r24, 0xC0	; 192
    1c02:	09 f0       	breq	.+2      	; 0x1c06 <udd_ep_alloc+0x34>
    1c04:	43 c0       	rjmp	.+134    	; 0x1c8c <udd_ep_alloc+0xba>
    1c06:	63 70       	andi	r22, 0x03	; 3
    1c08:	61 30       	cpi	r22, 0x01	; 1
    1c0a:	29 f0       	breq	.+10     	; 0x1c16 <udd_ep_alloc+0x44>
    1c0c:	10 f4       	brcc	.+4      	; 0x1c12 <udd_ep_alloc+0x40>
    1c0e:	80 e4       	ldi	r24, 0x40	; 64
    1c10:	03 c0       	rjmp	.+6      	; 0x1c18 <udd_ep_alloc+0x46>
    1c12:	80 e8       	ldi	r24, 0x80	; 128
    1c14:	01 c0       	rjmp	.+2      	; 0x1c18 <udd_ep_alloc+0x46>
    1c16:	80 ec       	ldi	r24, 0xC0	; 192
    1c18:	40 38       	cpi	r20, 0x80	; 128
    1c1a:	51 05       	cpc	r21, r1
    1c1c:	e1 f0       	breq	.+56     	; 0x1c56 <udd_ep_alloc+0x84>
    1c1e:	50 f4       	brcc	.+20     	; 0x1c34 <udd_ep_alloc+0x62>
    1c20:	40 32       	cpi	r20, 0x20	; 32
    1c22:	51 05       	cpc	r21, r1
    1c24:	a1 f0       	breq	.+40     	; 0x1c4e <udd_ep_alloc+0x7c>
    1c26:	40 34       	cpi	r20, 0x40	; 64
    1c28:	51 05       	cpc	r21, r1
    1c2a:	99 f0       	breq	.+38     	; 0x1c52 <udd_ep_alloc+0x80>
    1c2c:	40 31       	cpi	r20, 0x10	; 16
    1c2e:	51 05       	cpc	r21, r1
    1c30:	61 f4       	brne	.+24     	; 0x1c4a <udd_ep_alloc+0x78>
    1c32:	19 c0       	rjmp	.+50     	; 0x1c66 <udd_ep_alloc+0x94>
    1c34:	41 15       	cp	r20, r1
    1c36:	92 e0       	ldi	r25, 0x02	; 2
    1c38:	59 07       	cpc	r21, r25
    1c3a:	89 f0       	breq	.+34     	; 0x1c5e <udd_ep_alloc+0x8c>
    1c3c:	4f 3f       	cpi	r20, 0xFF	; 255
    1c3e:	93 e0       	ldi	r25, 0x03	; 3
    1c40:	59 07       	cpc	r21, r25
    1c42:	79 f0       	breq	.+30     	; 0x1c62 <udd_ep_alloc+0x90>
    1c44:	41 15       	cp	r20, r1
    1c46:	51 40       	sbci	r21, 0x01	; 1
    1c48:	41 f0       	breq	.+16     	; 0x1c5a <udd_ep_alloc+0x88>
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	0d c0       	rjmp	.+26     	; 0x1c68 <udd_ep_alloc+0x96>
    1c4e:	22 e0       	ldi	r18, 0x02	; 2
    1c50:	0b c0       	rjmp	.+22     	; 0x1c68 <udd_ep_alloc+0x96>
    1c52:	23 e0       	ldi	r18, 0x03	; 3
    1c54:	09 c0       	rjmp	.+18     	; 0x1c68 <udd_ep_alloc+0x96>
    1c56:	24 e0       	ldi	r18, 0x04	; 4
    1c58:	07 c0       	rjmp	.+14     	; 0x1c68 <udd_ep_alloc+0x96>
    1c5a:	25 e0       	ldi	r18, 0x05	; 5
    1c5c:	05 c0       	rjmp	.+10     	; 0x1c68 <udd_ep_alloc+0x96>
    1c5e:	26 e0       	ldi	r18, 0x06	; 6
    1c60:	03 c0       	rjmp	.+6      	; 0x1c68 <udd_ep_alloc+0x96>
    1c62:	27 e0       	ldi	r18, 0x07	; 7
    1c64:	01 c0       	rjmp	.+2      	; 0x1c68 <udd_ep_alloc+0x96>
    1c66:	21 e0       	ldi	r18, 0x01	; 1
    1c68:	11 82       	std	Z+1, r1	; 0x01
    1c6a:	96 e0       	ldi	r25, 0x06	; 6
    1c6c:	90 83       	st	Z, r25
    1c6e:	82 2b       	or	r24, r18
    1c70:	81 83       	std	Z+1, r24	; 0x01
    1c72:	81 81       	ldd	r24, Z+1	; 0x01
    1c74:	80 7c       	andi	r24, 0xC0	; 192
    1c76:	80 3c       	cpi	r24, 0xC0	; 192
    1c78:	21 f4       	brne	.+8      	; 0x1c82 <udd_ep_alloc+0xb0>
    1c7a:	81 81       	ldd	r24, Z+1	; 0x01
    1c7c:	87 70       	andi	r24, 0x07	; 7
    1c7e:	87 30       	cpi	r24, 0x07	; 7
    1c80:	39 f0       	breq	.+14     	; 0x1c90 <udd_ep_alloc+0xbe>
    1c82:	81 81       	ldd	r24, Z+1	; 0x01
    1c84:	80 62       	ori	r24, 0x20	; 32
    1c86:	81 83       	std	Z+1, r24	; 0x01
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	08 95       	ret
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	08 95       	ret
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	08 95       	ret

00001c94 <udd_ep_is_halted>:
    1c94:	e8 2f       	mov	r30, r24
    1c96:	ef 70       	andi	r30, 0x0F	; 15
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	ee 0f       	add	r30, r30
    1c9c:	ff 1f       	adc	r31, r31
    1c9e:	99 27       	eor	r25, r25
    1ca0:	87 fd       	sbrc	r24, 7
    1ca2:	90 95       	com	r25
    1ca4:	88 27       	eor	r24, r24
    1ca6:	99 0f       	add	r25, r25
    1ca8:	88 1f       	adc	r24, r24
    1caa:	99 27       	eor	r25, r25
    1cac:	e8 0f       	add	r30, r24
    1cae:	f9 1f       	adc	r31, r25
    1cb0:	ee 0f       	add	r30, r30
    1cb2:	ff 1f       	adc	r31, r31
    1cb4:	ee 0f       	add	r30, r30
    1cb6:	ff 1f       	adc	r31, r31
    1cb8:	ee 0f       	add	r30, r30
    1cba:	ff 1f       	adc	r31, r31
    1cbc:	e8 55       	subi	r30, 0x58	; 88
    1cbe:	fc 4d       	sbci	r31, 0xDC	; 220
    1cc0:	81 81       	ldd	r24, Z+1	; 0x01
    1cc2:	82 fb       	bst	r24, 2
    1cc4:	88 27       	eor	r24, r24
    1cc6:	80 f9       	bld	r24, 0
    1cc8:	08 95       	ret

00001cca <udd_ep_clear_halt>:
    1cca:	e8 2f       	mov	r30, r24
    1ccc:	ef 70       	andi	r30, 0x0F	; 15
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	ee 0f       	add	r30, r30
    1cd2:	ff 1f       	adc	r31, r31
    1cd4:	28 2f       	mov	r18, r24
    1cd6:	33 27       	eor	r19, r19
    1cd8:	27 fd       	sbrc	r18, 7
    1cda:	30 95       	com	r19
    1cdc:	22 27       	eor	r18, r18
    1cde:	33 0f       	add	r19, r19
    1ce0:	22 1f       	adc	r18, r18
    1ce2:	33 27       	eor	r19, r19
    1ce4:	e2 0f       	add	r30, r18
    1ce6:	f3 1f       	adc	r31, r19
    1ce8:	ee 0f       	add	r30, r30
    1cea:	ff 1f       	adc	r31, r31
    1cec:	ee 0f       	add	r30, r30
    1cee:	ff 1f       	adc	r31, r31
    1cf0:	ee 0f       	add	r30, r30
    1cf2:	ff 1f       	adc	r31, r31
    1cf4:	e8 55       	subi	r30, 0x58	; 88
    1cf6:	fc 4d       	sbci	r31, 0xDC	; 220
    1cf8:	91 81       	ldd	r25, Z+1	; 0x01
    1cfa:	92 ff       	sbrs	r25, 2
    1cfc:	0e c0       	rjmp	.+28     	; 0x1d1a <udd_ep_clear_halt+0x50>
    1cfe:	91 81       	ldd	r25, Z+1	; 0x01
    1d00:	9b 7f       	andi	r25, 0xFB	; 251
    1d02:	91 83       	std	Z+1, r25	; 0x01
    1d04:	e1 dc       	rcall	.-1598   	; 0x16c8 <udd_ep_get_job>
    1d06:	fc 01       	movw	r30, r24
    1d08:	80 81       	ld	r24, Z
    1d0a:	80 ff       	sbrs	r24, 0
    1d0c:	06 c0       	rjmp	.+12     	; 0x1d1a <udd_ep_clear_halt+0x50>
    1d0e:	8e 7f       	andi	r24, 0xFE	; 254
    1d10:	80 83       	st	Z, r24
    1d12:	07 80       	ldd	r0, Z+7	; 0x07
    1d14:	f0 85       	ldd	r31, Z+8	; 0x08
    1d16:	e0 2d       	mov	r30, r0
    1d18:	19 95       	eicall
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	08 95       	ret

00001d1e <udd_ep_run>:
    1d1e:	cf 92       	push	r12
    1d20:	df 92       	push	r13
    1d22:	ef 92       	push	r14
    1d24:	ff 92       	push	r15
    1d26:	0f 93       	push	r16
    1d28:	1f 93       	push	r17
    1d2a:	cf 93       	push	r28
    1d2c:	df 93       	push	r29
    1d2e:	d8 2e       	mov	r13, r24
    1d30:	c6 2e       	mov	r12, r22
    1d32:	7a 01       	movw	r14, r20
    1d34:	e9 01       	movw	r28, r18
    1d36:	c8 dc       	rcall	.-1648   	; 0x16c8 <udd_ep_get_job>
    1d38:	fc 01       	movw	r30, r24
    1d3a:	8d 2d       	mov	r24, r13
    1d3c:	88 1f       	adc	r24, r24
    1d3e:	88 27       	eor	r24, r24
    1d40:	88 1f       	adc	r24, r24
    1d42:	ad 2d       	mov	r26, r13
    1d44:	af 70       	andi	r26, 0x0F	; 15
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	aa 0f       	add	r26, r26
    1d4a:	bb 1f       	adc	r27, r27
    1d4c:	a8 0f       	add	r26, r24
    1d4e:	b1 1d       	adc	r27, r1
    1d50:	aa 0f       	add	r26, r26
    1d52:	bb 1f       	adc	r27, r27
    1d54:	aa 0f       	add	r26, r26
    1d56:	bb 1f       	adc	r27, r27
    1d58:	aa 0f       	add	r26, r26
    1d5a:	bb 1f       	adc	r27, r27
    1d5c:	a8 55       	subi	r26, 0x58	; 88
    1d5e:	bc 4d       	sbci	r27, 0xDC	; 220
    1d60:	11 96       	adiw	r26, 0x01	; 1
    1d62:	9c 91       	ld	r25, X
    1d64:	11 97       	sbiw	r26, 0x01	; 1
    1d66:	90 7c       	andi	r25, 0xC0	; 192
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <udd_ep_run+0x4e>
    1d6a:	3f c0       	rjmp	.+126    	; 0x1dea <udd_ep_run+0xcc>
    1d6c:	11 96       	adiw	r26, 0x01	; 1
    1d6e:	9c 91       	ld	r25, X
    1d70:	11 97       	sbiw	r26, 0x01	; 1
    1d72:	90 7c       	andi	r25, 0xC0	; 192
    1d74:	90 3c       	cpi	r25, 0xC0	; 192
    1d76:	29 f0       	breq	.+10     	; 0x1d82 <udd_ep_run+0x64>
    1d78:	11 96       	adiw	r26, 0x01	; 1
    1d7a:	9c 91       	ld	r25, X
    1d7c:	11 97       	sbiw	r26, 0x01	; 1
    1d7e:	92 fd       	sbrc	r25, 2
    1d80:	36 c0       	rjmp	.+108    	; 0x1dee <udd_ep_run+0xd0>
    1d82:	9f b7       	in	r25, 0x3f	; 63
    1d84:	f8 94       	cli
    1d86:	20 81       	ld	r18, Z
    1d88:	20 ff       	sbrs	r18, 0
    1d8a:	03 c0       	rjmp	.+6      	; 0x1d92 <udd_ep_run+0x74>
    1d8c:	9f bf       	out	0x3f, r25	; 63
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	2f c0       	rjmp	.+94     	; 0x1df0 <udd_ep_run+0xd2>
    1d92:	20 81       	ld	r18, Z
    1d94:	21 60       	ori	r18, 0x01	; 1
    1d96:	20 83       	st	Z, r18
    1d98:	9f bf       	out	0x3f, r25	; 63
    1d9a:	e1 82       	std	Z+1, r14	; 0x01
    1d9c:	f2 82       	std	Z+2, r15	; 0x02
    1d9e:	c3 83       	std	Z+3, r28	; 0x03
    1da0:	d4 83       	std	Z+4, r29	; 0x04
    1da2:	15 82       	std	Z+5, r1	; 0x05
    1da4:	16 82       	std	Z+6, r1	; 0x06
    1da6:	07 83       	std	Z+7, r16	; 0x07
    1da8:	10 87       	std	Z+8, r17	; 0x08
    1daa:	c1 10       	cpse	r12, r1
    1dac:	05 c0       	rjmp	.+10     	; 0x1db8 <udd_ep_run+0x9a>
    1dae:	21 e0       	ldi	r18, 0x01	; 1
    1db0:	cd 2b       	or	r28, r29
    1db2:	19 f0       	breq	.+6      	; 0x1dba <udd_ep_run+0x9c>
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	01 c0       	rjmp	.+2      	; 0x1dba <udd_ep_run+0x9c>
    1db8:	21 e0       	ldi	r18, 0x01	; 1
    1dba:	90 81       	ld	r25, Z
    1dbc:	20 fb       	bst	r18, 0
    1dbe:	91 f9       	bld	r25, 1
    1dc0:	9b 7f       	andi	r25, 0xFB	; 251
    1dc2:	90 83       	st	Z, r25
    1dc4:	88 23       	and	r24, r24
    1dc6:	29 f0       	breq	.+10     	; 0x1dd2 <udd_ep_run+0xb4>
    1dc8:	16 96       	adiw	r26, 0x06	; 6
    1dca:	1d 92       	st	X+, r1
    1dcc:	1c 92       	st	X, r1
    1dce:	17 97       	sbiw	r26, 0x07	; 7
    1dd0:	08 c0       	rjmp	.+16     	; 0x1de2 <udd_ep_run+0xc4>
    1dd2:	12 96       	adiw	r26, 0x02	; 2
    1dd4:	1d 92       	st	X+, r1
    1dd6:	1c 92       	st	X, r1
    1dd8:	13 97       	sbiw	r26, 0x03	; 3
    1dda:	16 96       	adiw	r26, 0x06	; 6
    1ddc:	1d 92       	st	X+, r1
    1dde:	1c 92       	st	X, r1
    1de0:	17 97       	sbiw	r26, 0x07	; 7
    1de2:	8d 2d       	mov	r24, r13
    1de4:	fb dc       	rcall	.-1546   	; 0x17dc <udd_ep_trans_complet>
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	03 c0       	rjmp	.+6      	; 0x1df0 <udd_ep_run+0xd2>
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	01 c0       	rjmp	.+2      	; 0x1df0 <udd_ep_run+0xd2>
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	df 91       	pop	r29
    1df2:	cf 91       	pop	r28
    1df4:	1f 91       	pop	r17
    1df6:	0f 91       	pop	r16
    1df8:	ff 90       	pop	r15
    1dfa:	ef 90       	pop	r14
    1dfc:	df 90       	pop	r13
    1dfe:	cf 90       	pop	r12
    1e00:	08 95       	ret

00001e02 <udd_ep_abort>:
    1e02:	ff 92       	push	r15
    1e04:	0f 93       	push	r16
    1e06:	1f 93       	push	r17
    1e08:	cf 93       	push	r28
    1e0a:	df 93       	push	r29
    1e0c:	18 2f       	mov	r17, r24
    1e0e:	f8 2e       	mov	r15, r24
    1e10:	ff 1c       	adc	r15, r15
    1e12:	ff 24       	eor	r15, r15
    1e14:	ff 1c       	adc	r15, r15
    1e16:	c8 2f       	mov	r28, r24
    1e18:	cf 70       	andi	r28, 0x0F	; 15
    1e1a:	d0 e0       	ldi	r29, 0x00	; 0
    1e1c:	cc 0f       	add	r28, r28
    1e1e:	dd 1f       	adc	r29, r29
    1e20:	cf 0d       	add	r28, r15
    1e22:	d1 1d       	adc	r29, r1
    1e24:	cc 0f       	add	r28, r28
    1e26:	dd 1f       	adc	r29, r29
    1e28:	cc 0f       	add	r28, r28
    1e2a:	dd 1f       	adc	r29, r29
    1e2c:	cc 0f       	add	r28, r28
    1e2e:	dd 1f       	adc	r29, r29
    1e30:	c8 55       	subi	r28, 0x58	; 88
    1e32:	dc 4d       	sbci	r29, 0xDC	; 220
    1e34:	49 dc       	rcall	.-1902   	; 0x16c8 <udd_ep_get_job>
    1e36:	dc 01       	movw	r26, r24
    1e38:	fe 01       	movw	r30, r28
    1e3a:	02 e0       	ldi	r16, 0x02	; 2
    1e3c:	05 93       	las	Z, r16
    1e3e:	8c 91       	ld	r24, X
    1e40:	80 ff       	sbrs	r24, 0
    1e42:	12 c0       	rjmp	.+36     	; 0x1e68 <udd_ep_abort+0x66>
    1e44:	8e 7f       	andi	r24, 0xFE	; 254
    1e46:	8c 93       	st	X, r24
    1e48:	17 96       	adiw	r26, 0x07	; 7
    1e4a:	ed 91       	ld	r30, X+
    1e4c:	fc 91       	ld	r31, X
    1e4e:	18 97       	sbiw	r26, 0x08	; 8
    1e50:	30 97       	sbiw	r30, 0x00	; 0
    1e52:	51 f0       	breq	.+20     	; 0x1e68 <udd_ep_abort+0x66>
    1e54:	ff 20       	and	r15, r15
    1e56:	19 f0       	breq	.+6      	; 0x1e5e <udd_ep_abort+0x5c>
    1e58:	6e 81       	ldd	r22, Y+6	; 0x06
    1e5a:	7f 81       	ldd	r23, Y+7	; 0x07
    1e5c:	02 c0       	rjmp	.+4      	; 0x1e62 <udd_ep_abort+0x60>
    1e5e:	6a 81       	ldd	r22, Y+2	; 0x02
    1e60:	7b 81       	ldd	r23, Y+3	; 0x03
    1e62:	41 2f       	mov	r20, r17
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	19 95       	eicall
    1e68:	df 91       	pop	r29
    1e6a:	cf 91       	pop	r28
    1e6c:	1f 91       	pop	r17
    1e6e:	0f 91       	pop	r16
    1e70:	ff 90       	pop	r15
    1e72:	08 95       	ret

00001e74 <udd_ep_free>:
    1e74:	cf 93       	push	r28
    1e76:	c8 2f       	mov	r28, r24
    1e78:	c4 df       	rcall	.-120    	; 0x1e02 <udd_ep_abort>
    1e7a:	ec 2f       	mov	r30, r28
    1e7c:	ef 70       	andi	r30, 0x0F	; 15
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	ee 0f       	add	r30, r30
    1e82:	ff 1f       	adc	r31, r31
    1e84:	8c 2f       	mov	r24, r28
    1e86:	99 27       	eor	r25, r25
    1e88:	87 fd       	sbrc	r24, 7
    1e8a:	90 95       	com	r25
    1e8c:	88 27       	eor	r24, r24
    1e8e:	99 0f       	add	r25, r25
    1e90:	88 1f       	adc	r24, r24
    1e92:	99 27       	eor	r25, r25
    1e94:	e8 0f       	add	r30, r24
    1e96:	f9 1f       	adc	r31, r25
    1e98:	ee 0f       	add	r30, r30
    1e9a:	ff 1f       	adc	r31, r31
    1e9c:	ee 0f       	add	r30, r30
    1e9e:	ff 1f       	adc	r31, r31
    1ea0:	ee 0f       	add	r30, r30
    1ea2:	ff 1f       	adc	r31, r31
    1ea4:	e8 55       	subi	r30, 0x58	; 88
    1ea6:	fc 4d       	sbci	r31, 0xDC	; 220
    1ea8:	11 82       	std	Z+1, r1	; 0x01
    1eaa:	cf 91       	pop	r28
    1eac:	08 95       	ret

00001eae <udd_ep_set_halt>:
    1eae:	0f 93       	push	r16
    1eb0:	e8 2f       	mov	r30, r24
    1eb2:	ef 70       	andi	r30, 0x0F	; 15
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	ee 0f       	add	r30, r30
    1eb8:	ff 1f       	adc	r31, r31
    1eba:	28 2f       	mov	r18, r24
    1ebc:	33 27       	eor	r19, r19
    1ebe:	27 fd       	sbrc	r18, 7
    1ec0:	30 95       	com	r19
    1ec2:	22 27       	eor	r18, r18
    1ec4:	33 0f       	add	r19, r19
    1ec6:	22 1f       	adc	r18, r18
    1ec8:	33 27       	eor	r19, r19
    1eca:	e2 0f       	add	r30, r18
    1ecc:	f3 1f       	adc	r31, r19
    1ece:	ee 0f       	add	r30, r30
    1ed0:	ff 1f       	adc	r31, r31
    1ed2:	ee 0f       	add	r30, r30
    1ed4:	ff 1f       	adc	r31, r31
    1ed6:	ee 0f       	add	r30, r30
    1ed8:	ff 1f       	adc	r31, r31
    1eda:	e8 55       	subi	r30, 0x58	; 88
    1edc:	fc 4d       	sbci	r31, 0xDC	; 220
    1ede:	91 81       	ldd	r25, Z+1	; 0x01
    1ee0:	94 60       	ori	r25, 0x04	; 4
    1ee2:	91 83       	std	Z+1, r25	; 0x01
    1ee4:	01 e0       	ldi	r16, 0x01	; 1
    1ee6:	06 93       	lac	Z, r16
    1ee8:	8c df       	rcall	.-232    	; 0x1e02 <udd_ep_abort>
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	0f 91       	pop	r16
    1eee:	08 95       	ret

00001ef0 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    1ef0:	1f 92       	push	r1
    1ef2:	0f 92       	push	r0
    1ef4:	0f b6       	in	r0, 0x3f	; 63
    1ef6:	0f 92       	push	r0
    1ef8:	11 24       	eor	r1, r1
    1efa:	0b b6       	in	r0, 0x3b	; 59
    1efc:	0f 92       	push	r0
    1efe:	0f 93       	push	r16
    1f00:	2f 93       	push	r18
    1f02:	3f 93       	push	r19
    1f04:	4f 93       	push	r20
    1f06:	5f 93       	push	r21
    1f08:	6f 93       	push	r22
    1f0a:	7f 93       	push	r23
    1f0c:	8f 93       	push	r24
    1f0e:	9f 93       	push	r25
    1f10:	af 93       	push	r26
    1f12:	bf 93       	push	r27
    1f14:	ef 93       	push	r30
    1f16:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    1f18:	80 91 cb 04 	lds	r24, 0x04CB
    1f1c:	88 23       	and	r24, r24
    1f1e:	3c f4       	brge	.+14     	; 0x1f2e <__vector_125+0x3e>
		udd_ack_start_of_frame_event();
    1f20:	80 e8       	ldi	r24, 0x80	; 128
    1f22:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    1f26:	0e 94 26 07 	call	0xe4c	; 0xe4c <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    1f2a:	d9 d1       	rcall	.+946    	; 0x22de <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    1f2c:	8a c0       	rjmp	.+276    	; 0x2042 <__vector_125+0x152>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    1f2e:	80 91 cb 04 	lds	r24, 0x04CB
    1f32:	82 ff       	sbrs	r24, 2
    1f34:	20 c0       	rjmp	.+64     	; 0x1f76 <__vector_125+0x86>
		udd_ack_underflow_event();
    1f36:	84 e0       	ldi	r24, 0x04	; 4
    1f38:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    1f3c:	80 91 b0 23 	lds	r24, 0x23B0
    1f40:	86 ff       	sbrs	r24, 6
    1f42:	7f c0       	rjmp	.+254    	; 0x2042 <__vector_125+0x152>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    1f44:	80 91 cc 04 	lds	r24, 0x04CC
    1f48:	81 fd       	sbrc	r24, 1
    1f4a:	7b c0       	rjmp	.+246    	; 0x2042 <__vector_125+0x152>
    1f4c:	d8 db       	rcall	.-2128   	; 0x16fe <udd_ctrl_interrupt_tc_setup>
    1f4e:	81 11       	cpse	r24, r1
    1f50:	78 c0       	rjmp	.+240    	; 0x2042 <__vector_125+0x152>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    1f52:	80 91 9a 23 	lds	r24, 0x239A
    1f56:	81 30       	cpi	r24, 0x01	; 1
    1f58:	11 f4       	brne	.+4      	; 0x1f5e <__vector_125+0x6e>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    1f5a:	32 db       	rcall	.-2460   	; 0x15c0 <udd_ctrl_send_zlp_in>
    1f5c:	72 c0       	rjmp	.+228    	; 0x2042 <__vector_125+0x152>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1f5e:	84 30       	cpi	r24, 0x04	; 4
    1f60:	09 f0       	breq	.+2      	; 0x1f64 <__vector_125+0x74>
    1f62:	6f c0       	rjmp	.+222    	; 0x2042 <__vector_125+0x152>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    1f64:	e1 eb       	ldi	r30, 0xB1	; 177
    1f66:	f3 e2       	ldi	r31, 0x23	; 35
    1f68:	04 e0       	ldi	r16, 0x04	; 4
    1f6a:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1f6c:	e9 ea       	ldi	r30, 0xA9	; 169
    1f6e:	f3 e2       	ldi	r31, 0x23	; 35
    1f70:	04 e0       	ldi	r16, 0x04	; 4
    1f72:	05 93       	las	Z, r16
    1f74:	66 c0       	rjmp	.+204    	; 0x2042 <__vector_125+0x152>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    1f76:	80 91 cb 04 	lds	r24, 0x04CB
    1f7a:	81 ff       	sbrs	r24, 1
    1f7c:	5d c0       	rjmp	.+186    	; 0x2038 <__vector_125+0x148>
		udd_ack_overflow_event();
    1f7e:	82 e0       	ldi	r24, 0x02	; 2
    1f80:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    1f84:	80 91 a8 23 	lds	r24, 0x23A8
    1f88:	86 ff       	sbrs	r24, 6
    1f8a:	5b c0       	rjmp	.+182    	; 0x2042 <__vector_125+0x152>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    1f8c:	80 91 cc 04 	lds	r24, 0x04CC
    1f90:	81 fd       	sbrc	r24, 1
    1f92:	57 c0       	rjmp	.+174    	; 0x2042 <__vector_125+0x152>
    1f94:	b4 db       	rcall	.-2200   	; 0x16fe <udd_ctrl_interrupt_tc_setup>
    1f96:	81 11       	cpse	r24, r1
    1f98:	54 c0       	rjmp	.+168    	; 0x2042 <__vector_125+0x152>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    1f9a:	80 91 9a 23 	lds	r24, 0x239A
    1f9e:	82 30       	cpi	r24, 0x02	; 2
    1fa0:	41 f4       	brne	.+16     	; 0x1fb2 <__vector_125+0xc2>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1fa2:	84 e0       	ldi	r24, 0x04	; 4
    1fa4:	80 93 9a 23 	sts	0x239A, r24
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    1fa8:	e8 ea       	ldi	r30, 0xA8	; 168
    1faa:	f3 e2       	ldi	r31, 0x23	; 35
    1fac:	02 e0       	ldi	r16, 0x02	; 2
    1fae:	06 93       	lac	Z, r16
    1fb0:	48 c0       	rjmp	.+144    	; 0x2042 <__vector_125+0x152>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    1fb2:	83 30       	cpi	r24, 0x03	; 3
    1fb4:	09 f0       	breq	.+2      	; 0x1fb8 <__vector_125+0xc8>
    1fb6:	45 c0       	rjmp	.+138    	; 0x2042 <__vector_125+0x152>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    1fb8:	e1 eb       	ldi	r30, 0xB1	; 177
    1fba:	f3 e2       	ldi	r31, 0x23	; 35
    1fbc:	04 e0       	ldi	r16, 0x04	; 4
    1fbe:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1fc0:	e9 ea       	ldi	r30, 0xA9	; 169
    1fc2:	f3 e2       	ldi	r31, 0x23	; 35
    1fc4:	04 e0       	ldi	r16, 0x04	; 4
    1fc6:	05 93       	las	Z, r16
    1fc8:	3c c0       	rjmp	.+120    	; 0x2042 <__vector_125+0x152>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    1fca:	80 e1       	ldi	r24, 0x10	; 16
    1fcc:	80 93 ca 04 	sts	0x04CA, r24
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	17 df       	rcall	.-466    	; 0x1e02 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    1fd4:	81 e8       	ldi	r24, 0x81	; 129
    1fd6:	15 df       	rcall	.-470    	; 0x1e02 <udd_ep_abort>
		}
#endif
		udc_reset();
    1fd8:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    1fdc:	10 92 c3 04 	sts	0x04C3, r1
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    1fe0:	e9 ea       	ldi	r30, 0xA9	; 169
    1fe2:	f3 e2       	ldi	r31, 0x23	; 35
    1fe4:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    1fe6:	96 e0       	ldi	r25, 0x06	; 6
    1fe8:	90 93 a8 23 	sts	0x23A8, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    1fec:	80 e4       	ldi	r24, 0x40	; 64
    1fee:	80 83       	st	Z, r24
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    1ff0:	e1 eb       	ldi	r30, 0xB1	; 177
    1ff2:	f3 e2       	ldi	r31, 0x23	; 35
    1ff4:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    1ff6:	90 93 b0 23 	sts	0x23B0, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    1ffa:	80 83       	st	Z, r24
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    1ffc:	8e e8       	ldi	r24, 0x8E	; 142
    1ffe:	93 e2       	ldi	r25, 0x23	; 35
    2000:	80 93 ac 23 	sts	0x23AC, r24
    2004:	90 93 ad 23 	sts	0x23AD, r25
		// Reset endpoint control management
		udd_ctrl_init();
    2008:	a2 da       	rcall	.-2748   	; 0x154e <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    200a:	1b c0       	rjmp	.+54     	; 0x2042 <__vector_125+0x152>
	}

	if (udd_is_suspend_event()) {
    200c:	80 91 cb 04 	lds	r24, 0x04CB
    2010:	86 ff       	sbrs	r24, 6
    2012:	07 c0       	rjmp	.+14     	; 0x2022 <__vector_125+0x132>
		udd_ack_suspend_event();
    2014:	80 e4       	ldi	r24, 0x40	; 64
    2016:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    201a:	80 e0       	ldi	r24, 0x00	; 0
    201c:	79 da       	rcall	.-2830   	; 0x1510 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    201e:	59 d1       	rcall	.+690    	; 0x22d2 <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    2020:	10 c0       	rjmp	.+32     	; 0x2042 <__vector_125+0x152>
	}

	if (udd_is_resume_event()) {
    2022:	80 91 cb 04 	lds	r24, 0x04CB
    2026:	85 ff       	sbrs	r24, 5
    2028:	0c c0       	rjmp	.+24     	; 0x2042 <__vector_125+0x152>
		udd_ack_resume_event();
    202a:	80 e2       	ldi	r24, 0x20	; 32
    202c:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	6e da       	rcall	.-2852   	; 0x1510 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2034:	51 d1       	rcall	.+674    	; 0x22d8 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    2036:	05 c0       	rjmp	.+10     	; 0x2042 <__vector_125+0x152>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2038:	80 91 cb 04 	lds	r24, 0x04CB
    203c:	84 ff       	sbrs	r24, 4
    203e:	e6 cf       	rjmp	.-52     	; 0x200c <__vector_125+0x11c>
    2040:	c4 cf       	rjmp	.-120    	; 0x1fca <__vector_125+0xda>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2042:	ff 91       	pop	r31
    2044:	ef 91       	pop	r30
    2046:	bf 91       	pop	r27
    2048:	af 91       	pop	r26
    204a:	9f 91       	pop	r25
    204c:	8f 91       	pop	r24
    204e:	7f 91       	pop	r23
    2050:	6f 91       	pop	r22
    2052:	5f 91       	pop	r21
    2054:	4f 91       	pop	r20
    2056:	3f 91       	pop	r19
    2058:	2f 91       	pop	r18
    205a:	0f 91       	pop	r16
    205c:	0f 90       	pop	r0
    205e:	0b be       	out	0x3b, r0	; 59
    2060:	0f 90       	pop	r0
    2062:	0f be       	out	0x3f, r0	; 63
    2064:	0f 90       	pop	r0
    2066:	1f 90       	pop	r1
    2068:	18 95       	reti

0000206a <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    206a:	1f 92       	push	r1
    206c:	0f 92       	push	r0
    206e:	0f b6       	in	r0, 0x3f	; 63
    2070:	0f 92       	push	r0
    2072:	11 24       	eor	r1, r1
    2074:	0b b6       	in	r0, 0x3b	; 59
    2076:	0f 92       	push	r0
    2078:	0f 93       	push	r16
    207a:	1f 93       	push	r17
    207c:	2f 93       	push	r18
    207e:	3f 93       	push	r19
    2080:	4f 93       	push	r20
    2082:	5f 93       	push	r21
    2084:	6f 93       	push	r22
    2086:	7f 93       	push	r23
    2088:	8f 93       	push	r24
    208a:	9f 93       	push	r25
    208c:	af 93       	push	r26
    208e:	bf 93       	push	r27
    2090:	cf 93       	push	r28
    2092:	df 93       	push	r29
    2094:	ef 93       	push	r30
    2096:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2098:	80 91 cc 04 	lds	r24, 0x04CC
    209c:	81 fd       	sbrc	r24, 1
    209e:	03 c0       	rjmp	.+6      	; 0x20a6 <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    20a0:	2e db       	rcall	.-2468   	; 0x16fe <udd_ctrl_interrupt_tc_setup>
    20a2:	81 11       	cpse	r24, r1
    20a4:	b7 c0       	rjmp	.+366    	; 0x2214 <__vector_126+0x1aa>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    20a6:	82 e0       	ldi	r24, 0x02	; 2
    20a8:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    20ac:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    20b0:	81 95       	neg	r24
    20b2:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    20b4:	e8 ea       	ldi	r30, 0xA8	; 168
    20b6:	f3 e2       	ldi	r31, 0x23	; 35
    20b8:	e8 1b       	sub	r30, r24
    20ba:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    20bc:	20 81       	ld	r18, Z
    20be:	31 81       	ldd	r19, Z+1	; 0x01
    20c0:	28 5a       	subi	r18, 0xA8	; 168
    20c2:	33 42       	sbci	r19, 0x23	; 35
    20c4:	36 95       	lsr	r19
    20c6:	27 95       	ror	r18
    20c8:	36 95       	lsr	r19
    20ca:	27 95       	ror	r18
    20cc:	36 95       	lsr	r19
    20ce:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    20d0:	82 2f       	mov	r24, r18
    20d2:	86 95       	lsr	r24
    20d4:	20 ff       	sbrs	r18, 0
    20d6:	02 c0       	rjmp	.+4      	; 0x20dc <__vector_126+0x72>
    20d8:	90 e8       	ldi	r25, 0x80	; 128
    20da:	01 c0       	rjmp	.+2      	; 0x20de <__vector_126+0x74>
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    20e0:	e8 2f       	mov	r30, r24
    20e2:	ef 70       	andi	r30, 0x0F	; 15
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	ee 0f       	add	r30, r30
    20e8:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    20ea:	28 2f       	mov	r18, r24
    20ec:	33 27       	eor	r19, r19
    20ee:	27 fd       	sbrc	r18, 7
    20f0:	30 95       	com	r19
    20f2:	22 27       	eor	r18, r18
    20f4:	33 0f       	add	r19, r19
    20f6:	22 1f       	adc	r18, r18
    20f8:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    20fa:	e2 0f       	add	r30, r18
    20fc:	f3 1f       	adc	r31, r19
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    20fe:	ee 0f       	add	r30, r30
    2100:	ff 1f       	adc	r31, r31
    2102:	ee 0f       	add	r30, r30
    2104:	ff 1f       	adc	r31, r31
    2106:	ee 0f       	add	r30, r30
    2108:	ff 1f       	adc	r31, r31
    210a:	e8 55       	subi	r30, 0x58	; 88
    210c:	fc 4d       	sbci	r31, 0xDC	; 220
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    210e:	90 81       	ld	r25, Z
    2110:	95 ff       	sbrs	r25, 5
    2112:	80 c0       	rjmp	.+256    	; 0x2214 <__vector_126+0x1aa>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2114:	00 e2       	ldi	r16, 0x20	; 32
    2116:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2118:	81 11       	cpse	r24, r1
    211a:	77 c0       	rjmp	.+238    	; 0x220a <__vector_126+0x1a0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    211c:	80 91 9a 23 	lds	r24, 0x239A
    2120:	84 30       	cpi	r24, 0x04	; 4
    2122:	19 f4       	brne	.+6      	; 0x212a <__vector_126+0xc0>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2124:	5b da       	rcall	.-2890   	; 0x15dc <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2126:	13 da       	rcall	.-3034   	; 0x154e <udd_ctrl_init>
    2128:	75 c0       	rjmp	.+234    	; 0x2214 <__vector_126+0x1aa>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    212a:	c0 91 aa 23 	lds	r28, 0x23AA
    212e:	d0 91 ab 23 	lds	r29, 0x23AB

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2132:	80 91 ee 2b 	lds	r24, 0x2BEE
    2136:	90 91 ef 2b 	lds	r25, 0x2BEF
    213a:	00 91 96 23 	lds	r16, 0x2396
    213e:	10 91 97 23 	lds	r17, 0x2397
    2142:	98 01       	movw	r18, r16
    2144:	2c 0f       	add	r18, r28
    2146:	3d 1f       	adc	r19, r29
    2148:	82 17       	cp	r24, r18
    214a:	93 07       	cpc	r25, r19
    214c:	18 f4       	brcc	.+6      	; 0x2154 <__vector_126+0xea>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    214e:	ec 01       	movw	r28, r24
    2150:	c0 1b       	sub	r28, r16
    2152:	d1 0b       	sbc	r29, r17
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2154:	80 91 ec 2b 	lds	r24, 0x2BEC
    2158:	90 91 ed 2b 	lds	r25, 0x2BED
    215c:	ae 01       	movw	r20, r28
    215e:	6e e8       	ldi	r22, 0x8E	; 142
    2160:	73 e2       	ldi	r23, 0x23	; 35
    2162:	80 0f       	add	r24, r16
    2164:	91 1f       	adc	r25, r17
    2166:	fc d0       	rcall	.+504    	; 0x2360 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2168:	0c 0f       	add	r16, r28
    216a:	1d 1f       	adc	r17, r29
    216c:	00 93 96 23 	sts	0x2396, r16
    2170:	10 93 97 23 	sts	0x2397, r17

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2174:	28 97       	sbiw	r28, 0x08	; 8
    2176:	69 f4       	brne	.+26     	; 0x2192 <__vector_126+0x128>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    2178:	80 91 98 23 	lds	r24, 0x2398
    217c:	90 91 99 23 	lds	r25, 0x2399
    2180:	80 0f       	add	r24, r16
    2182:	91 1f       	adc	r25, r17

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2184:	20 91 ea 2b 	lds	r18, 0x2BEA
    2188:	30 91 eb 2b 	lds	r19, 0x2BEB
    218c:	82 17       	cp	r24, r18
    218e:	93 07       	cpc	r25, r19
    2190:	88 f0       	brcs	.+34     	; 0x21b4 <__vector_126+0x14a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2192:	00 93 ee 2b 	sts	0x2BEE, r16
    2196:	10 93 ef 2b 	sts	0x2BEF, r17
		if (NULL != udd_g_ctrlreq.over_under_run) {
    219a:	e0 91 f2 2b 	lds	r30, 0x2BF2
    219e:	f0 91 f3 2b 	lds	r31, 0x2BF3
    21a2:	30 97       	sbiw	r30, 0x00	; 0
    21a4:	29 f0       	breq	.+10     	; 0x21b0 <__vector_126+0x146>
			if (!udd_g_ctrlreq.over_under_run()) {
    21a6:	19 95       	eicall
    21a8:	81 11       	cpse	r24, r1
    21aa:	02 c0       	rjmp	.+4      	; 0x21b0 <__vector_126+0x146>
				// Stall ZLP
				udd_ctrl_stall_data();
    21ac:	fb d9       	rcall	.-3082   	; 0x15a4 <udd_ctrl_stall_data>
    21ae:	32 c0       	rjmp	.+100    	; 0x2214 <__vector_126+0x1aa>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    21b0:	07 da       	rcall	.-3058   	; 0x15c0 <udd_ctrl_send_zlp_in>
    21b2:	30 c0       	rjmp	.+96     	; 0x2214 <__vector_126+0x1aa>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    21b4:	80 91 ee 2b 	lds	r24, 0x2BEE
    21b8:	90 91 ef 2b 	lds	r25, 0x2BEF
    21bc:	08 17       	cp	r16, r24
    21be:	19 07       	cpc	r17, r25
    21c0:	f9 f4       	brne	.+62     	; 0x2200 <__vector_126+0x196>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    21c2:	e0 91 f2 2b 	lds	r30, 0x2BF2
    21c6:	f0 91 f3 2b 	lds	r31, 0x2BF3
    21ca:	30 97       	sbiw	r30, 0x00	; 0
    21cc:	11 f4       	brne	.+4      	; 0x21d2 <__vector_126+0x168>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    21ce:	ea d9       	rcall	.-3116   	; 0x15a4 <udd_ctrl_stall_data>
    21d0:	21 c0       	rjmp	.+66     	; 0x2214 <__vector_126+0x1aa>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    21d2:	19 95       	eicall
    21d4:	81 11       	cpse	r24, r1
    21d6:	02 c0       	rjmp	.+4      	; 0x21dc <__vector_126+0x172>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    21d8:	e5 d9       	rcall	.-3126   	; 0x15a4 <udd_ctrl_stall_data>
    21da:	1c c0       	rjmp	.+56     	; 0x2214 <__vector_126+0x1aa>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    21dc:	20 91 98 23 	lds	r18, 0x2398
    21e0:	30 91 99 23 	lds	r19, 0x2399
    21e4:	80 91 96 23 	lds	r24, 0x2396
    21e8:	90 91 97 23 	lds	r25, 0x2397
    21ec:	82 0f       	add	r24, r18
    21ee:	93 1f       	adc	r25, r19
    21f0:	80 93 98 23 	sts	0x2398, r24
    21f4:	90 93 99 23 	sts	0x2399, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    21f8:	10 92 96 23 	sts	0x2396, r1
    21fc:	10 92 97 23 	sts	0x2397, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2200:	e8 ea       	ldi	r30, 0xA8	; 168
    2202:	f3 e2       	ldi	r31, 0x23	; 35
    2204:	02 e0       	ldi	r16, 0x02	; 2
    2206:	06 93       	lac	Z, r16
    2208:	05 c0       	rjmp	.+10     	; 0x2214 <__vector_126+0x1aa>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    220a:	80 38       	cpi	r24, 0x80	; 128
    220c:	11 f4       	brne	.+4      	; 0x2212 <__vector_126+0x1a8>
		udd_ctrl_in_sent();
    220e:	ee d9       	rcall	.-3108   	; 0x15ec <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2210:	01 c0       	rjmp	.+2      	; 0x2214 <__vector_126+0x1aa>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2212:	e4 da       	rcall	.-2616   	; 0x17dc <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2214:	ff 91       	pop	r31
    2216:	ef 91       	pop	r30
    2218:	df 91       	pop	r29
    221a:	cf 91       	pop	r28
    221c:	bf 91       	pop	r27
    221e:	af 91       	pop	r26
    2220:	9f 91       	pop	r25
    2222:	8f 91       	pop	r24
    2224:	7f 91       	pop	r23
    2226:	6f 91       	pop	r22
    2228:	5f 91       	pop	r21
    222a:	4f 91       	pop	r20
    222c:	3f 91       	pop	r19
    222e:	2f 91       	pop	r18
    2230:	1f 91       	pop	r17
    2232:	0f 91       	pop	r16
    2234:	0f 90       	pop	r0
    2236:	0b be       	out	0x3b, r0	; 59
    2238:	0f 90       	pop	r0
    223a:	0f be       	out	0x3f, r0	; 63
    223c:	0f 90       	pop	r0
    223e:	1f 90       	pop	r1
    2240:	18 95       	reti

00002242 <main>:
/*! \brief Main function. Execution starts here.
 */
int main(void)
{

	sysclk_init();
    2242:	0e 94 e6 03 	call	0x7cc	; 0x7cc <sysclk_init>
	irq_initialize_vectors();
    2246:	87 e0       	ldi	r24, 0x07	; 7
    2248:	e0 ea       	ldi	r30, 0xA0	; 160
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	82 83       	std	Z+2, r24	; 0x02
	cpu_irq_enable();
    224e:	78 94       	sei
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    2250:	10 92 de 2b 	sts	0x2BDE, r1
    2254:	10 92 df 2b 	sts	0x2BDF, r1
    2258:	10 92 e0 2b 	sts	0x2BE0, r1
    225c:	10 92 e1 2b 	sts	0x2BE1, r1
    2260:	10 92 e2 2b 	sts	0x2BE2, r1
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	80 93 e3 2b 	sts	0x2BE3, r24

	// Initialize the sleep manager
	sleepmgr_init();

	board_init();
    226a:	db d8       	rcall	.-3658   	; 0x1422 <board_init>
	ui_init();
    226c:	0e 94 27 01 	call	0x24e	; 0x24e <ui_init>
	ui_powerdown();
    2270:	0e 94 5f 01 	call	0x2be	; 0x2be <ui_powerdown>
	
	PORTD_DIR = 0xff;
    2274:	8f ef       	ldi	r24, 0xFF	; 255
    2276:	80 93 60 06 	sts	0x0660, r24
	PORTC_DIR = 0x00;
    227a:	10 92 40 06 	sts	0x0640, r1
	PORTD_OUT = 0x00;
    227e:	10 92 64 06 	sts	0x0664, r1
	// Start USB stack to authorize VBus monitoring
	udc_start();
    2282:	0e 94 f7 06 	call	0xdee	; 0xdee <udc_start>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    2286:	ce ed       	ldi	r28, 0xDE	; 222
    2288:	db e2       	ldi	r29, 0x2B	; 43
    228a:	8f ed       	ldi	r24, 0xDF	; 223
    228c:	9b e2       	ldi	r25, 0x2B	; 43
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    228e:	a8 e4       	ldi	r26, 0x48	; 72
    2290:	b0 e0       	ldi	r27, 0x00	; 0
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    2292:	f8 94       	cli

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    2294:	28 81       	ld	r18, Y
    2296:	21 11       	cpse	r18, r1
    2298:	07 c0       	rjmp	.+14     	; 0x22a8 <main+0x66>
    229a:	fc 01       	movw	r30, r24
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    229c:	2f 5f       	subi	r18, 0xFF	; 255

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    229e:	31 91       	ld	r19, Z+
    22a0:	33 23       	and	r19, r19
    22a2:	e1 f3       	breq	.-8      	; 0x229c <main+0x5a>
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    22a4:	21 11       	cpse	r18, r1
    22a6:	02 c0       	rjmp	.+4      	; 0x22ac <main+0x6a>
		cpu_irq_enable();
    22a8:	78 94       	sei
    22aa:	f3 cf       	rjmp	.-26     	; 0x2292 <main+0x50>
    22ac:	3c 91       	ld	r19, X

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    22ae:	e2 2f       	mov	r30, r18
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	ee 5f       	subi	r30, 0xFE	; 254
    22b4:	ff 4d       	sbci	r31, 0xDF	; 223
    22b6:	23 2f       	mov	r18, r19
    22b8:	21 7f       	andi	r18, 0xF1	; 241
    22ba:	30 81       	ld	r19, Z
    22bc:	23 2b       	or	r18, r19
    22be:	2c 93       	st	X, r18
	sleep_enable();
    22c0:	2c 91       	ld	r18, X
    22c2:	21 60       	ori	r18, 0x01	; 1
    22c4:	2c 93       	st	X, r18

	cpu_irq_enable();
    22c6:	78 94       	sei
	sleep_enter();
    22c8:	88 95       	sleep

	sleep_disable();
    22ca:	2c 91       	ld	r18, X
    22cc:	2e 7f       	andi	r18, 0xFE	; 254
    22ce:	2c 93       	st	X, r18
    22d0:	e0 cf       	rjmp	.-64     	; 0x2292 <main+0x50>

000022d2 <main_suspend_action>:
	}
}

void main_suspend_action(void)
{
	ui_powerdown();
    22d2:	0c 94 5f 01 	jmp	0x2be	; 0x2be <ui_powerdown>
    22d6:	08 95       	ret

000022d8 <main_resume_action>:
}

void main_resume_action(void)
{
	ui_wakeup();
    22d8:	0c 94 af 01 	jmp	0x35e	; 0x35e <ui_wakeup>
    22dc:	08 95       	ret

000022de <main_sof_action>:
}

void main_sof_action(void)
{
	if (!main_b_generic_enable)
    22de:	80 91 dd 23 	lds	r24, 0x23DD
    22e2:	88 23       	and	r24, r24
    22e4:	19 f0       	breq	.+6      	; 0x22ec <main_sof_action+0xe>
		return;
	ui_process(udd_get_frame_number());
    22e6:	58 dc       	rcall	.-1872   	; 0x1b98 <udd_get_frame_number>
    22e8:	0c 94 b0 01 	jmp	0x360	; 0x360 <ui_process>
    22ec:	08 95       	ret

000022ee <main_remotewakeup_enable>:
}

void main_remotewakeup_enable(void)
{
	ui_wakeup_enable();
    22ee:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <ui_wakeup_enable>
    22f2:	08 95       	ret

000022f4 <main_remotewakeup_disable>:
}

void main_remotewakeup_disable(void)
{
	ui_wakeup_disable();
    22f4:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <ui_wakeup_disable>
    22f8:	08 95       	ret

000022fa <main_generic_enable>:
}

bool main_generic_enable(void)
{
	main_b_generic_enable = true;
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	80 93 dd 23 	sts	0x23DD, r24
	return true;
}
    2300:	08 95       	ret

00002302 <main_generic_disable>:

void main_generic_disable(void)
{
	main_b_generic_enable = false;
    2302:	10 92 dd 23 	sts	0x23DD, r1
    2306:	08 95       	ret

00002308 <main_hid_set_feature>:
}

void main_hid_set_feature(uint8_t* report)
{
	if (report[0] == 0xAA && report[1] == 0x55
    2308:	fc 01       	movw	r30, r24
    230a:	20 81       	ld	r18, Z
    230c:	2a 3a       	cpi	r18, 0xAA	; 170
    230e:	69 f4       	brne	.+26     	; 0x232a <main_hid_set_feature+0x22>
    2310:	21 81       	ldd	r18, Z+1	; 0x01
    2312:	25 35       	cpi	r18, 0x55	; 85
    2314:	51 f4       	brne	.+20     	; 0x232a <main_hid_set_feature+0x22>
			&& report[2] == 0xAA && report[3] == 0x55) {
    2316:	22 81       	ldd	r18, Z+2	; 0x02
    2318:	2a 3a       	cpi	r18, 0xAA	; 170
    231a:	39 f4       	brne	.+14     	; 0x232a <main_hid_set_feature+0x22>
    231c:	83 81       	ldd	r24, Z+3	; 0x03
    231e:	85 35       	cpi	r24, 0x55	; 85
    2320:	21 f4       	brne	.+8      	; 0x232a <main_hid_set_feature+0x22>
		// Disconnect USB Device
		udc_stop();
    2322:	0e 94 23 07 	call	0xe46	; 0xe46 <udc_stop>
		ui_powerdown();
    2326:	0c 94 5f 01 	jmp	0x2be	; 0x2be <ui_powerdown>
    232a:	08 95       	ret

0000232c <__udivmodhi4>:
    232c:	aa 1b       	sub	r26, r26
    232e:	bb 1b       	sub	r27, r27
    2330:	51 e1       	ldi	r21, 0x11	; 17
    2332:	07 c0       	rjmp	.+14     	; 0x2342 <__udivmodhi4_ep>

00002334 <__udivmodhi4_loop>:
    2334:	aa 1f       	adc	r26, r26
    2336:	bb 1f       	adc	r27, r27
    2338:	a6 17       	cp	r26, r22
    233a:	b7 07       	cpc	r27, r23
    233c:	10 f0       	brcs	.+4      	; 0x2342 <__udivmodhi4_ep>
    233e:	a6 1b       	sub	r26, r22
    2340:	b7 0b       	sbc	r27, r23

00002342 <__udivmodhi4_ep>:
    2342:	88 1f       	adc	r24, r24
    2344:	99 1f       	adc	r25, r25
    2346:	5a 95       	dec	r21
    2348:	a9 f7       	brne	.-22     	; 0x2334 <__udivmodhi4_loop>
    234a:	80 95       	com	r24
    234c:	90 95       	com	r25
    234e:	bc 01       	movw	r22, r24
    2350:	cd 01       	movw	r24, r26
    2352:	08 95       	ret

00002354 <__tablejump2__>:
    2354:	ee 0f       	add	r30, r30
    2356:	ff 1f       	adc	r31, r31

00002358 <__tablejump__>:
    2358:	05 90       	lpm	r0, Z+
    235a:	f4 91       	lpm	r31, Z
    235c:	e0 2d       	mov	r30, r0
    235e:	19 94       	eijmp

00002360 <memcpy>:
    2360:	fb 01       	movw	r30, r22
    2362:	dc 01       	movw	r26, r24
    2364:	02 c0       	rjmp	.+4      	; 0x236a <memcpy+0xa>
    2366:	01 90       	ld	r0, Z+
    2368:	0d 92       	st	X+, r0
    236a:	41 50       	subi	r20, 0x01	; 1
    236c:	50 40       	sbci	r21, 0x00	; 0
    236e:	d8 f7       	brcc	.-10     	; 0x2366 <memcpy+0x6>
    2370:	08 95       	ret

00002372 <memset>:
    2372:	dc 01       	movw	r26, r24
    2374:	01 c0       	rjmp	.+2      	; 0x2378 <memset+0x6>
    2376:	6d 93       	st	X+, r22
    2378:	41 50       	subi	r20, 0x01	; 1
    237a:	50 40       	sbci	r21, 0x00	; 0
    237c:	e0 f7       	brcc	.-8      	; 0x2376 <memset+0x4>
    237e:	08 95       	ret

00002380 <strcmp>:
    2380:	fb 01       	movw	r30, r22
    2382:	dc 01       	movw	r26, r24
    2384:	8d 91       	ld	r24, X+
    2386:	01 90       	ld	r0, Z+
    2388:	80 19       	sub	r24, r0
    238a:	01 10       	cpse	r0, r1
    238c:	d9 f3       	breq	.-10     	; 0x2384 <strcmp+0x4>
    238e:	99 0b       	sbc	r25, r25
    2390:	08 95       	ret

00002392 <strcpy>:
    2392:	fb 01       	movw	r30, r22
    2394:	dc 01       	movw	r26, r24
    2396:	01 90       	ld	r0, Z+
    2398:	0d 92       	st	X+, r0
    239a:	00 20       	and	r0, r0
    239c:	e1 f7       	brne	.-8      	; 0x2396 <strcpy+0x4>
    239e:	08 95       	ret

000023a0 <_exit>:
    23a0:	f8 94       	cli

000023a2 <__stop_program>:
    23a2:	ff cf       	rjmp	.-2      	; 0x23a2 <__stop_program>
