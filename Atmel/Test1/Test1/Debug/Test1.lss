
Test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d0  00802000  000022ee  00002382  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000724  008020d0  008020d0  00002454  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002452  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000488  00000000  00000000  00002488  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000092b9  00000000  00000000  00002910  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001e09  00000000  00000000  0000bbc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00006e77  00000000  00000000  0000d9d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000bc8  00000000  00000000  0001484c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0002eafb  00000000  00000000  00015414  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000389a  00000000  00000000  00043f0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000458  00000000  00000000  000477b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000b469  00000000  00000000  00047c08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
       2:	00 00       	nop
       4:	23 c1       	rjmp	.+582    	; 0x24c <__bad_interrupt>
       6:	00 00       	nop
       8:	21 c1       	rjmp	.+578    	; 0x24c <__bad_interrupt>
       a:	00 00       	nop
       c:	1f c1       	rjmp	.+574    	; 0x24c <__bad_interrupt>
       e:	00 00       	nop
      10:	1d c1       	rjmp	.+570    	; 0x24c <__bad_interrupt>
      12:	00 00       	nop
      14:	1b c1       	rjmp	.+566    	; 0x24c <__bad_interrupt>
      16:	00 00       	nop
      18:	19 c1       	rjmp	.+562    	; 0x24c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	17 c1       	rjmp	.+558    	; 0x24c <__bad_interrupt>
      1e:	00 00       	nop
      20:	15 c1       	rjmp	.+554    	; 0x24c <__bad_interrupt>
      22:	00 00       	nop
      24:	13 c1       	rjmp	.+550    	; 0x24c <__bad_interrupt>
      26:	00 00       	nop
      28:	11 c1       	rjmp	.+546    	; 0x24c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0f c1       	rjmp	.+542    	; 0x24c <__bad_interrupt>
      2e:	00 00       	nop
      30:	0d c1       	rjmp	.+538    	; 0x24c <__bad_interrupt>
      32:	00 00       	nop
      34:	0b c1       	rjmp	.+534    	; 0x24c <__bad_interrupt>
      36:	00 00       	nop
      38:	09 c1       	rjmp	.+530    	; 0x24c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	07 c1       	rjmp	.+526    	; 0x24c <__bad_interrupt>
      3e:	00 00       	nop
      40:	05 c1       	rjmp	.+522    	; 0x24c <__bad_interrupt>
      42:	00 00       	nop
      44:	03 c1       	rjmp	.+518    	; 0x24c <__bad_interrupt>
      46:	00 00       	nop
      48:	01 c1       	rjmp	.+514    	; 0x24c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ff c0       	rjmp	.+510    	; 0x24c <__bad_interrupt>
      4e:	00 00       	nop
      50:	fd c0       	rjmp	.+506    	; 0x24c <__bad_interrupt>
      52:	00 00       	nop
      54:	fb c0       	rjmp	.+502    	; 0x24c <__bad_interrupt>
      56:	00 00       	nop
      58:	f9 c0       	rjmp	.+498    	; 0x24c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f7 c0       	rjmp	.+494    	; 0x24c <__bad_interrupt>
      5e:	00 00       	nop
      60:	f5 c0       	rjmp	.+490    	; 0x24c <__bad_interrupt>
      62:	00 00       	nop
      64:	f3 c0       	rjmp	.+486    	; 0x24c <__bad_interrupt>
      66:	00 00       	nop
      68:	f1 c0       	rjmp	.+482    	; 0x24c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ef c0       	rjmp	.+478    	; 0x24c <__bad_interrupt>
      6e:	00 00       	nop
      70:	ed c0       	rjmp	.+474    	; 0x24c <__bad_interrupt>
      72:	00 00       	nop
      74:	eb c0       	rjmp	.+470    	; 0x24c <__bad_interrupt>
      76:	00 00       	nop
      78:	e9 c0       	rjmp	.+466    	; 0x24c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e7 c0       	rjmp	.+462    	; 0x24c <__bad_interrupt>
      7e:	00 00       	nop
      80:	e5 c0       	rjmp	.+458    	; 0x24c <__bad_interrupt>
      82:	00 00       	nop
      84:	e3 c0       	rjmp	.+454    	; 0x24c <__bad_interrupt>
      86:	00 00       	nop
      88:	36 c1       	rjmp	.+620    	; 0x2f6 <__vector_34>
      8a:	00 00       	nop
      8c:	df c0       	rjmp	.+446    	; 0x24c <__bad_interrupt>
      8e:	00 00       	nop
      90:	dd c0       	rjmp	.+442    	; 0x24c <__bad_interrupt>
      92:	00 00       	nop
      94:	db c0       	rjmp	.+438    	; 0x24c <__bad_interrupt>
      96:	00 00       	nop
      98:	d9 c0       	rjmp	.+434    	; 0x24c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d7 c0       	rjmp	.+430    	; 0x24c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d5 c0       	rjmp	.+426    	; 0x24c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d3 c0       	rjmp	.+422    	; 0x24c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d1 c0       	rjmp	.+418    	; 0x24c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cf c0       	rjmp	.+414    	; 0x24c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cd c0       	rjmp	.+410    	; 0x24c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cb c0       	rjmp	.+406    	; 0x24c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c9 c0       	rjmp	.+402    	; 0x24c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c7 c0       	rjmp	.+398    	; 0x24c <__bad_interrupt>
      be:	00 00       	nop
      c0:	c5 c0       	rjmp	.+394    	; 0x24c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c3 c0       	rjmp	.+390    	; 0x24c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c1 c0       	rjmp	.+386    	; 0x24c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bf c0       	rjmp	.+382    	; 0x24c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	bd c0       	rjmp	.+378    	; 0x24c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	bb c0       	rjmp	.+374    	; 0x24c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b9 c0       	rjmp	.+370    	; 0x24c <__bad_interrupt>
      da:	00 00       	nop
      dc:	b7 c0       	rjmp	.+366    	; 0x24c <__bad_interrupt>
      de:	00 00       	nop
      e0:	b5 c0       	rjmp	.+362    	; 0x24c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b3 c0       	rjmp	.+358    	; 0x24c <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b1 c0       	rjmp	.+354    	; 0x24c <__bad_interrupt>
      ea:	00 00       	nop
      ec:	af c0       	rjmp	.+350    	; 0x24c <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ad c0       	rjmp	.+346    	; 0x24c <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ab c0       	rjmp	.+342    	; 0x24c <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a9 c0       	rjmp	.+338    	; 0x24c <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a7 c0       	rjmp	.+334    	; 0x24c <__bad_interrupt>
      fe:	00 00       	nop
     100:	a5 c0       	rjmp	.+330    	; 0x24c <__bad_interrupt>
     102:	00 00       	nop
     104:	a3 c0       	rjmp	.+326    	; 0x24c <__bad_interrupt>
     106:	00 00       	nop
     108:	a1 c0       	rjmp	.+322    	; 0x24c <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9f c0       	rjmp	.+318    	; 0x24c <__bad_interrupt>
     10e:	00 00       	nop
     110:	9d c0       	rjmp	.+314    	; 0x24c <__bad_interrupt>
     112:	00 00       	nop
     114:	9b c0       	rjmp	.+310    	; 0x24c <__bad_interrupt>
     116:	00 00       	nop
     118:	99 c0       	rjmp	.+306    	; 0x24c <__bad_interrupt>
     11a:	00 00       	nop
     11c:	97 c0       	rjmp	.+302    	; 0x24c <__bad_interrupt>
     11e:	00 00       	nop
     120:	95 c0       	rjmp	.+298    	; 0x24c <__bad_interrupt>
     122:	00 00       	nop
     124:	93 c0       	rjmp	.+294    	; 0x24c <__bad_interrupt>
     126:	00 00       	nop
     128:	91 c0       	rjmp	.+290    	; 0x24c <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8f c0       	rjmp	.+286    	; 0x24c <__bad_interrupt>
     12e:	00 00       	nop
     130:	8d c0       	rjmp	.+282    	; 0x24c <__bad_interrupt>
     132:	00 00       	nop
     134:	8b c0       	rjmp	.+278    	; 0x24c <__bad_interrupt>
     136:	00 00       	nop
     138:	89 c0       	rjmp	.+274    	; 0x24c <__bad_interrupt>
     13a:	00 00       	nop
     13c:	87 c0       	rjmp	.+270    	; 0x24c <__bad_interrupt>
     13e:	00 00       	nop
     140:	85 c0       	rjmp	.+266    	; 0x24c <__bad_interrupt>
     142:	00 00       	nop
     144:	83 c0       	rjmp	.+262    	; 0x24c <__bad_interrupt>
     146:	00 00       	nop
     148:	81 c0       	rjmp	.+258    	; 0x24c <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7f c0       	rjmp	.+254    	; 0x24c <__bad_interrupt>
     14e:	00 00       	nop
     150:	7d c0       	rjmp	.+250    	; 0x24c <__bad_interrupt>
     152:	00 00       	nop
     154:	7b c0       	rjmp	.+246    	; 0x24c <__bad_interrupt>
     156:	00 00       	nop
     158:	79 c0       	rjmp	.+242    	; 0x24c <__bad_interrupt>
     15a:	00 00       	nop
     15c:	77 c0       	rjmp	.+238    	; 0x24c <__bad_interrupt>
     15e:	00 00       	nop
     160:	75 c0       	rjmp	.+234    	; 0x24c <__bad_interrupt>
     162:	00 00       	nop
     164:	73 c0       	rjmp	.+230    	; 0x24c <__bad_interrupt>
     166:	00 00       	nop
     168:	71 c0       	rjmp	.+226    	; 0x24c <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6f c0       	rjmp	.+222    	; 0x24c <__bad_interrupt>
     16e:	00 00       	nop
     170:	6d c0       	rjmp	.+218    	; 0x24c <__bad_interrupt>
     172:	00 00       	nop
     174:	6b c0       	rjmp	.+214    	; 0x24c <__bad_interrupt>
     176:	00 00       	nop
     178:	69 c0       	rjmp	.+210    	; 0x24c <__bad_interrupt>
     17a:	00 00       	nop
     17c:	67 c0       	rjmp	.+206    	; 0x24c <__bad_interrupt>
     17e:	00 00       	nop
     180:	65 c0       	rjmp	.+202    	; 0x24c <__bad_interrupt>
     182:	00 00       	nop
     184:	63 c0       	rjmp	.+198    	; 0x24c <__bad_interrupt>
     186:	00 00       	nop
     188:	61 c0       	rjmp	.+194    	; 0x24c <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5f c0       	rjmp	.+190    	; 0x24c <__bad_interrupt>
     18e:	00 00       	nop
     190:	5d c0       	rjmp	.+186    	; 0x24c <__bad_interrupt>
     192:	00 00       	nop
     194:	5b c0       	rjmp	.+182    	; 0x24c <__bad_interrupt>
     196:	00 00       	nop
     198:	59 c0       	rjmp	.+178    	; 0x24c <__bad_interrupt>
     19a:	00 00       	nop
     19c:	57 c0       	rjmp	.+174    	; 0x24c <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	55 c0       	rjmp	.+170    	; 0x24c <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	53 c0       	rjmp	.+166    	; 0x24c <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	51 c0       	rjmp	.+162    	; 0x24c <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4f c0       	rjmp	.+158    	; 0x24c <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	4d c0       	rjmp	.+154    	; 0x24c <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	4b c0       	rjmp	.+150    	; 0x24c <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	49 c0       	rjmp	.+146    	; 0x24c <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	47 c0       	rjmp	.+142    	; 0x24c <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	45 c0       	rjmp	.+138    	; 0x24c <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	43 c0       	rjmp	.+134    	; 0x24c <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	41 c0       	rjmp	.+130    	; 0x24c <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3f c0       	rjmp	.+126    	; 0x24c <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	3d c0       	rjmp	.+122    	; 0x24c <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	3b c0       	rjmp	.+118    	; 0x24c <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	39 c0       	rjmp	.+114    	; 0x24c <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	37 c0       	rjmp	.+110    	; 0x24c <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	35 c0       	rjmp	.+106    	; 0x24c <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	33 c0       	rjmp	.+102    	; 0x24c <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	31 c0       	rjmp	.+98     	; 0x24c <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2f c0       	rjmp	.+94     	; 0x24c <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2d c0       	rjmp	.+90     	; 0x24c <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 1d 0f 	jmp	0x1e3a	; 0x1e3a <__vector_125>
     1f8:	0c 94 da 0f 	jmp	0x1fb4	; 0x1fb4 <__vector_126>
     1fc:	e6 0b       	sbc	r30, r22
     1fe:	c7 0b       	sbc	r28, r23
     200:	cc 0b       	sbc	r28, r28
     202:	d1 0b       	sbc	r29, r17
     204:	d6 0b       	sbc	r29, r22
     206:	da 0b       	sbc	r29, r26
     208:	df 0b       	sbc	r29, r31

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	cd bf       	out	0x3d, r28	; 61
     212:	df e3       	ldi	r29, 0x3F	; 63
     214:	de bf       	out	0x3e, r29	; 62
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0c bf       	out	0x3c, r16	; 60

0000021a <__do_copy_data>:
     21a:	10 e2       	ldi	r17, 0x20	; 32
     21c:	a0 e0       	ldi	r26, 0x00	; 0
     21e:	b0 e2       	ldi	r27, 0x20	; 32
     220:	ee ee       	ldi	r30, 0xEE	; 238
     222:	f2 e2       	ldi	r31, 0x22	; 34
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	0b bf       	out	0x3b, r16	; 59
     228:	02 c0       	rjmp	.+4      	; 0x22e <__do_copy_data+0x14>
     22a:	07 90       	elpm	r0, Z+
     22c:	0d 92       	st	X+, r0
     22e:	a0 3d       	cpi	r26, 0xD0	; 208
     230:	b1 07       	cpc	r27, r17
     232:	d9 f7       	brne	.-10     	; 0x22a <__do_copy_data+0x10>

00000234 <__do_clear_bss>:
     234:	27 e2       	ldi	r18, 0x27	; 39
     236:	a0 ed       	ldi	r26, 0xD0	; 208
     238:	b0 e2       	ldi	r27, 0x20	; 32
     23a:	01 c0       	rjmp	.+2      	; 0x23e <.do_clear_bss_start>

0000023c <.do_clear_bss_loop>:
     23c:	1d 92       	st	X+, r1

0000023e <.do_clear_bss_start>:
     23e:	a4 3f       	cpi	r26, 0xF4	; 244
     240:	b2 07       	cpc	r27, r18
     242:	e1 f7       	brne	.-8      	; 0x23c <.do_clear_bss_loop>
     244:	0e 94 c6 10 	call	0x218c	; 0x218c <main>
     248:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <_exit>

0000024c <__bad_interrupt>:
     24c:	d9 ce       	rjmp	.-590    	; 0x0 <__vectors>

0000024e <ui_init>:
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     24e:	e0 e6       	ldi	r30, 0x60	; 96
     250:	f6 e0       	ldi	r31, 0x06	; 6
     252:	22 e0       	ldi	r18, 0x02	; 2
     254:	21 83       	std	Z+1, r18	; 0x01
     256:	30 e1       	ldi	r19, 0x10	; 16
     258:	31 83       	std	Z+1, r19	; 0x01
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	81 83       	std	Z+1, r24	; 0x01
     25e:	90 e2       	ldi	r25, 0x20	; 32
     260:	91 83       	std	Z+1, r25	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
     262:	a0 e4       	ldi	r26, 0x40	; 64
     264:	b6 e0       	ldi	r27, 0x06	; 6
     266:	12 96       	adiw	r26, 0x02	; 2
     268:	8c 93       	st	X, r24
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     26a:	a0 ea       	ldi	r26, 0xA0	; 160
     26c:	b6 e0       	ldi	r27, 0x06	; 6
     26e:	15 96       	adiw	r26, 0x05	; 5
     270:	8c 93       	st	X, r24
     272:	15 97       	sbiw	r26, 0x05	; 5
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     274:	16 96       	adiw	r26, 0x06	; 6
     276:	2c 93       	st	X, r18
     278:	16 97       	sbiw	r26, 0x06	; 6
     27a:	44 e0       	ldi	r20, 0x04	; 4
     27c:	16 96       	adiw	r26, 0x06	; 6
     27e:	4c 93       	st	X, r20
     280:	16 97       	sbiw	r26, 0x06	; 6
     282:	48 e0       	ldi	r20, 0x08	; 8
     284:	16 96       	adiw	r26, 0x06	; 6
     286:	4c 93       	st	X, r20
     288:	16 97       	sbiw	r26, 0x06	; 6
     28a:	16 96       	adiw	r26, 0x06	; 6
     28c:	3c 93       	st	X, r19
     28e:	16 97       	sbiw	r26, 0x06	; 6
     290:	16 96       	adiw	r26, 0x06	; 6
     292:	9c 93       	st	X, r25
     294:	16 97       	sbiw	r26, 0x06	; 6
     296:	40 e4       	ldi	r20, 0x40	; 64
     298:	16 96       	adiw	r26, 0x06	; 6
     29a:	4c 93       	st	X, r20
     29c:	16 97       	sbiw	r26, 0x06	; 6
     29e:	40 e8       	ldi	r20, 0x80	; 128
     2a0:	16 96       	adiw	r26, 0x06	; 6
     2a2:	4c 93       	st	X, r20
     2a4:	86 83       	std	Z+6, r24	; 0x06
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     2a6:	35 83       	std	Z+5, r19	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     2a8:	26 83       	std	Z+6, r18	; 0x06
     2aa:	96 83       	std	Z+6, r25	; 0x06
     2ac:	08 95       	ret

000002ae <ui_powerdown>:
	ioport_set_pin_level(TCLK, LOW);
	
}

void ui_powerdown(void)
{
     2ae:	08 95       	ret

000002b0 <ui_wakeup_enable>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     2b0:	40 e0       	ldi	r20, 0x00	; 0
     2b2:	58 e1       	ldi	r21, 0x18	; 24
     2b4:	61 e0       	ldi	r22, 0x01	; 1
     2b6:	80 e2       	ldi	r24, 0x20	; 32
     2b8:	96 e0       	ldi	r25, 0x06	; 6
     2ba:	ee d2       	rcall	.+1500   	; 0x898 <ioport_configure_port_pin>
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	58 e1       	ldi	r21, 0x18	; 24
     2c0:	62 e0       	ldi	r22, 0x02	; 2
     2c2:	80 e2       	ldi	r24, 0x20	; 32
     2c4:	96 e0       	ldi	r25, 0x06	; 6
     2c6:	e8 d2       	rcall	.+1488   	; 0x898 <ioport_configure_port_pin>
     2c8:	40 e0       	ldi	r20, 0x00	; 0
     2ca:	58 e1       	ldi	r21, 0x18	; 24
     2cc:	64 e0       	ldi	r22, 0x04	; 4
     2ce:	80 e2       	ldi	r24, 0x20	; 32
     2d0:	96 e0       	ldi	r25, 0x06	; 6
     2d2:	e2 d2       	rcall	.+1476   	; 0x898 <ioport_configure_port_pin>
     2d4:	40 e0       	ldi	r20, 0x00	; 0
     2d6:	58 e1       	ldi	r21, 0x18	; 24
     2d8:	68 e0       	ldi	r22, 0x08	; 8
     2da:	80 e2       	ldi	r24, 0x20	; 32
     2dc:	96 e0       	ldi	r25, 0x06	; 6
     2de:	dc d2       	rcall	.+1464   	; 0x898 <ioport_configure_port_pin>
	ioport_configure_pin(GPIO_PUSH_BUTTON_2,
			IOPORT_DIR_INPUT | IOPORT_PULL_UP);
	ioport_configure_pin(GPIO_PUSH_BUTTON_3,
			IOPORT_DIR_INPUT | IOPORT_PULL_UP);
	port = ioport_pin_to_port(GPIO_PUSH_BUTTON_0);
	port->INT0MASK = 0x0F;
     2e0:	e0 e2       	ldi	r30, 0x20	; 32
     2e2:	f6 e0       	ldi	r31, 0x06	; 6
     2e4:	8f e0       	ldi	r24, 0x0F	; 15
     2e6:	82 87       	std	Z+10, r24	; 0x0a
	port->INTCTRL = PORT_INT0LVL_LO_gc;
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	81 87       	std	Z+9, r24	; 0x09
     2ec:	08 95       	ret

000002ee <ui_wakeup_disable>:

void ui_wakeup_disable(void)
{
	PORT_t *port;
	port = ioport_pin_to_port(GPIO_PUSH_BUTTON_0);
	port->INT0MASK = 0x00;
     2ee:	e0 e2       	ldi	r30, 0x20	; 32
     2f0:	f6 e0       	ldi	r31, 0x06	; 6
     2f2:	12 86       	std	Z+10, r1	; 0x0a
     2f4:	08 95       	ret

000002f6 <__vector_34>:
 * Note:
 * This interrupt is enable when the USB host enable remotewakeup feature
 * This interrupt wakeup the CPU if this one is in idle mode
 */
ISR(PORTB_INT0_vect)
{
     2f6:	1f 92       	push	r1
     2f8:	0f 92       	push	r0
     2fa:	0f b6       	in	r0, 0x3f	; 63
     2fc:	0f 92       	push	r0
     2fe:	11 24       	eor	r1, r1
     300:	0b b6       	in	r0, 0x3b	; 59
     302:	0f 92       	push	r0
     304:	2f 93       	push	r18
     306:	3f 93       	push	r19
     308:	4f 93       	push	r20
     30a:	5f 93       	push	r21
     30c:	6f 93       	push	r22
     30e:	7f 93       	push	r23
     310:	8f 93       	push	r24
     312:	9f 93       	push	r25
     314:	af 93       	push	r26
     316:	bf 93       	push	r27
     318:	ef 93       	push	r30
     31a:	ff 93       	push	r31
	PORT_t *port;
	port = ioport_pin_to_port(GPIO_PUSH_BUTTON_0);
	port->INTFLAGS = 0x01; // Ack interrupt
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	e0 e2       	ldi	r30, 0x20	; 32
     320:	f6 e0       	ldi	r31, 0x06	; 6
     322:	84 87       	std	Z+12, r24	; 0x0c
/*! \brief The USB driver sends a resume signal called \e "Upstream Resume"
 * This is authorized only when the remote wakeup feature is enabled by host.
 */
static inline void udc_remotewakeup(void)
{
	udd_send_remotewakeup();
     324:	0e 94 76 0d 	call	0x1aec	; 0x1aec <udd_send_remotewakeup>
	// It is a wakeup then send wakeup USB
	udc_remotewakeup();
}
     328:	ff 91       	pop	r31
     32a:	ef 91       	pop	r30
     32c:	bf 91       	pop	r27
     32e:	af 91       	pop	r26
     330:	9f 91       	pop	r25
     332:	8f 91       	pop	r24
     334:	7f 91       	pop	r23
     336:	6f 91       	pop	r22
     338:	5f 91       	pop	r21
     33a:	4f 91       	pop	r20
     33c:	3f 91       	pop	r19
     33e:	2f 91       	pop	r18
     340:	0f 90       	pop	r0
     342:	0b be       	out	0x3b, r0	; 59
     344:	0f 90       	pop	r0
     346:	0f be       	out	0x3f, r0	; 63
     348:	0f 90       	pop	r0
     34a:	1f 90       	pop	r1
     34c:	18 95       	reti

0000034e <ui_wakeup>:

void ui_wakeup(void)
{
     34e:	08 95       	ret

00000350 <ui_process>:
	//LED_On(LED7_GPIO);
}

void ui_process(uint16_t framenumber )
{
	if (done > 0 )
     350:	80 91 d0 20 	lds	r24, 0x20D0
     354:	90 91 d1 20 	lds	r25, 0x20D1
     358:	18 16       	cp	r1, r24
     35a:	19 06       	cpc	r1, r25
     35c:	6c f4       	brge	.+26     	; 0x378 <ui_process+0x28>
	{
		udi_hid_generic_send_report_in(hid_report);
     35e:	8e ed       	ldi	r24, 0xDE	; 222
     360:	93 e2       	ldi	r25, 0x23	; 35
     362:	2f d3       	rcall	.+1630   	; 0x9c2 <udi_hid_generic_send_report_in>
		strcpy((char *)prv_report, (char *)hid_report);
     364:	6e ed       	ldi	r22, 0xDE	; 222
     366:	73 e2       	ldi	r23, 0x23	; 35
     368:	8e ed       	ldi	r24, 0xDE	; 222
     36a:	95 e2       	ldi	r25, 0x25	; 37
     36c:	0e 94 6e 11 	call	0x22dc	; 0x22dc <strcpy>
		done = 0;
     370:	10 92 d0 20 	sts	0x20D0, r1
     374:	10 92 d1 20 	sts	0x20D1, r1
     378:	08 95       	ret

0000037a <delay>:

void delay(int time_in_ms)
{
	int i,k,l;
	
	for (i=0;i<= time_in_ms; i++)
     37a:	99 23       	and	r25, r25
     37c:	e4 f0       	brlt	.+56     	; 0x3b6 <delay+0x3c>
     37e:	60 e0       	ldi	r22, 0x00	; 0
     380:	70 e0       	ldi	r23, 0x00	; 0
	}
	
}

void delay(int time_in_ms)
{
     382:	b5 e6       	ldi	r27, 0x65	; 101
     384:	a0 e0       	ldi	r26, 0x00	; 0
     386:	f9 ee       	ldi	r31, 0xE9	; 233
     388:	e3 e0       	ldi	r30, 0x03	; 3
     38a:	12 c0       	rjmp	.+36     	; 0x3b0 <delay+0x36>
     38c:	21 50       	subi	r18, 0x01	; 1
     38e:	31 09       	sbc	r19, r1
	int i,k,l;
	
	for (i=0;i<= time_in_ms; i++)
	{
		for (k=0; k <= 100; k++ )
		for (l=0; l <= 1000; l++ );
     390:	21 15       	cp	r18, r1
     392:	31 05       	cpc	r19, r1
     394:	d9 f7       	brne	.-10     	; 0x38c <delay+0x12>
     396:	41 50       	subi	r20, 0x01	; 1
     398:	51 09       	sbc	r21, r1
{
	int i,k,l;
	
	for (i=0;i<= time_in_ms; i++)
	{
		for (k=0; k <= 100; k++ )
     39a:	41 15       	cp	r20, r1
     39c:	51 05       	cpc	r21, r1
     39e:	19 f0       	breq	.+6      	; 0x3a6 <delay+0x2c>
	}
	
}

void delay(int time_in_ms)
{
     3a0:	2f 2f       	mov	r18, r31
     3a2:	3e 2f       	mov	r19, r30
     3a4:	f3 cf       	rjmp	.-26     	; 0x38c <delay+0x12>
	int i,k,l;
	
	for (i=0;i<= time_in_ms; i++)
     3a6:	6f 5f       	subi	r22, 0xFF	; 255
     3a8:	7f 4f       	sbci	r23, 0xFF	; 255
     3aa:	86 17       	cp	r24, r22
     3ac:	97 07       	cpc	r25, r23
     3ae:	1c f0       	brlt	.+6      	; 0x3b6 <delay+0x3c>
	}
	
}

void delay(int time_in_ms)
{
     3b0:	4b 2f       	mov	r20, r27
     3b2:	5a 2f       	mov	r21, r26
     3b4:	f5 cf       	rjmp	.-22     	; 0x3a0 <delay+0x26>
     3b6:	08 95       	ret

000003b8 <ui_led_change>:
	}
	
}
                                                                                                                                                                                                                           
void ui_led_change(uint8_t *report)
{
     3b8:	3f 92       	push	r3
     3ba:	4f 92       	push	r4
     3bc:	5f 92       	push	r5
     3be:	6f 92       	push	r6
     3c0:	7f 92       	push	r7
     3c2:	8f 92       	push	r8
     3c4:	9f 92       	push	r9
     3c6:	af 92       	push	r10
     3c8:	bf 92       	push	r11
     3ca:	cf 92       	push	r12
     3cc:	df 92       	push	r13
     3ce:	ef 92       	push	r14
     3d0:	ff 92       	push	r15
     3d2:	0f 93       	push	r16
     3d4:	1f 93       	push	r17
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	ec 01       	movw	r28, r24
     3dc:	80 e1       	ldi	r24, 0x10	; 16
     3de:	e0 e6       	ldi	r30, 0x60	; 96
     3e0:	f6 e0       	ldi	r31, 0x06	; 6
     3e2:	86 83       	std	Z+6, r24	; 0x06
	int out_pins = 0, line = 0;
	
	ioport_set_pin_level(TRST, LOW);
	
	if (strcmp(state,"IDL") == 0)
     3e4:	60 ec       	ldi	r22, 0xC0	; 192
     3e6:	70 e2       	ldi	r23, 0x20	; 32
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	90 e2       	ldi	r25, 0x20	; 32
     3ec:	0e 94 65 11 	call	0x22ca	; 0x22ca <strcmp>
     3f0:	89 2b       	or	r24, r25
     3f2:	09 f0       	breq	.+2      	; 0x3f6 <ui_led_change+0x3e>
     3f4:	86 c0       	rjmp	.+268    	; 0x502 <ui_led_change+0x14a>
	{
		if (report[0] == 'L')
     3f6:	88 81       	ld	r24, Y
     3f8:	8c 34       	cpi	r24, 0x4C	; 76
     3fa:	71 f5       	brne	.+92     	; 0x458 <ui_led_change+0xa0>
		{
			strcpy(state,"LOD");
     3fc:	8c e4       	ldi	r24, 0x4C	; 76
     3fe:	9f e4       	ldi	r25, 0x4F	; 79
     400:	a4 e4       	ldi	r26, 0x44	; 68
     402:	b0 e0       	ldi	r27, 0x00	; 0
     404:	80 93 00 20 	sts	0x2000, r24
     408:	90 93 01 20 	sts	0x2001, r25
     40c:	a0 93 02 20 	sts	0x2002, r26
     410:	b0 93 03 20 	sts	0x2003, r27
     414:	c0 e6       	ldi	r28, 0x60	; 96
     416:	d6 e0       	ldi	r29, 0x06	; 6
     418:	80 e1       	ldi	r24, 0x10	; 16
     41a:	8e 83       	std	Y+6, r24	; 0x06
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     41c:	02 e0       	ldi	r16, 0x02	; 2
     41e:	0d 83       	std	Y+5, r16	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     420:	10 e2       	ldi	r17, 0x20	; 32
     422:	1e 83       	std	Y+6, r17	; 0x06
			ioport_set_pin_level(TRST, LOW);
			ioport_set_pin_level(TMS, HIGH);
			ioport_set_pin_level(TCLK, LOW);
			delay(5);
     424:	85 e0       	ldi	r24, 0x05	; 5
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	a8 df       	rcall	.-176    	; 0x37a <delay>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     42a:	1d 83       	std	Y+5, r17	; 0x05
			ioport_set_pin_level(TCLK, HIGH);
			delay(5);
     42c:	85 e0       	ldi	r24, 0x05	; 5
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	a4 df       	rcall	.-184    	; 0x37a <delay>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     432:	0e 83       	std	Y+6, r16	; 0x06
     434:	1e 83       	std	Y+6, r17	; 0x06
			ioport_set_pin_level(TMS, LOW);
			ioport_set_pin_level(TCLK, LOW);
			delay(5);
     436:	85 e0       	ldi	r24, 0x05	; 5
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	9f df       	rcall	.-194    	; 0x37a <delay>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     43c:	1d 83       	std	Y+5, r17	; 0x05
			ioport_set_pin_level(TCLK, HIGH);
			delay(5);
     43e:	85 e0       	ldi	r24, 0x05	; 5
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	9b df       	rcall	.-202    	; 0x37a <delay>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     444:	0e 83       	std	Y+6, r16	; 0x06
     446:	1e 83       	std	Y+6, r17	; 0x06
			ioport_set_pin_level(TMS, LOW);
			ioport_set_pin_level(TCLK, LOW);
			delay(5);
     448:	85 e0       	ldi	r24, 0x05	; 5
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	96 df       	rcall	.-212    	; 0x37a <delay>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     44e:	1d 83       	std	Y+5, r17	; 0x05
			ioport_set_pin_level(TCLK, HIGH);
			delay(5);
     450:	85 e0       	ldi	r24, 0x05	; 5
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	92 df       	rcall	.-220    	; 0x37a <delay>
     456:	4d c1       	rjmp	.+666    	; 0x6f2 <ui_led_change+0x33a>
		}
		else if (report[0] == 'A')
     458:	81 34       	cpi	r24, 0x41	; 65
     45a:	11 f5       	brne	.+68     	; 0x4a0 <ui_led_change+0xe8>
		{
			strcpy(state,"IDL");
     45c:	89 e4       	ldi	r24, 0x49	; 73
     45e:	94 e4       	ldi	r25, 0x44	; 68
     460:	ac e4       	ldi	r26, 0x4C	; 76
     462:	b0 e0       	ldi	r27, 0x00	; 0
     464:	80 93 00 20 	sts	0x2000, r24
     468:	90 93 01 20 	sts	0x2001, r25
     46c:	a0 93 02 20 	sts	0x2002, r26
     470:	b0 93 03 20 	sts	0x2003, r27
     474:	c0 e6       	ldi	r28, 0x60	; 96
     476:	d6 e0       	ldi	r29, 0x06	; 6
     478:	82 e0       	ldi	r24, 0x02	; 2
     47a:	8d 83       	std	Y+5, r24	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     47c:	10 e2       	ldi	r17, 0x20	; 32
     47e:	1e 83       	std	Y+6, r17	; 0x06
			ioport_set_pin_level(TMS, HIGH);
			ioport_set_pin_level(TCLK, LOW);
			delay(5);
     480:	85 e0       	ldi	r24, 0x05	; 5
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	7a df       	rcall	.-268    	; 0x37a <delay>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     486:	1d 83       	std	Y+5, r17	; 0x05
			ioport_set_pin_level(TCLK, HIGH);
			delay(5);
     488:	85 e0       	ldi	r24, 0x05	; 5
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	76 df       	rcall	.-276    	; 0x37a <delay>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     48e:	1e 83       	std	Y+6, r17	; 0x06
			ioport_set_pin_level(TCLK, LOW);
			delay(5);
     490:	85 e0       	ldi	r24, 0x05	; 5
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	72 df       	rcall	.-284    	; 0x37a <delay>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     496:	1d 83       	std	Y+5, r17	; 0x05
			ioport_set_pin_level(TCLK, HIGH);
			delay(5);
     498:	85 e0       	ldi	r24, 0x05	; 5
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	6e df       	rcall	.-292    	; 0x37a <delay>
     49e:	29 c1       	rjmp	.+594    	; 0x6f2 <ui_led_change+0x33a>
		}
		else if (report[0] == 'S')
     4a0:	83 35       	cpi	r24, 0x53	; 83
     4a2:	29 f5       	brne	.+74     	; 0x4ee <ui_led_change+0x136>
		{
			strcpy(state,"SMP");
     4a4:	83 e5       	ldi	r24, 0x53	; 83
     4a6:	9d e4       	ldi	r25, 0x4D	; 77
     4a8:	a0 e5       	ldi	r26, 0x50	; 80
     4aa:	b0 e0       	ldi	r27, 0x00	; 0
     4ac:	80 93 00 20 	sts	0x2000, r24
     4b0:	90 93 01 20 	sts	0x2001, r25
     4b4:	a0 93 02 20 	sts	0x2002, r26
     4b8:	b0 93 03 20 	sts	0x2003, r27
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     4bc:	c0 e6       	ldi	r28, 0x60	; 96
     4be:	d6 e0       	ldi	r29, 0x06	; 6
     4c0:	80 e1       	ldi	r24, 0x10	; 16
     4c2:	8e 83       	std	Y+6, r24	; 0x06
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     4c4:	02 e0       	ldi	r16, 0x02	; 2
     4c6:	0d 83       	std	Y+5, r16	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     4c8:	10 e2       	ldi	r17, 0x20	; 32
     4ca:	1e 83       	std	Y+6, r17	; 0x06
			ioport_set_pin_level(TRST, LOW);
			ioport_set_pin_level(TMS, HIGH);
			ioport_set_pin_level(TCLK, LOW);
			delay(5);
     4cc:	85 e0       	ldi	r24, 0x05	; 5
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	54 df       	rcall	.-344    	; 0x37a <delay>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     4d2:	1d 83       	std	Y+5, r17	; 0x05
			ioport_set_pin_level(TCLK, HIGH);
			delay(5);
     4d4:	85 e0       	ldi	r24, 0x05	; 5
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	50 df       	rcall	.-352    	; 0x37a <delay>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     4da:	0e 83       	std	Y+6, r16	; 0x06
     4dc:	1e 83       	std	Y+6, r17	; 0x06
			ioport_set_pin_level(TMS, LOW);
			ioport_set_pin_level(TCLK, LOW);
			delay(5);
     4de:	85 e0       	ldi	r24, 0x05	; 5
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	4b df       	rcall	.-362    	; 0x37a <delay>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     4e4:	1d 83       	std	Y+5, r17	; 0x05
			ioport_set_pin_level(TCLK, HIGH);
			delay(5);
     4e6:	85 e0       	ldi	r24, 0x05	; 5
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	47 df       	rcall	.-370    	; 0x37a <delay>
     4ec:	02 c1       	rjmp	.+516    	; 0x6f2 <ui_led_change+0x33a>
			
		}
		else if (report[0] == 'R')
     4ee:	82 35       	cpi	r24, 0x52	; 82
     4f0:	09 f0       	breq	.+2      	; 0x4f4 <ui_led_change+0x13c>
     4f2:	ff c0       	rjmp	.+510    	; 0x6f2 <ui_led_change+0x33a>
		{
			udi_hid_generic_send_report_in(prv_report);
     4f4:	8e ed       	ldi	r24, 0xDE	; 222
     4f6:	95 e2       	ldi	r25, 0x25	; 37
     4f8:	64 d2       	rcall	.+1224   	; 0x9c2 <udi_hid_generic_send_report_in>
			delay(10);
     4fa:	8a e0       	ldi	r24, 0x0A	; 10
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	3d df       	rcall	.-390    	; 0x37a <delay>
     500:	f8 c0       	rjmp	.+496    	; 0x6f2 <ui_led_change+0x33a>
		}
	}
	else if (strcmp(state,"LOD") == 0)
     502:	64 ec       	ldi	r22, 0xC4	; 196
     504:	70 e2       	ldi	r23, 0x20	; 32
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	90 e2       	ldi	r25, 0x20	; 32
     50a:	0e 94 65 11 	call	0x22ca	; 0x22ca <strcmp>
     50e:	89 2b       	or	r24, r25
     510:	d9 f4       	brne	.+54     	; 0x548 <ui_led_change+0x190>
	{
		length = report[0];
     512:	88 81       	ld	r24, Y
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	80 93 d2 20 	sts	0x20D2, r24
     51a:	90 93 d3 20 	sts	0x20D3, r25
		strcpy(state,"LEN");
     51e:	8c e4       	ldi	r24, 0x4C	; 76
     520:	95 e4       	ldi	r25, 0x45	; 69
     522:	ae e4       	ldi	r26, 0x4E	; 78
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	80 93 00 20 	sts	0x2000, r24
     52a:	90 93 01 20 	sts	0x2001, r25
     52e:	a0 93 02 20 	sts	0x2002, r26
     532:	b0 93 03 20 	sts	0x2003, r27
     536:	80 e2       	ldi	r24, 0x20	; 32
     538:	e0 e6       	ldi	r30, 0x60	; 96
     53a:	f6 e0       	ldi	r31, 0x06	; 6
     53c:	85 83       	std	Z+5, r24	; 0x05
		ioport_set_pin_level(TCLK, HIGH);
		count = 0;
     53e:	10 92 d4 20 	sts	0x20D4, r1
     542:	10 92 d5 20 	sts	0x20D5, r1
     546:	d5 c0       	rjmp	.+426    	; 0x6f2 <ui_led_change+0x33a>
	}
	else if (strcmp(state,"LEN") == 0)
     548:	68 ec       	ldi	r22, 0xC8	; 200
     54a:	70 e2       	ldi	r23, 0x20	; 32
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	90 e2       	ldi	r25, 0x20	; 32
     550:	0e 94 65 11 	call	0x22ca	; 0x22ca <strcmp>
     554:	89 2b       	or	r24, r25
     556:	09 f0       	breq	.+2      	; 0x55a <ui_led_change+0x1a2>
     558:	45 c0       	rjmp	.+138    	; 0x5e4 <ui_led_change+0x22c>
	{
		if (report[0] == '1')
     55a:	88 81       	ld	r24, Y
     55c:	81 33       	cpi	r24, 0x31	; 49
     55e:	49 f4       	brne	.+18     	; 0x572 <ui_led_change+0x1ba>
     560:	82 e0       	ldi	r24, 0x02	; 2
     562:	e0 ea       	ldi	r30, 0xA0	; 160
     564:	f6 e0       	ldi	r31, 0x06	; 6
     566:	85 83       	std	Z+5, r24	; 0x05
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	e0 e6       	ldi	r30, 0x60	; 96
     56c:	f6 e0       	ldi	r31, 0x06	; 6
     56e:	85 83       	std	Z+5, r24	; 0x05
     570:	0a c0       	rjmp	.+20     	; 0x586 <ui_led_change+0x1ce>
		{	
			LED_On(LED1_GPIO);
			ioport_set_pin_level(TDI, HIGH);
		}
		else if (report[0] == '0')
     572:	80 33       	cpi	r24, 0x30	; 48
     574:	41 f4       	brne	.+16     	; 0x586 <ui_led_change+0x1ce>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     576:	82 e0       	ldi	r24, 0x02	; 2
     578:	e0 ea       	ldi	r30, 0xA0	; 160
     57a:	f6 e0       	ldi	r31, 0x06	; 6
     57c:	86 83       	std	Z+6, r24	; 0x06
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	e0 e6       	ldi	r30, 0x60	; 96
     582:	f6 e0       	ldi	r31, 0x06	; 6
     584:	86 83       	std	Z+6, r24	; 0x06
     586:	c0 e6       	ldi	r28, 0x60	; 96
     588:	d6 e0       	ldi	r29, 0x06	; 6
     58a:	82 e0       	ldi	r24, 0x02	; 2
     58c:	8e 83       	std	Y+6, r24	; 0x06
     58e:	10 e2       	ldi	r17, 0x20	; 32
     590:	1e 83       	std	Y+6, r17	; 0x06
			LED_Off(LED1_GPIO);
			ioport_set_pin_level(TDI, LOW);
		}
		ioport_set_pin_level(TMS, LOW);
		ioport_set_pin_level(TCLK, LOW);
		delay(5);
     592:	85 e0       	ldi	r24, 0x05	; 5
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	f1 de       	rcall	.-542    	; 0x37a <delay>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     598:	1d 83       	std	Y+5, r17	; 0x05
		ioport_set_pin_level(TCLK, HIGH);
		delay(5);
     59a:	85 e0       	ldi	r24, 0x05	; 5
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	ed de       	rcall	.-550    	; 0x37a <delay>
		count++;
     5a0:	80 91 d4 20 	lds	r24, 0x20D4
     5a4:	90 91 d5 20 	lds	r25, 0x20D5
     5a8:	01 96       	adiw	r24, 0x01	; 1
     5aa:	80 93 d4 20 	sts	0x20D4, r24
     5ae:	90 93 d5 20 	sts	0x20D5, r25
		if (count >= length)
     5b2:	20 91 d2 20 	lds	r18, 0x20D2
     5b6:	30 91 d3 20 	lds	r19, 0x20D3
     5ba:	82 17       	cp	r24, r18
     5bc:	93 07       	cpc	r25, r19
     5be:	08 f4       	brcc	.+2      	; 0x5c2 <ui_led_change+0x20a>
     5c0:	98 c0       	rjmp	.+304    	; 0x6f2 <ui_led_change+0x33a>
		{
			count = 0;
     5c2:	10 92 d4 20 	sts	0x20D4, r1
     5c6:	10 92 d5 20 	sts	0x20D5, r1
			strcpy(state,"IDL");
     5ca:	89 e4       	ldi	r24, 0x49	; 73
     5cc:	94 e4       	ldi	r25, 0x44	; 68
     5ce:	ac e4       	ldi	r26, 0x4C	; 76
     5d0:	b0 e0       	ldi	r27, 0x00	; 0
     5d2:	80 93 00 20 	sts	0x2000, r24
     5d6:	90 93 01 20 	sts	0x2001, r25
     5da:	a0 93 02 20 	sts	0x2002, r26
     5de:	b0 93 03 20 	sts	0x2003, r27
     5e2:	87 c0       	rjmp	.+270    	; 0x6f2 <ui_led_change+0x33a>
		}
	}
	else if (strcmp(state,"SMP") == 0)
     5e4:	6c ec       	ldi	r22, 0xCC	; 204
     5e6:	70 e2       	ldi	r23, 0x20	; 32
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e2       	ldi	r25, 0x20	; 32
     5ec:	0e 94 65 11 	call	0x22ca	; 0x22ca <strcmp>
     5f0:	89 2b       	or	r24, r25
     5f2:	09 f0       	breq	.+2      	; 0x5f6 <ui_led_change+0x23e>
     5f4:	7e c0       	rjmp	.+252    	; 0x6f2 <ui_led_change+0x33a>
	{
		
		out_pins = report[0];
     5f6:	c8 80       	ld	r12, Y
     5f8:	d1 2c       	mov	r13, r1
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	e0 e6       	ldi	r30, 0x60	; 96
     5fe:	f6 e0       	ldi	r31, 0x06	; 6
     600:	86 83       	std	Z+6, r24	; 0x06
		line=0 ;
		ioport_set_pin_level(TDI, LOW);
		while ( line < out_pins )
     602:	1c 14       	cp	r1, r12
     604:	1d 04       	cpc	r1, r13
     606:	0c f0       	brlt	.+2      	; 0x60a <ui_led_change+0x252>
     608:	49 c0       	rjmp	.+146    	; 0x69c <ui_led_change+0x2e4>
     60a:	0f 2e       	mov	r0, r31
     60c:	fe ed       	ldi	r31, 0xDE	; 222
     60e:	8f 2e       	mov	r8, r31
     610:	f3 e2       	ldi	r31, 0x23	; 35
     612:	9f 2e       	mov	r9, r31
     614:	f0 2d       	mov	r31, r0
	}
	else if (strcmp(state,"SMP") == 0)
	{
		
		out_pins = report[0];
		line=0 ;
     616:	00 e0       	ldi	r16, 0x00	; 0
     618:	10 e0       	ldi	r17, 0x00	; 0

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
     61a:	0f 2e       	mov	r0, r31
     61c:	f0 e4       	ldi	r31, 0x40	; 64
     61e:	ef 2e       	mov	r14, r31
     620:	f6 e0       	ldi	r31, 0x06	; 6
     622:	ff 2e       	mov	r15, r31
     624:	f0 2d       	mov	r31, r0
				hid_report[line] = 0x30;
				LED_Off(LED7_GPIO);
			}
			else if (ioport_get_pin_level(TDO)== 1)
			{
				hid_report[line] = 0x31;
     626:	0f 2e       	mov	r0, r31
     628:	f1 e3       	ldi	r31, 0x31	; 49
     62a:	3f 2e       	mov	r3, r31
     62c:	f0 2d       	mov	r31, r0
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     62e:	0f 2e       	mov	r0, r31
     630:	f0 ea       	ldi	r31, 0xA0	; 160
     632:	af 2e       	mov	r10, r31
     634:	f6 e0       	ldi	r31, 0x06	; 6
     636:	bf 2e       	mov	r11, r31
     638:	f0 2d       	mov	r31, r0
     63a:	68 94       	set
     63c:	55 24       	eor	r5, r5
     63e:	57 f8       	bld	r5, 7
		ioport_set_pin_level(TDI, LOW);
		while ( line < out_pins )
		{
			if (ioport_get_pin_level(TDO)== 0)
			{
				hid_report[line] = 0x30;
     640:	0f 2e       	mov	r0, r31
     642:	f0 e3       	ldi	r31, 0x30	; 48
     644:	4f 2e       	mov	r4, r31
     646:	f0 2d       	mov	r31, r0
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     648:	c0 e6       	ldi	r28, 0x60	; 96
     64a:	d6 e0       	ldi	r29, 0x06	; 6
     64c:	68 94       	set
     64e:	66 24       	eor	r6, r6
     650:	61 f8       	bld	r6, 1
     652:	68 94       	set
     654:	77 24       	eor	r7, r7
     656:	75 f8       	bld	r7, 5

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
     658:	f7 01       	movw	r30, r14
     65a:	80 85       	ldd	r24, Z+8	; 0x08
		out_pins = report[0];
		line=0 ;
		ioport_set_pin_level(TDI, LOW);
		while ( line < out_pins )
		{
			if (ioport_get_pin_level(TDO)== 0)
     65c:	80 fd       	sbrc	r24, 0
     65e:	05 c0       	rjmp	.+10     	; 0x66a <ui_led_change+0x2b2>
			{
				hid_report[line] = 0x30;
     660:	f4 01       	movw	r30, r8
     662:	40 82       	st	Z, r4
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     664:	f5 01       	movw	r30, r10
     666:	56 82       	std	Z+6, r5	; 0x06
     668:	08 c0       	rjmp	.+16     	; 0x67a <ui_led_change+0x2c2>

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
     66a:	f7 01       	movw	r30, r14
     66c:	80 85       	ldd	r24, Z+8	; 0x08
				LED_Off(LED7_GPIO);
			}
			else if (ioport_get_pin_level(TDO)== 1)
     66e:	80 ff       	sbrs	r24, 0
     670:	04 c0       	rjmp	.+8      	; 0x67a <ui_led_change+0x2c2>
			{
				hid_report[line] = 0x31;
     672:	f4 01       	movw	r30, r8
     674:	30 82       	st	Z, r3
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     676:	f5 01       	movw	r30, r10
     678:	55 82       	std	Z+5, r5	; 0x05
				LED_On(LED7_GPIO);
			}
			line += 1;
     67a:	0f 5f       	subi	r16, 0xFF	; 255
     67c:	1f 4f       	sbci	r17, 0xFF	; 255
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     67e:	6e 82       	std	Y+6, r6	; 0x06
     680:	7e 82       	std	Y+6, r7	; 0x06
			ioport_set_pin_level(TMS, LOW);
			ioport_set_pin_level(TCLK, LOW);
			delay(5);
     682:	85 e0       	ldi	r24, 0x05	; 5
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	79 de       	rcall	.-782    	; 0x37a <delay>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     688:	7d 82       	std	Y+5, r7	; 0x05
			ioport_set_pin_level(TCLK, HIGH);
			delay(5);
     68a:	85 e0       	ldi	r24, 0x05	; 5
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	75 de       	rcall	.-790    	; 0x37a <delay>
     690:	ff ef       	ldi	r31, 0xFF	; 255
     692:	8f 1a       	sub	r8, r31
     694:	9f 0a       	sbc	r9, r31
	{
		
		out_pins = report[0];
		line=0 ;
		ioport_set_pin_level(TDI, LOW);
		while ( line < out_pins )
     696:	0c 15       	cp	r16, r12
     698:	1d 05       	cpc	r17, r13
     69a:	f4 f2       	brlt	.-68     	; 0x658 <ui_led_change+0x2a0>
			ioport_set_pin_level(TCLK, LOW);
			delay(5);
			ioport_set_pin_level(TCLK, HIGH);
			delay(5);
		}
		hid_report[out_pins] = '\0';
     69c:	f6 01       	movw	r30, r12
     69e:	e2 52       	subi	r30, 0x22	; 34
     6a0:	fc 4d       	sbci	r31, 0xDC	; 220
     6a2:	10 82       	st	Z, r1
		done = 1;
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	80 93 d0 20 	sts	0x20D0, r24
     6ac:	90 93 d1 20 	sts	0x20D1, r25
		strcpy(state,"IDL");
     6b0:	89 e4       	ldi	r24, 0x49	; 73
     6b2:	94 e4       	ldi	r25, 0x44	; 68
     6b4:	ac e4       	ldi	r26, 0x4C	; 76
     6b6:	b0 e0       	ldi	r27, 0x00	; 0
     6b8:	80 93 00 20 	sts	0x2000, r24
     6bc:	90 93 01 20 	sts	0x2001, r25
     6c0:	a0 93 02 20 	sts	0x2002, r26
     6c4:	b0 93 03 20 	sts	0x2003, r27
     6c8:	c0 e6       	ldi	r28, 0x60	; 96
     6ca:	d6 e0       	ldi	r29, 0x06	; 6
     6cc:	82 e0       	ldi	r24, 0x02	; 2
     6ce:	8d 83       	std	Y+5, r24	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     6d0:	10 e2       	ldi	r17, 0x20	; 32
     6d2:	1e 83       	std	Y+6, r17	; 0x06
		ioport_set_pin_level(TMS, HIGH);
		ioport_set_pin_level(TCLK, LOW);
		delay(5);
     6d4:	85 e0       	ldi	r24, 0x05	; 5
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	50 de       	rcall	.-864    	; 0x37a <delay>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     6da:	1d 83       	std	Y+5, r17	; 0x05
		ioport_set_pin_level(TCLK, HIGH);
		delay(5);
     6dc:	85 e0       	ldi	r24, 0x05	; 5
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	4c de       	rcall	.-872    	; 0x37a <delay>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     6e2:	1e 83       	std	Y+6, r17	; 0x06
		ioport_set_pin_level(TCLK, LOW);
		delay(5);
     6e4:	85 e0       	ldi	r24, 0x05	; 5
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	48 de       	rcall	.-880    	; 0x37a <delay>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     6ea:	1d 83       	std	Y+5, r17	; 0x05
		ioport_set_pin_level(TCLK, HIGH);
		delay(5);
     6ec:	85 e0       	ldi	r24, 0x05	; 5
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	44 de       	rcall	.-888    	; 0x37a <delay>
		
	}
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	1f 91       	pop	r17
     6f8:	0f 91       	pop	r16
     6fa:	ff 90       	pop	r15
     6fc:	ef 90       	pop	r14
     6fe:	df 90       	pop	r13
     700:	cf 90       	pop	r12
     702:	bf 90       	pop	r11
     704:	af 90       	pop	r10
     706:	9f 90       	pop	r9
     708:	8f 90       	pop	r8
     70a:	7f 90       	pop	r7
     70c:	6f 90       	pop	r6
     70e:	5f 90       	pop	r5
     710:	4f 90       	pop	r4
     712:	3f 90       	pop	r3
     714:	08 95       	ret

00000716 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	00 d0       	rcall	.+0      	; 0x71c <sysclk_init+0x6>
     71c:	1f 92       	push	r1
     71e:	cd b7       	in	r28, 0x3d	; 61
     720:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     722:	8f ef       	ldi	r24, 0xFF	; 255
     724:	80 93 70 00 	sts	0x0070, r24
     728:	80 93 71 00 	sts	0x0071, r24
     72c:	80 93 72 00 	sts	0x0072, r24
     730:	80 93 73 00 	sts	0x0073, r24
     734:	80 93 74 00 	sts	0x0074, r24
     738:	80 93 75 00 	sts	0x0075, r24
     73c:	80 93 76 00 	sts	0x0076, r24
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
     740:	65 e0       	ldi	r22, 0x05	; 5
     742:	81 e4       	ldi	r24, 0x41	; 65
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	79 d6       	rcall	.+3314   	; 0x143a <ccp_write_io>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     748:	6c e1       	ldi	r22, 0x1C	; 28
     74a:	70 e0       	ldi	r23, 0x00	; 0
     74c:	82 e0       	ldi	r24, 0x02	; 2
     74e:	7b d6       	rcall	.+3318   	; 0x1446 <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
     750:	8a 83       	std	Y+2, r24	; 0x02
     752:	6d e1       	ldi	r22, 0x1D	; 29
     754:	70 e0       	ldi	r23, 0x00	; 0
     756:	82 e0       	ldi	r24, 0x02	; 2
     758:	76 d6       	rcall	.+3308   	; 0x1446 <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
     75a:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
     75c:	89 81       	ldd	r24, Y+1	; 0x01
     75e:	9a 81       	ldd	r25, Y+2	; 0x02
     760:	01 96       	adiw	r24, 0x01	; 1
     762:	21 f4       	brne	.+8      	; 0x76c <sysclk_init+0x56>
		cal = 0x2340;
     764:	80 e4       	ldi	r24, 0x40	; 64
     766:	93 e2       	ldi	r25, 0x23	; 35
     768:	89 83       	std	Y+1, r24	; 0x01
     76a:	9a 83       	std	Y+2, r25	; 0x02
     76c:	89 81       	ldd	r24, Y+1	; 0x01
     76e:	9a 81       	ldd	r25, Y+2	; 0x02
     770:	8b 83       	std	Y+3, r24	; 0x03
     772:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
     774:	e0 e6       	ldi	r30, 0x60	; 96
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
     77a:	8c 81       	ldd	r24, Y+4	; 0x04
     77c:	83 83       	std	Z+3, r24	; 0x03

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     77e:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     780:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     782:	e0 e5       	ldi	r30, 0x50	; 80
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	90 81       	ld	r25, Z
     788:	92 60       	ori	r25, 0x02	; 2
     78a:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     78c:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     78e:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     790:	81 ff       	sbrs	r24, 1
     792:	fd cf       	rjmp	.-6      	; 0x78e <sysclk_init+0x78>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     794:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     796:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     798:	a0 e5       	ldi	r26, 0x50	; 80
     79a:	b0 e0       	ldi	r27, 0x00	; 0
     79c:	16 96       	adiw	r26, 0x06	; 6
     79e:	9c 91       	ld	r25, X
     7a0:	16 97       	sbiw	r26, 0x06	; 6
     7a2:	99 7f       	andi	r25, 0xF9	; 249
     7a4:	16 96       	adiw	r26, 0x06	; 6
     7a6:	9c 93       	st	X, r25
     7a8:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
     7aa:	e0 e6       	ldi	r30, 0x60	; 96
     7ac:	f0 e0       	ldi	r31, 0x00	; 0
     7ae:	90 e8       	ldi	r25, 0x80	; 128
     7b0:	95 83       	std	Z+5, r25	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
     7b2:	9b eb       	ldi	r25, 0xBB	; 187
     7b4:	96 83       	std	Z+6, r25	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
     7b6:	16 96       	adiw	r26, 0x06	; 6
     7b8:	9c 91       	ld	r25, X
     7ba:	16 97       	sbiw	r26, 0x06	; 6
     7bc:	94 60       	ori	r25, 0x04	; 4
     7be:	16 96       	adiw	r26, 0x06	; 6
     7c0:	9c 93       	st	X, r25
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     7c2:	90 81       	ld	r25, Z
     7c4:	91 60       	ori	r25, 0x01	; 1
     7c6:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7c8:	8f bf       	out	0x3f, r24	; 63
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     7ca:	61 e0       	ldi	r22, 0x01	; 1
     7cc:	80 e4       	ldi	r24, 0x40	; 64
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	34 d6       	rcall	.+3176   	; 0x143a <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     7d2:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     7d4:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     7d6:	e0 e5       	ldi	r30, 0x50	; 80
     7d8:	f0 e0       	ldi	r31, 0x00	; 0
     7da:	90 81       	ld	r25, Z
     7dc:	9e 7f       	andi	r25, 0xFE	; 254
     7de:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7e0:	8f bf       	out	0x3f, r24	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     7e2:	24 96       	adiw	r28, 0x04	; 4
     7e4:	cd bf       	out	0x3d, r28	; 61
     7e6:	de bf       	out	0x3e, r29	; 62
     7e8:	df 91       	pop	r29
     7ea:	cf 91       	pop	r28
     7ec:	08 95       	ret

000007ee <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     7ee:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     7f0:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     7f2:	e8 2f       	mov	r30, r24
     7f4:	f0 e0       	ldi	r31, 0x00	; 0
     7f6:	e0 59       	subi	r30, 0x90	; 144
     7f8:	ff 4f       	sbci	r31, 0xFF	; 255
     7fa:	60 95       	com	r22
     7fc:	80 81       	ld	r24, Z
     7fe:	68 23       	and	r22, r24
     800:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     802:	9f bf       	out	0x3f, r25	; 63
     804:	08 95       	ret

00000806 <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     806:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     808:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
     80a:	e8 2f       	mov	r30, r24
     80c:	f0 e0       	ldi	r31, 0x00	; 0
     80e:	e0 59       	subi	r30, 0x90	; 144
     810:	ff 4f       	sbci	r31, 0xFF	; 255
     812:	80 81       	ld	r24, Z
     814:	68 2b       	or	r22, r24
     816:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     818:	9f bf       	out	0x3f, r25	; 63
     81a:	08 95       	ret

0000081c <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
     81c:	86 30       	cpi	r24, 0x06	; 6
     81e:	11 f4       	brne	.+4      	; 0x824 <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
     820:	68 e1       	ldi	r22, 0x18	; 24
     822:	01 c0       	rjmp	.+2      	; 0x826 <sysclk_enable_usb+0xa>
	}
	else {
		prescaler = 0;
     824:	60 e0       	ldi	r22, 0x00	; 0

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     826:	e0 e5       	ldi	r30, 0x50	; 80
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	81 81       	ldd	r24, Z+1	; 0x01
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
     82c:	81 fd       	sbrc	r24, 1
     82e:	24 c0       	rjmp	.+72     	; 0x878 <sysclk_enable_usb+0x5c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     830:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     832:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     834:	90 81       	ld	r25, Z
     836:	92 60       	ori	r25, 0x02	; 2
     838:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     83a:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     83c:	81 81       	ldd	r24, Z+1	; 0x01
     83e:	81 ff       	sbrs	r24, 1
     840:	fd cf       	rjmp	.-6      	; 0x83c <sysclk_enable_usb+0x20>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     842:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     844:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     846:	a0 e5       	ldi	r26, 0x50	; 80
     848:	b0 e0       	ldi	r27, 0x00	; 0
     84a:	16 96       	adiw	r26, 0x06	; 6
     84c:	9c 91       	ld	r25, X
     84e:	16 97       	sbiw	r26, 0x06	; 6
     850:	99 7f       	andi	r25, 0xF9	; 249
     852:	16 96       	adiw	r26, 0x06	; 6
     854:	9c 93       	st	X, r25
     856:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
     858:	e0 e6       	ldi	r30, 0x60	; 96
     85a:	f0 e0       	ldi	r31, 0x00	; 0
     85c:	90 e8       	ldi	r25, 0x80	; 128
     85e:	95 83       	std	Z+5, r25	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
     860:	9b eb       	ldi	r25, 0xBB	; 187
     862:	96 83       	std	Z+6, r25	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
     864:	16 96       	adiw	r26, 0x06	; 6
     866:	9c 91       	ld	r25, X
     868:	16 97       	sbiw	r26, 0x06	; 6
     86a:	94 60       	ori	r25, 0x04	; 4
     86c:	16 96       	adiw	r26, 0x06	; 6
     86e:	9c 93       	st	X, r25
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     870:	90 81       	ld	r25, Z
     872:	91 60       	ori	r25, 0x01	; 1
     874:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     876:	8f bf       	out	0x3f, r24	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
     878:	63 60       	ori	r22, 0x03	; 3
     87a:	84 e4       	ldi	r24, 0x44	; 68
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	dd d5       	rcall	.+3002   	; 0x143a <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
     880:	60 e4       	ldi	r22, 0x40	; 64
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	b4 cf       	rjmp	.-152    	; 0x7ee <sysclk_enable_module>
     886:	08 95       	ret

00000888 <sysclk_disable_usb>:
/**
 * \brief Disable clock for the USB module
 */
void sysclk_disable_usb(void)
{
	sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
     888:	60 e4       	ldi	r22, 0x40	; 64
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	bc df       	rcall	.-136    	; 0x806 <sysclk_disable_module>
	ccp_write_io((uint8_t *)&CLK.USBCTRL, 0);
     88e:	60 e0       	ldi	r22, 0x00	; 0
     890:	84 e4       	ldi	r24, 0x44	; 68
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	d2 c5       	rjmp	.+2980   	; 0x143a <ccp_write_io>
     896:	08 95       	ret

00000898 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
     89c:	fc 01       	movw	r30, r24
     89e:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     8a0:	20 e0       	ldi	r18, 0x00	; 0
     8a2:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     8a4:	c6 2f       	mov	r28, r22
     8a6:	d0 e0       	ldi	r29, 0x00	; 0
     8a8:	de 01       	movw	r26, r28
     8aa:	02 2e       	mov	r0, r18
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <ioport_configure_port_pin+0x1a>
     8ae:	b5 95       	asr	r27
     8b0:	a7 95       	ror	r26
     8b2:	0a 94       	dec	r0
     8b4:	e2 f7       	brpl	.-8      	; 0x8ae <ioport_configure_port_pin+0x16>
     8b6:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     8b8:	50 83       	st	Z, r21
     8ba:	2f 5f       	subi	r18, 0xFF	; 255
     8bc:	3f 4f       	sbci	r19, 0xFF	; 255
     8be:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     8c0:	28 30       	cpi	r18, 0x08	; 8
     8c2:	31 05       	cpc	r19, r1
     8c4:	89 f7       	brne	.-30     	; 0x8a8 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     8c6:	40 ff       	sbrs	r20, 0
     8c8:	0a c0       	rjmp	.+20     	; 0x8de <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
     8ca:	41 ff       	sbrs	r20, 1
     8cc:	03 c0       	rjmp	.+6      	; 0x8d4 <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     8ce:	fc 01       	movw	r30, r24
     8d0:	65 83       	std	Z+5, r22	; 0x05
     8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     8d4:	fc 01       	movw	r30, r24
     8d6:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     8d8:	fc 01       	movw	r30, r24
     8da:	61 83       	std	Z+1, r22	; 0x01
     8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     8de:	fc 01       	movw	r30, r24
     8e0:	62 83       	std	Z+2, r22	; 0x02
	}
}
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	08 95       	ret

000008e8 <udi_hid_generic_getsetting>:


uint8_t udi_hid_generic_getsetting(void)
{
	return 0;
}
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	08 95       	ret

000008ec <udi_hid_generic_setreport>:


static bool udi_hid_generic_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
     8ec:	30 91 e6 27 	lds	r19, 0x27E6
     8f0:	20 91 e7 27 	lds	r18, 0x27E7
     8f4:	82 2f       	mov	r24, r18
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	03 97       	sbiw	r24, 0x03	; 3
     8fa:	e1 f4       	brne	.+56     	; 0x934 <udi_hid_generic_setreport+0x48>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
     8fc:	31 11       	cpse	r19, r1
     8fe:	1c c0       	rjmp	.+56     	; 0x938 <udi_hid_generic_setreport+0x4c>
			&& (sizeof(udi_hid_generic_report_feature) ==
     900:	80 91 ea 27 	lds	r24, 0x27EA
     904:	90 91 eb 27 	lds	r25, 0x27EB
     908:	04 97       	sbiw	r24, 0x04	; 4
     90a:	c1 f4       	brne	.+48     	; 0x93c <udi_hid_generic_setreport+0x50>
					udd_g_ctrlreq.req.wLength)) {
		// Feature type on report ID 0
		udd_g_ctrlreq.payload =
     90c:	86 ed       	ldi	r24, 0xD6	; 214
     90e:	90 e2       	ldi	r25, 0x20	; 32
     910:	80 93 ec 27 	sts	0x27EC, r24
     914:	90 93 ed 27 	sts	0x27ED, r25
				(uint8_t *) & udi_hid_generic_report_feature;
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
     918:	86 ed       	ldi	r24, 0xD6	; 214
     91a:	94 e0       	ldi	r25, 0x04	; 4
     91c:	80 93 f0 27 	sts	0x27F0, r24
     920:	90 93 f1 27 	sts	0x27F1, r25
		udd_g_ctrlreq.payload_size =
     924:	84 e0       	ldi	r24, 0x04	; 4
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	80 93 ee 27 	sts	0x27EE, r24
     92c:	90 93 ef 27 	sts	0x27EF, r25
				sizeof(udi_hid_generic_report_feature);
		return true;
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	08 95       	ret
	}
	return false;
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 95       	ret
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	08 95       	ret
     93c:	80 e0       	ldi	r24, 0x00	; 0
}
     93e:	08 95       	ret

00000940 <udi_hid_generic_report_in_sent>:
		iram_size_t nb_sent, udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	80 93 dc 22 	sts	0x22DC, r24
     946:	08 95       	ret

00000948 <udi_hid_generic_report_out_enable>:
	udi_hid_generic_report_out_enable();
}


static bool udi_hid_generic_report_out_enable(void)
{
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
	return udd_ep_run(UDI_HID_GENERIC_EP_OUT,
     94c:	0f eb       	ldi	r16, 0xBF	; 191
     94e:	14 e0       	ldi	r17, 0x04	; 4
     950:	21 e0       	ldi	r18, 0x01	; 1
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	4a ed       	ldi	r20, 0xDA	; 218
     956:	50 e2       	ldi	r21, 0x20	; 32
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	82 e0       	ldi	r24, 0x02	; 2
     95c:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <udd_ep_run>
							false,
							(uint8_t *) & udi_hid_generic_report_out,
							sizeof(udi_hid_generic_report_out),
							udi_hid_generic_report_out_received);
}
     960:	1f 91       	pop	r17
     962:	0f 91       	pop	r16
     964:	08 95       	ret

00000966 <udi_hid_generic_enable>:
//------ Interface for UDI HID level

bool udi_hid_generic_enable(void)
{
	// Initialize internal values
	udi_hid_generic_rate = 0;
     966:	10 92 de 22 	sts	0x22DE, r1
	udi_hid_generic_protocol = 0;
     96a:	10 92 dd 22 	sts	0x22DD, r1
	udi_hid_generic_b_report_in_free = true;
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	80 93 dc 22 	sts	0x22DC, r24
	if (!udi_hid_generic_report_out_enable())
     974:	e9 df       	rcall	.-46     	; 0x948 <udi_hid_generic_report_out_enable>
     976:	81 11       	cpse	r24, r1
		return false;
	return UDI_HID_GENERIC_ENABLE_EXT();
     978:	0c 94 22 11 	jmp	0x2244	; 0x2244 <main_generic_enable>
}
     97c:	08 95       	ret

0000097e <udi_hid_generic_report_out_received>:

static void udi_hid_generic_report_out_received(udd_ep_status_t status,
		iram_size_t nb_received, udd_ep_id_t ep)
{
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status)
     97e:	81 11       	cpse	r24, r1
     980:	07 c0       	rjmp	.+14     	; 0x990 <udi_hid_generic_report_out_received+0x12>
		return;	// Abort reception

	if (sizeof(udi_hid_generic_report_out) == nb_received) {
     982:	61 30       	cpi	r22, 0x01	; 1
     984:	71 05       	cpc	r23, r1
     986:	19 f4       	brne	.+6      	; 0x98e <udi_hid_generic_report_out_received+0x10>
		UDI_HID_GENERIC_REPORT_OUT(udi_hid_generic_report_out);
     988:	8a ed       	ldi	r24, 0xDA	; 218
     98a:	90 e2       	ldi	r25, 0x20	; 32
     98c:	15 dd       	rcall	.-1494   	; 0x3b8 <ui_led_change>
	}
	udi_hid_generic_report_out_enable();
     98e:	dc cf       	rjmp	.-72     	; 0x948 <udi_hid_generic_report_out_enable>
     990:	08 95       	ret

00000992 <udi_hid_generic_disable>:
}


void udi_hid_generic_disable(void)
{
	UDI_HID_GENERIC_DISABLE_EXT();
     992:	0c 94 26 11 	jmp	0x224c	; 0x224c <main_generic_disable>
     996:	08 95       	ret

00000998 <udi_hid_generic_setup>:
}


bool udi_hid_generic_setup(void)
{
	return udi_hid_setup(&udi_hid_generic_rate,
     998:	26 e7       	ldi	r18, 0x76	; 118
     99a:	34 e0       	ldi	r19, 0x04	; 4
     99c:	49 e0       	ldi	r20, 0x09	; 9
     99e:	50 e2       	ldi	r21, 0x20	; 32
     9a0:	6d ed       	ldi	r22, 0xDD	; 221
     9a2:	72 e2       	ldi	r23, 0x22	; 34
     9a4:	8e ed       	ldi	r24, 0xDE	; 222
     9a6:	92 e2       	ldi	r25, 0x22	; 34
     9a8:	44 c0       	rjmp	.+136    	; 0xa32 <udi_hid_setup>
								&udi_hid_generic_protocol,
								(uint8_t *) &udi_hid_generic_report_desc,
								udi_hid_generic_setreport);
}
     9aa:	08 95       	ret

000009ac <udi_hid_generic_setfeature_valid>:
//--------------------------------------------
//------ Internal routines

static void udi_hid_generic_setfeature_valid(void)
{
	if (sizeof(udi_hid_generic_report_feature) != udd_g_ctrlreq.payload_size)
     9ac:	80 91 ee 27 	lds	r24, 0x27EE
     9b0:	90 91 ef 27 	lds	r25, 0x27EF
     9b4:	04 97       	sbiw	r24, 0x04	; 4
     9b6:	21 f4       	brne	.+8      	; 0x9c0 <udi_hid_generic_setfeature_valid+0x14>
		return;	// Bad data
	UDI_HID_GENERIC_SET_FEATURE(udi_hid_generic_report_feature);
     9b8:	86 ed       	ldi	r24, 0xD6	; 214
     9ba:	90 e2       	ldi	r25, 0x20	; 32
     9bc:	0c 94 29 11 	jmp	0x2252	; 0x2252 <main_hid_set_feature>
     9c0:	08 95       	ret

000009c2 <udi_hid_generic_send_report_in>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_generic_send_report_in(uint8_t *data)
{
     9c2:	ff 92       	push	r15
     9c4:	0f 93       	push	r16
     9c6:	1f 93       	push	r17
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	ec 01       	movw	r28, r24

	if (!udi_hid_generic_b_report_in_free)
     9ce:	80 91 dc 22 	lds	r24, 0x22DC
     9d2:	88 23       	and	r24, r24
     9d4:	39 f1       	breq	.+78     	; 0xa24 <udi_hid_generic_send_report_in+0x62>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     9d6:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
     9d8:	f8 94       	cli
		return false;
	irqflags_t flags = cpu_irq_save();
	
	// Fill report
	memset(&udi_hid_generic_report_in, '0',
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	52 e0       	ldi	r21, 0x02	; 2
     9de:	60 e3       	ldi	r22, 0x30	; 48
     9e0:	70 e0       	ldi	r23, 0x00	; 0
     9e2:	8c ed       	ldi	r24, 0xDC	; 220
     9e4:	90 e2       	ldi	r25, 0x20	; 32
     9e6:	0e 94 5e 11 	call	0x22bc	; 0x22bc <memset>
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	92 e0       	ldi	r25, 0x02	; 2
     9ee:	fe 01       	movw	r30, r28
     9f0:	ac ed       	ldi	r26, 0xDC	; 220
     9f2:	b0 e2       	ldi	r27, 0x20	; 32
     9f4:	01 90       	ld	r0, Z+
     9f6:	0d 92       	st	X+, r0
     9f8:	01 97       	sbiw	r24, 0x01	; 1
     9fa:	e1 f7       	brne	.-8      	; 0x9f4 <udi_hid_generic_send_report_in+0x32>
	      		sizeof(udi_hid_generic_report_in));
				  
	udi_hid_generic_b_report_in_free =
			!udd_ep_run(UDI_HID_GENERIC_EP_IN,
     9fc:	00 ea       	ldi	r16, 0xA0	; 160
     9fe:	14 e0       	ldi	r17, 0x04	; 4
     a00:	20 e0       	ldi	r18, 0x00	; 0
     a02:	32 e0       	ldi	r19, 0x02	; 2
     a04:	4c ed       	ldi	r20, 0xDC	; 220
     a06:	50 e2       	ldi	r21, 0x20	; 32
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	81 e8       	ldi	r24, 0x81	; 129
     a0c:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <udd_ep_run>
							false,
							(uint8_t *) & udi_hid_generic_report_in,
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
     a10:	91 e0       	ldi	r25, 0x01	; 1
     a12:	89 27       	eor	r24, r25
	memset(&udi_hid_generic_report_in, '0',
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
	      		sizeof(udi_hid_generic_report_in));
				  
	udi_hid_generic_b_report_in_free =
     a14:	80 93 dc 22 	sts	0x22DC, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     a18:	ff be       	out	0x3f, r15	; 63
							false,
							(uint8_t *) & udi_hid_generic_report_in,
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_generic_b_report_in_free;
     a1a:	90 91 dc 22 	lds	r25, 0x22DC
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	89 27       	eor	r24, r25
     a22:	01 c0       	rjmp	.+2      	; 0xa26 <udi_hid_generic_send_report_in+0x64>

bool udi_hid_generic_send_report_in(uint8_t *data)
{

	if (!udi_hid_generic_b_report_in_free)
		return false;
     a24:	80 e0       	ldi	r24, 0x00	; 0
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_generic_b_report_in_free;

}
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	1f 91       	pop	r17
     a2c:	0f 91       	pop	r16
     a2e:	ff 90       	pop	r15
     a30:	08 95       	ret

00000a32 <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*set_report)(void) )
{
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	ea 01       	movw	r28, r20
	if (Udd_setup_is_in()) {
     a38:	40 91 e4 27 	lds	r20, 0x27E4
     a3c:	44 23       	and	r20, r20
     a3e:	0c f0       	brlt	.+2      	; 0xa42 <udi_hid_setup+0x10>
     a40:	62 c0       	rjmp	.+196    	; 0xb06 <udi_hid_setup+0xd4>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     a42:	40 76       	andi	r20, 0x60	; 96
     a44:	09 f0       	breq	.+2      	; 0xa48 <udi_hid_setup+0x16>
     a46:	40 c0       	rjmp	.+128    	; 0xac8 <udi_hid_setup+0x96>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
     a48:	20 91 e5 27 	lds	r18, 0x27E5
     a4c:	26 30       	cpi	r18, 0x06	; 6
     a4e:	e1 f5       	brne	.+120    	; 0xac8 <udi_hid_setup+0x96>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
     a50:	6e d1       	rcall	.+732    	; 0xd2e <udc_get_interface_desc>
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
     a52:	fc 01       	movw	r30, r24
     a54:	22 85       	ldd	r18, Z+10	; 0x0a
     a56:	21 32       	cpi	r18, 0x21	; 33
     a58:	99 f5       	brne	.+102    	; 0xac0 <udi_hid_setup+0x8e>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     a5a:	20 91 e7 27 	lds	r18, 0x27E7
     a5e:	21 32       	cpi	r18, 0x21	; 33
     a60:	b9 f4       	brne	.+46     	; 0xa90 <udi_hid_setup+0x5e>
{
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
     a62:	9c 01       	movw	r18, r24
     a64:	27 5f       	subi	r18, 0xF7	; 247
     a66:	3f 4f       	sbci	r19, 0xFF	; 255
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
     a68:	20 93 ec 27 	sts	0x27EC, r18
     a6c:	30 93 ed 27 	sts	0x27ED, r19
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
     a70:	81 85       	ldd	r24, Z+9	; 0x09
     a72:	20 91 ea 27 	lds	r18, 0x27EA
     a76:	30 91 eb 27 	lds	r19, 0x27EB
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	28 17       	cp	r18, r24
     a7e:	39 07       	cpc	r19, r25
     a80:	08 f4       	brcc	.+2      	; 0xa84 <udi_hid_setup+0x52>
     a82:	c9 01       	movw	r24, r18
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
		udd_g_ctrlreq.payload_size =
     a84:	80 93 ee 27 	sts	0x27EE, r24
     a88:	90 93 ef 27 	sts	0x27EF, r25
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	64 c0       	rjmp	.+200    	; 0xb58 <udi_hid_setup+0x126>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
     a90:	fc 01       	movw	r30, r24
     a92:	37 85       	ldd	r19, Z+15	; 0x0f
     a94:	23 13       	cpse	r18, r19
     a96:	16 c0       	rjmp	.+44     	; 0xac4 <udi_hid_setup+0x92>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
     a98:	c0 93 ec 27 	sts	0x27EC, r28
     a9c:	d0 93 ed 27 	sts	0x27ED, r29
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
     aa0:	20 89       	ldd	r18, Z+16	; 0x10
     aa2:	31 89       	ldd	r19, Z+17	; 0x11
     aa4:	80 91 ea 27 	lds	r24, 0x27EA
     aa8:	90 91 eb 27 	lds	r25, 0x27EB
     aac:	28 17       	cp	r18, r24
     aae:	39 07       	cpc	r19, r25
     ab0:	08 f4       	brcc	.+2      	; 0xab4 <udi_hid_setup+0x82>
     ab2:	c9 01       	movw	r24, r18
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
		udd_g_ctrlreq.payload_size =
     ab4:	80 93 ee 27 	sts	0x27EE, r24
     ab8:	90 93 ef 27 	sts	0x27EF, r25
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	4c c0       	rjmp	.+152    	; 0xb58 <udi_hid_setup+0x126>
	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
		return false;
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	4a c0       	rjmp	.+148    	; 0xb58 <udi_hid_setup+0x126>
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
     ac4:	80 e0       	ldi	r24, 0x00	; 0
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
     ac6:	48 c0       	rjmp	.+144    	; 0xb58 <udi_hid_setup+0x126>
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     ac8:	40 32       	cpi	r20, 0x20	; 32
     aca:	e9 f5       	brne	.+122    	; 0xb46 <udi_hid_setup+0x114>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
     acc:	20 91 e5 27 	lds	r18, 0x27E5
     ad0:	22 30       	cpi	r18, 0x02	; 2
     ad2:	19 f0       	breq	.+6      	; 0xada <udi_hid_setup+0xa8>
     ad4:	23 30       	cpi	r18, 0x03	; 3
     ad6:	61 f0       	breq	.+24     	; 0xaf0 <udi_hid_setup+0xbe>
     ad8:	38 c0       	rjmp	.+112    	; 0xb4a <udi_hid_setup+0x118>
			case USB_REQ_HID_GET_REPORT:
				// TODO
				break;

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
     ada:	80 93 ec 27 	sts	0x27EC, r24
     ade:	90 93 ed 27 	sts	0x27ED, r25
				udd_g_ctrlreq.payload_size = 1;
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	80 93 ee 27 	sts	0x27EE, r24
     aea:	90 93 ef 27 	sts	0x27EF, r25
				return true;
     aee:	34 c0       	rjmp	.+104    	; 0xb58 <udi_hid_setup+0x126>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
     af0:	60 93 ec 27 	sts	0x27EC, r22
     af4:	70 93 ed 27 	sts	0x27ED, r23
				udd_g_ctrlreq.payload_size = 1;
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	80 93 ee 27 	sts	0x27EE, r24
     b00:	90 93 ef 27 	sts	0x27EF, r25
				return true;
     b04:	29 c0       	rjmp	.+82     	; 0xb58 <udi_hid_setup+0x126>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     b06:	40 76       	andi	r20, 0x60	; 96
     b08:	40 32       	cpi	r20, 0x20	; 32
     b0a:	09 f5       	brne	.+66     	; 0xb4e <udi_hid_setup+0x11c>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
     b0c:	40 91 e5 27 	lds	r20, 0x27E5
     b10:	4a 30       	cpi	r20, 0x0A	; 10
     b12:	39 f0       	breq	.+14     	; 0xb22 <udi_hid_setup+0xf0>
     b14:	4b 30       	cpi	r20, 0x0B	; 11
     b16:	59 f0       	breq	.+22     	; 0xb2e <udi_hid_setup+0xfc>
     b18:	49 30       	cpi	r20, 0x09	; 9
     b1a:	d9 f4       	brne	.+54     	; 0xb52 <udi_hid_setup+0x120>

			case USB_REQ_HID_SET_REPORT:
				return set_report();
     b1c:	f9 01       	movw	r30, r18
     b1e:	19 95       	eicall
     b20:	1b c0       	rjmp	.+54     	; 0xb58 <udi_hid_setup+0x126>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
     b22:	20 91 e7 27 	lds	r18, 0x27E7
     b26:	fc 01       	movw	r30, r24
     b28:	20 83       	st	Z, r18
				return true;
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	15 c0       	rjmp	.+42     	; 0xb58 <udi_hid_setup+0x126>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
     b2e:	80 91 ea 27 	lds	r24, 0x27EA
     b32:	90 91 eb 27 	lds	r25, 0x27EB
     b36:	89 2b       	or	r24, r25
     b38:	71 f4       	brne	.+28     	; 0xb56 <udi_hid_setup+0x124>
					return false;
				*protocol = udd_g_ctrlreq.req.wValue;
     b3a:	80 91 e6 27 	lds	r24, 0x27E6
     b3e:	fb 01       	movw	r30, r22
     b40:	80 83       	st	Z, r24
				return true;
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	09 c0       	rjmp	.+18     	; 0xb58 <udi_hid_setup+0x126>
			}
		}
	}
	return false;	// Request not supported
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	07 c0       	rjmp	.+14     	; 0xb58 <udi_hid_setup+0x126>
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	05 c0       	rjmp	.+10     	; 0xb58 <udi_hid_setup+0x126>
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	03 c0       	rjmp	.+6      	; 0xb58 <udi_hid_setup+0x126>
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	01 c0       	rjmp	.+2      	; 0xb58 <udi_hid_setup+0x126>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
				return true;

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
     b56:	80 e0       	ldi	r24, 0x00	; 0
				return true;
			}
		}
	}
	return false;	// Request not supported
}
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	08 95       	ret

00000b5e <udc_next_desc_in_iface>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     b5e:	e0 91 e4 22 	lds	r30, 0x22E4
     b62:	f0 91 e5 22 	lds	r31, 0x22E5
     b66:	01 90       	ld	r0, Z+
     b68:	f0 81       	ld	r31, Z
     b6a:	e0 2d       	mov	r30, r0
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     b6c:	22 81       	ldd	r18, Z+2	; 0x02
     b6e:	33 81       	ldd	r19, Z+3	; 0x03
     b70:	2e 0f       	add	r18, r30
     b72:	3f 1f       	adc	r19, r31
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     b74:	fc 01       	movw	r30, r24
     b76:	40 81       	ld	r20, Z
     b78:	e4 0f       	add	r30, r20
     b7a:	f1 1d       	adc	r31, r1
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     b7c:	e2 17       	cp	r30, r18
     b7e:	f3 07       	cpc	r31, r19
     b80:	a0 f4       	brcc	.+40     	; 0xbaa <udc_next_desc_in_iface+0x4c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     b82:	81 81       	ldd	r24, Z+1	; 0x01
     b84:	84 30       	cpi	r24, 0x04	; 4
     b86:	a1 f0       	breq	.+40     	; 0xbb0 <udc_next_desc_in_iface+0x52>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
     b88:	86 13       	cpse	r24, r22
     b8a:	06 c0       	rjmp	.+12     	; 0xb98 <udc_next_desc_in_iface+0x3a>
     b8c:	14 c0       	rjmp	.+40     	; 0xbb6 <udc_next_desc_in_iface+0x58>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     b8e:	81 81       	ldd	r24, Z+1	; 0x01
     b90:	84 30       	cpi	r24, 0x04	; 4
     b92:	a1 f0       	breq	.+40     	; 0xbbc <udc_next_desc_in_iface+0x5e>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
     b94:	86 17       	cp	r24, r22
     b96:	a9 f0       	breq	.+42     	; 0xbc2 <udc_next_desc_in_iface+0x64>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     b98:	80 81       	ld	r24, Z
     b9a:	e8 0f       	add	r30, r24
     b9c:	f1 1d       	adc	r31, r1
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     b9e:	e2 17       	cp	r30, r18
     ba0:	f3 07       	cpc	r31, r19
     ba2:	a8 f3       	brcs	.-22     	; 0xb8e <udc_next_desc_in_iface+0x30>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	08 95       	ret
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	08 95       	ret
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	08 95       	ret
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     bb6:	8e 2f       	mov	r24, r30
     bb8:	9f 2f       	mov	r25, r31
     bba:	08 95       	ret
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	08 95       	ret
		}
		if (desc_id == desc->bDescriptorType) {
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     bc2:	8e 2f       	mov	r24, r30
     bc4:	9f 2f       	mov	r25, r31
				desc->bLength);
	}
	return NULL; // No specific descriptor found
}
     bc6:	08 95       	ret

00000bc8 <udc_valid_address>:
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
     bc8:	80 91 e6 27 	lds	r24, 0x27E6
     bcc:	8f 77       	andi	r24, 0x7F	; 127
     bce:	83 c7       	rjmp	.+3846   	; 0x1ad6 <udd_set_address>
     bd0:	08 95       	ret

00000bd2 <udc_update_iface_desc>:
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
     bd2:	90 91 e6 22 	lds	r25, 0x22E6
     bd6:	99 23       	and	r25, r25
     bd8:	81 f1       	breq	.+96     	; 0xc3a <udc_update_iface_desc+0x68>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     bda:	e0 91 e4 22 	lds	r30, 0x22E4
     bde:	f0 91 e5 22 	lds	r31, 0x22E5
     be2:	01 90       	ld	r0, Z+
     be4:	f0 81       	ld	r31, Z
     be6:	e0 2d       	mov	r30, r0
     be8:	94 81       	ldd	r25, Z+4	; 0x04
     bea:	89 17       	cp	r24, r25
     bec:	40 f5       	brcc	.+80     	; 0xc3e <udc_update_iface_desc+0x6c>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
     bee:	e0 93 e2 22 	sts	0x22E2, r30
     bf2:	f0 93 e3 22 	sts	0x22E3, r31
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     bf6:	22 81       	ldd	r18, Z+2	; 0x02
     bf8:	33 81       	ldd	r19, Z+3	; 0x03
     bfa:	2e 0f       	add	r18, r30
     bfc:	3f 1f       	adc	r19, r31
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
     bfe:	e2 17       	cp	r30, r18
     c00:	f3 07       	cpc	r31, r19
     c02:	f8 f4       	brcc	.+62     	; 0xc42 <udc_update_iface_desc+0x70>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
     c04:	91 81       	ldd	r25, Z+1	; 0x01
     c06:	94 30       	cpi	r25, 0x04	; 4
     c08:	61 f4       	brne	.+24     	; 0xc22 <udc_update_iface_desc+0x50>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
     c0a:	92 81       	ldd	r25, Z+2	; 0x02
     c0c:	98 13       	cpse	r25, r24
     c0e:	09 c0       	rjmp	.+18     	; 0xc22 <udc_update_iface_desc+0x50>
     c10:	93 81       	ldd	r25, Z+3	; 0x03
     c12:	96 13       	cpse	r25, r22
     c14:	06 c0       	rjmp	.+12     	; 0xc22 <udc_update_iface_desc+0x50>
     c16:	e0 93 e2 22 	sts	0x22E2, r30
     c1a:	f0 93 e3 22 	sts	0x22E3, r31
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	08 95       	ret
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
     c22:	90 81       	ld	r25, Z
     c24:	e9 0f       	add	r30, r25
     c26:	f1 1d       	adc	r31, r1
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
     c28:	e2 17       	cp	r30, r18
     c2a:	f3 07       	cpc	r31, r19
     c2c:	58 f3       	brcs	.-42     	; 0xc04 <udc_update_iface_desc+0x32>
     c2e:	e0 93 e2 22 	sts	0x22E2, r30
     c32:	f0 93 e3 22 	sts	0x22E3, r31
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	08 95       	ret
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
		return false;
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	08 95       	ret
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	08 95       	ret
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
     c42:	80 e0       	ldi	r24, 0x00	; 0
}
     c44:	08 95       	ret

00000c46 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
     c46:	ff 92       	push	r15
     c48:	0f 93       	push	r16
     c4a:	1f 93       	push	r17
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	c8 2f       	mov	r28, r24
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     c52:	60 e0       	ldi	r22, 0x00	; 0
     c54:	be df       	rcall	.-132    	; 0xbd2 <udc_update_iface_desc>
     c56:	f8 2e       	mov	r15, r24
     c58:	88 23       	and	r24, r24
     c5a:	81 f1       	breq	.+96     	; 0xcbc <udc_iface_disable+0x76>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     c5c:	a0 91 e4 22 	lds	r26, 0x22E4
     c60:	b0 91 e5 22 	lds	r27, 0x22E5
     c64:	ec 2f       	mov	r30, r28
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	ee 0f       	add	r30, r30
     c6a:	ff 1f       	adc	r31, r31
     c6c:	12 96       	adiw	r26, 0x02	; 2
     c6e:	2d 91       	ld	r18, X+
     c70:	3c 91       	ld	r19, X
     c72:	13 97       	sbiw	r26, 0x03	; 3
     c74:	e2 0f       	add	r30, r18
     c76:	f3 1f       	adc	r31, r19
     c78:	00 81       	ld	r16, Z
     c7a:	11 81       	ldd	r17, Z+1	; 0x01

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     c7c:	d8 01       	movw	r26, r16
     c7e:	16 96       	adiw	r26, 0x06	; 6
     c80:	ed 91       	ld	r30, X+
     c82:	fc 91       	ld	r31, X
     c84:	17 97       	sbiw	r26, 0x07	; 7
     c86:	19 95       	eicall
     c88:	68 2f       	mov	r22, r24
     c8a:	8c 2f       	mov	r24, r28
     c8c:	a2 df       	rcall	.-188    	; 0xbd2 <udc_update_iface_desc>
     c8e:	f8 2e       	mov	r15, r24
     c90:	88 23       	and	r24, r24
     c92:	a1 f0       	breq	.+40     	; 0xcbc <udc_iface_disable+0x76>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     c94:	c0 91 e2 22 	lds	r28, 0x22E2
     c98:	d0 91 e3 22 	lds	r29, 0x22E3
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     c9c:	65 e0       	ldi	r22, 0x05	; 5
     c9e:	ce 01       	movw	r24, r28
     ca0:	5e df       	rcall	.-324    	; 0xb5e <udc_next_desc_in_iface>
     ca2:	ec 01       	movw	r28, r24
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
     ca4:	00 97       	sbiw	r24, 0x00	; 0
     ca6:	21 f0       	breq	.+8      	; 0xcb0 <udc_iface_disable+0x6a>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
     ca8:	8a 81       	ldd	r24, Y+2	; 0x02
     caa:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <udd_ep_free>
		}
     cae:	f6 cf       	rjmp	.-20     	; 0xc9c <udc_iface_disable+0x56>
	}
#endif

	// Disable interface
	udi_api->disable();
     cb0:	d8 01       	movw	r26, r16
     cb2:	12 96       	adiw	r26, 0x02	; 2
     cb4:	ed 91       	ld	r30, X+
     cb6:	fc 91       	ld	r31, X
     cb8:	13 97       	sbiw	r26, 0x03	; 3
     cba:	19 95       	eicall
	return true;
}
     cbc:	8f 2d       	mov	r24, r15
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	1f 91       	pop	r17
     cc4:	0f 91       	pop	r16
     cc6:	ff 90       	pop	r15
     cc8:	08 95       	ret

00000cca <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
     cca:	1f 93       	push	r17
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
     cd0:	18 2f       	mov	r17, r24
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
     cd2:	7f df       	rcall	.-258    	; 0xbd2 <udc_update_iface_desc>
     cd4:	88 23       	and	r24, r24
     cd6:	39 f1       	breq	.+78     	; 0xd26 <udc_iface_enable+0x5c>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     cd8:	c0 91 e2 22 	lds	r28, 0x22E2
     cdc:	d0 91 e3 22 	lds	r29, 0x22E3
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     ce0:	65 e0       	ldi	r22, 0x05	; 5
     ce2:	ce 01       	movw	r24, r28
     ce4:	3c df       	rcall	.-392    	; 0xb5e <udc_next_desc_in_iface>
     ce6:	ec 01       	movw	r28, r24
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
     ce8:	00 97       	sbiw	r24, 0x00	; 0
     cea:	41 f0       	breq	.+16     	; 0xcfc <udc_iface_enable+0x32>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     cec:	4c 81       	ldd	r20, Y+4	; 0x04
     cee:	5d 81       	ldd	r21, Y+5	; 0x05
     cf0:	6b 81       	ldd	r22, Y+3	; 0x03
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	13 d7       	rcall	.+3622   	; 0x1b1c <udd_ep_alloc>
     cf6:	81 11       	cpse	r24, r1
     cf8:	f3 cf       	rjmp	.-26     	; 0xce0 <udc_iface_enable+0x16>
     cfa:	15 c0       	rjmp	.+42     	; 0xd26 <udc_iface_enable+0x5c>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
     cfc:	a0 91 e4 22 	lds	r26, 0x22E4
     d00:	b0 91 e5 22 	lds	r27, 0x22E5
     d04:	81 2f       	mov	r24, r17
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	88 0f       	add	r24, r24
     d0a:	99 1f       	adc	r25, r25
     d0c:	12 96       	adiw	r26, 0x02	; 2
     d0e:	ed 91       	ld	r30, X+
     d10:	fc 91       	ld	r31, X
     d12:	13 97       	sbiw	r26, 0x03	; 3
     d14:	e8 0f       	add	r30, r24
     d16:	f9 1f       	adc	r31, r25
     d18:	01 90       	ld	r0, Z+
     d1a:	f0 81       	ld	r31, Z
     d1c:	e0 2d       	mov	r30, r0
     d1e:	01 90       	ld	r0, Z+
     d20:	f0 81       	ld	r31, Z
     d22:	e0 2d       	mov	r30, r0
     d24:	19 95       	eicall
}
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	1f 91       	pop	r17
     d2c:	08 95       	ret

00000d2e <udc_get_interface_desc>:
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
	return udc_ptr_iface;
}
     d2e:	80 91 e2 22 	lds	r24, 0x22E2
     d32:	90 91 e3 22 	lds	r25, 0x22E3
     d36:	08 95       	ret

00000d38 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
	udd_enable();
     d38:	5c c6       	rjmp	.+3256   	; 0x19f2 <udd_enable>
     d3a:	08 95       	ret

00000d3c <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
     d3c:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     d3e:	80 91 e6 22 	lds	r24, 0x22E6
     d42:	88 23       	and	r24, r24
     d44:	c1 f0       	breq	.+48     	; 0xd76 <udc_reset+0x3a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     d46:	e0 91 e4 22 	lds	r30, 0x22E4
     d4a:	f0 91 e5 22 	lds	r31, 0x22E5
     d4e:	01 90       	ld	r0, Z+
     d50:	f0 81       	ld	r31, Z
     d52:	e0 2d       	mov	r30, r0
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     d54:	84 81       	ldd	r24, Z+4	; 0x04
     d56:	88 23       	and	r24, r24
     d58:	71 f0       	breq	.+28     	; 0xd76 <udc_reset+0x3a>
     d5a:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
     d5c:	8c 2f       	mov	r24, r28
     d5e:	73 df       	rcall	.-282    	; 0xc46 <udc_iface_disable>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     d60:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     d62:	e0 91 e4 22 	lds	r30, 0x22E4
     d66:	f0 91 e5 22 	lds	r31, 0x22E5
     d6a:	01 90       	ld	r0, Z+
     d6c:	f0 81       	ld	r31, Z
     d6e:	e0 2d       	mov	r30, r0
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     d70:	84 81       	ldd	r24, Z+4	; 0x04
     d72:	c8 17       	cp	r28, r24
     d74:	98 f3       	brcs	.-26     	; 0xd5c <udc_reset+0x20>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
     d76:	10 92 e6 22 	sts	0x22E6, r1
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
     d7a:	80 91 e7 22 	lds	r24, 0x22E7
     d7e:	81 fd       	sbrc	r24, 1
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
     d80:	0e 94 1f 11 	call	0x223e	; 0x223e <main_remotewakeup_disable>
	}
#endif
	udc_device_status =
     d84:	10 92 e7 22 	sts	0x22E7, r1
     d88:	10 92 e8 22 	sts	0x22E8, r1
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
     d8c:	cf 91       	pop	r28
     d8e:	08 95       	ret

00000d90 <udc_stop>:

/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
     d90:	f3 d5       	rcall	.+3046   	; 0x1978 <udd_disable>
	udc_reset();
     d92:	d4 cf       	rjmp	.-88     	; 0xd3c <udc_reset>
     d94:	08 95       	ret

00000d96 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     d96:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     d98:	80 91 e6 22 	lds	r24, 0x22E6
     d9c:	88 23       	and	r24, r24
     d9e:	41 f1       	breq	.+80     	; 0xdf0 <udc_sof_notify+0x5a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     da0:	e0 91 e4 22 	lds	r30, 0x22E4
     da4:	f0 91 e5 22 	lds	r31, 0x22E5
     da8:	a0 81       	ld	r26, Z
     daa:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     dac:	14 96       	adiw	r26, 0x04	; 4
     dae:	8c 91       	ld	r24, X
     db0:	88 23       	and	r24, r24
     db2:	f1 f0       	breq	.+60     	; 0xdf0 <udc_sof_notify+0x5a>
     db4:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     db6:	8c 2f       	mov	r24, r28
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	88 0f       	add	r24, r24
     dbc:	99 1f       	adc	r25, r25
     dbe:	02 80       	ldd	r0, Z+2	; 0x02
     dc0:	f3 81       	ldd	r31, Z+3	; 0x03
     dc2:	e0 2d       	mov	r30, r0
     dc4:	e8 0f       	add	r30, r24
     dc6:	f9 1f       	adc	r31, r25
     dc8:	01 90       	ld	r0, Z+
     dca:	f0 81       	ld	r31, Z
     dcc:	e0 2d       	mov	r30, r0
     dce:	00 84       	ldd	r0, Z+8	; 0x08
     dd0:	f1 85       	ldd	r31, Z+9	; 0x09
     dd2:	e0 2d       	mov	r30, r0
     dd4:	30 97       	sbiw	r30, 0x00	; 0
     dd6:	09 f0       	breq	.+2      	; 0xdda <udc_sof_notify+0x44>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     dd8:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     dda:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     ddc:	e0 91 e4 22 	lds	r30, 0x22E4
     de0:	f0 91 e5 22 	lds	r31, 0x22E5
     de4:	a0 81       	ld	r26, Z
     de6:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     de8:	14 96       	adiw	r26, 0x04	; 4
     dea:	8c 91       	ld	r24, X
     dec:	c8 17       	cp	r28, r24
     dee:	18 f3       	brcs	.-58     	; 0xdb6 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     df0:	cf 91       	pop	r28
     df2:	08 95       	ret

00000df4 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     df4:	ef 92       	push	r14
     df6:	ff 92       	push	r15
     df8:	0f 93       	push	r16
     dfa:	1f 93       	push	r17
     dfc:	cf 93       	push	r28
     dfe:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     e00:	10 92 ee 27 	sts	0x27EE, r1
     e04:	10 92 ef 27 	sts	0x27EF, r1
	udd_g_ctrlreq.callback = NULL;
     e08:	10 92 f0 27 	sts	0x27F0, r1
     e0c:	10 92 f1 27 	sts	0x27F1, r1
	udd_g_ctrlreq.over_under_run = NULL;
     e10:	10 92 f2 27 	sts	0x27F2, r1
     e14:	10 92 f3 27 	sts	0x27F3, r1

	if (Udd_setup_is_in()) {
     e18:	20 91 e4 27 	lds	r18, 0x27E4
     e1c:	22 23       	and	r18, r18
     e1e:	0c f0       	brlt	.+2      	; 0xe22 <udc_process_setup+0x2e>
     e20:	93 c2       	rjmp	.+1318   	; 0x1348 <udc_process_setup+0x554>
		if (udd_g_ctrlreq.req.wLength == 0) {
     e22:	80 91 ea 27 	lds	r24, 0x27EA
     e26:	90 91 eb 27 	lds	r25, 0x27EB
     e2a:	00 97       	sbiw	r24, 0x00	; 0
     e2c:	09 f0       	breq	.+2      	; 0xe30 <udc_process_setup+0x3c>
     e2e:	91 c2       	rjmp	.+1314   	; 0x1352 <udc_process_setup+0x55e>
     e30:	87 c2       	rjmp	.+1294   	; 0x1340 <udc_process_setup+0x54c>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     e32:	2f 71       	andi	r18, 0x1F	; 31
     e34:	09 f0       	breq	.+2      	; 0xe38 <udc_process_setup+0x44>
     e36:	9d c0       	rjmp	.+314    	; 0xf72 <udc_process_setup+0x17e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     e38:	30 91 e5 27 	lds	r19, 0x27E5
     e3c:	36 30       	cpi	r19, 0x06	; 6
     e3e:	81 f0       	breq	.+32     	; 0xe60 <udc_process_setup+0x6c>
     e40:	38 30       	cpi	r19, 0x08	; 8
     e42:	09 f4       	brne	.+2      	; 0xe46 <udc_process_setup+0x52>
     e44:	8b c0       	rjmp	.+278    	; 0xf5c <udc_process_setup+0x168>
     e46:	31 11       	cpse	r19, r1
     e48:	94 c0       	rjmp	.+296    	; 0xf72 <udc_process_setup+0x17e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     e4a:	02 97       	sbiw	r24, 0x02	; 2
     e4c:	39 f4       	brne	.+14     	; 0xe5c <udc_process_setup+0x68>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     e4e:	62 e0       	ldi	r22, 0x02	; 2
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	87 ee       	ldi	r24, 0xE7	; 231
     e54:	92 e2       	ldi	r25, 0x22	; 34
     e56:	59 d6       	rcall	.+3250   	; 0x1b0a <udd_set_setup_payload>
			sizeof(udc_device_status));
	return true;
     e58:	01 e0       	ldi	r16, 0x01	; 1
     e5a:	f5 c1       	rjmp	.+1002   	; 0x1246 <udc_process_setup+0x452>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
     e5c:	00 e0       	ldi	r16, 0x00	; 0
     e5e:	f3 c1       	rjmp	.+998    	; 0x1246 <udc_process_setup+0x452>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     e60:	20 91 e6 27 	lds	r18, 0x27E6
     e64:	30 91 e7 27 	lds	r19, 0x27E7

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     e68:	83 2f       	mov	r24, r19
     e6a:	99 27       	eor	r25, r25
     e6c:	82 30       	cpi	r24, 0x02	; 2
     e6e:	91 05       	cpc	r25, r1
     e70:	79 f0       	breq	.+30     	; 0xe90 <udc_process_setup+0x9c>
     e72:	83 30       	cpi	r24, 0x03	; 3
     e74:	91 05       	cpc	r25, r1
     e76:	69 f1       	breq	.+90     	; 0xed2 <udc_process_setup+0xde>
     e78:	01 97       	sbiw	r24, 0x01	; 1
     e7a:	09 f0       	breq	.+2      	; 0xe7e <udc_process_setup+0x8a>
     e7c:	67 c0       	rjmp	.+206    	; 0xf4c <udc_process_setup+0x158>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     e7e:	80 91 48 20 	lds	r24, 0x2048
     e82:	90 91 49 20 	lds	r25, 0x2049
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     e86:	dc 01       	movw	r26, r24
     e88:	6c 91       	ld	r22, X
     e8a:	70 e0       	ldi	r23, 0x00	; 0
     e8c:	3e d6       	rcall	.+3196   	; 0x1b0a <udd_set_setup_payload>
     e8e:	4d c0       	rjmp	.+154    	; 0xf2a <udc_process_setup+0x136>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     e90:	e0 91 48 20 	lds	r30, 0x2048
     e94:	f0 91 49 20 	lds	r31, 0x2049
     e98:	81 89       	ldd	r24, Z+17	; 0x11
     e9a:	28 17       	cp	r18, r24
     e9c:	08 f0       	brcs	.+2      	; 0xea0 <udc_process_setup+0xac>
     e9e:	58 c0       	rjmp	.+176    	; 0xf50 <udc_process_setup+0x15c>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     ea0:	c9 01       	movw	r24, r18
     ea2:	99 27       	eor	r25, r25
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	e0 91 4a 20 	lds	r30, 0x204A
     eb0:	f0 91 4b 20 	lds	r31, 0x204B
     eb4:	e8 0f       	add	r30, r24
     eb6:	f9 1f       	adc	r31, r25
     eb8:	80 81       	ld	r24, Z
     eba:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     ebc:	fc 01       	movw	r30, r24
     ebe:	62 81       	ldd	r22, Z+2	; 0x02
     ec0:	73 81       	ldd	r23, Z+3	; 0x03
     ec2:	23 d6       	rcall	.+3142   	; 0x1b0a <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     ec4:	e0 91 ec 27 	lds	r30, 0x27EC
     ec8:	f0 91 ed 27 	lds	r31, 0x27ED
     ecc:	82 e0       	ldi	r24, 0x02	; 2
     ece:	81 83       	std	Z+1, r24	; 0x01
     ed0:	2c c0       	rjmp	.+88     	; 0xf2a <udc_process_setup+0x136>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     ed2:	33 27       	eor	r19, r19
     ed4:	21 30       	cpi	r18, 0x01	; 1
     ed6:	31 05       	cpc	r19, r1
     ed8:	59 f0       	breq	.+22     	; 0xef0 <udc_process_setup+0xfc>
     eda:	20 f0       	brcs	.+8      	; 0xee4 <udc_process_setup+0xf0>
     edc:	22 30       	cpi	r18, 0x02	; 2
     ede:	31 05       	cpc	r19, r1
     ee0:	59 f0       	breq	.+22     	; 0xef8 <udc_process_setup+0x104>
     ee2:	38 c0       	rjmp	.+112    	; 0xf54 <udc_process_setup+0x160>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     ee4:	64 e0       	ldi	r22, 0x04	; 4
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	8c eb       	ldi	r24, 0xBC	; 188
     eea:	90 e2       	ldi	r25, 0x20	; 32
     eec:	0e d6       	rcall	.+3100   	; 0x1b0a <udd_set_setup_payload>
     eee:	1d c0       	rjmp	.+58     	; 0xf2a <udc_process_setup+0x136>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
     ef0:	82 eb       	ldi	r24, 0xB2	; 178
     ef2:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     ef4:	29 e0       	ldi	r18, 0x09	; 9
     ef6:	03 c0       	rjmp	.+6      	; 0xefe <udc_process_setup+0x10a>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
     ef8:	86 ea       	ldi	r24, 0xA6	; 166
     efa:	90 e2       	ldi	r25, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
     efc:	2b e0       	ldi	r18, 0x0B	; 11
     efe:	38 2f       	mov	r19, r24
     f00:	a0 e9       	ldi	r26, 0x90	; 144
     f02:	b0 e2       	ldi	r27, 0x20	; 32
     f04:	e8 2f       	mov	r30, r24
     f06:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     f08:	81 91       	ld	r24, Z+
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	8d 93       	st	X+, r24
     f0e:	9d 93       	st	X+, r25
     f10:	8e 2f       	mov	r24, r30
     f12:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
     f14:	82 17       	cp	r24, r18
     f16:	c0 f3       	brcs	.-16     	; 0xf08 <udc_process_setup+0x114>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     f18:	22 0f       	add	r18, r18
     f1a:	62 e0       	ldi	r22, 0x02	; 2
     f1c:	62 0f       	add	r22, r18
     f1e:	60 93 8e 20 	sts	0x208E, r22
		udd_set_setup_payload(
     f22:	70 e0       	ldi	r23, 0x00	; 0
     f24:	8e e8       	ldi	r24, 0x8E	; 142
     f26:	90 e2       	ldi	r25, 0x20	; 32
     f28:	f0 d5       	rcall	.+3040   	; 0x1b0a <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     f2a:	80 91 ea 27 	lds	r24, 0x27EA
     f2e:	90 91 eb 27 	lds	r25, 0x27EB
     f32:	20 91 ee 27 	lds	r18, 0x27EE
     f36:	30 91 ef 27 	lds	r19, 0x27EF
     f3a:	82 17       	cp	r24, r18
     f3c:	93 07       	cpc	r25, r19
     f3e:	60 f4       	brcc	.+24     	; 0xf58 <udc_process_setup+0x164>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     f40:	80 93 ee 27 	sts	0x27EE, r24
     f44:	90 93 ef 27 	sts	0x27EF, r25
	}
	return true;
     f48:	01 e0       	ldi	r16, 0x01	; 1
     f4a:	7d c1       	rjmp	.+762    	; 0x1246 <udc_process_setup+0x452>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
     f4c:	00 e0       	ldi	r16, 0x00	; 0
     f4e:	7b c1       	rjmp	.+758    	; 0x1246 <udc_process_setup+0x452>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
     f50:	00 e0       	ldi	r16, 0x00	; 0
     f52:	79 c1       	rjmp	.+754    	; 0x1246 <udc_process_setup+0x452>
#endif

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
     f54:	00 e0       	ldi	r16, 0x00	; 0
     f56:	77 c1       	rjmp	.+750    	; 0x1246 <udc_process_setup+0x452>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
     f58:	01 e0       	ldi	r16, 0x01	; 1
     f5a:	75 c1       	rjmp	.+746    	; 0x1246 <udc_process_setup+0x452>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     f5c:	01 97       	sbiw	r24, 0x01	; 1
     f5e:	39 f4       	brne	.+14     	; 0xf6e <udc_process_setup+0x17a>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     f60:	61 e0       	ldi	r22, 0x01	; 1
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	86 ee       	ldi	r24, 0xE6	; 230
     f66:	92 e2       	ldi	r25, 0x22	; 34
     f68:	d0 d5       	rcall	.+2976   	; 0x1b0a <udd_set_setup_payload>
	return true;
     f6a:	01 e0       	ldi	r16, 0x01	; 1
     f6c:	6c c1       	rjmp	.+728    	; 0x1246 <udc_process_setup+0x452>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
     f6e:	00 e0       	ldi	r16, 0x00	; 0
     f70:	6a c1       	rjmp	.+724    	; 0x1246 <udc_process_setup+0x452>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     f72:	21 30       	cpi	r18, 0x01	; 1
     f74:	09 f0       	breq	.+2      	; 0xf78 <udc_process_setup+0x184>
     f76:	3f c0       	rjmp	.+126    	; 0xff6 <udc_process_setup+0x202>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     f78:	30 91 e5 27 	lds	r19, 0x27E5
     f7c:	3a 30       	cpi	r19, 0x0A	; 10
     f7e:	d9 f5       	brne	.+118    	; 0xff6 <udc_process_setup+0x202>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     f80:	01 97       	sbiw	r24, 0x01	; 1
     f82:	99 f5       	brne	.+102    	; 0xfea <udc_process_setup+0x1f6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     f84:	80 91 e6 22 	lds	r24, 0x22E6
     f88:	88 23       	and	r24, r24
     f8a:	89 f1       	breq	.+98     	; 0xfee <udc_process_setup+0x1fa>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     f8c:	c0 91 e8 27 	lds	r28, 0x27E8
     f90:	d0 91 e9 27 	lds	r29, 0x27E9
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     f94:	e0 90 e4 22 	lds	r14, 0x22E4
     f98:	f0 90 e5 22 	lds	r15, 0x22E5
     f9c:	d7 01       	movw	r26, r14
     f9e:	ed 91       	ld	r30, X+
     fa0:	fc 91       	ld	r31, X
     fa2:	84 81       	ldd	r24, Z+4	; 0x04
     fa4:	c8 17       	cp	r28, r24
     fa6:	28 f5       	brcc	.+74     	; 0xff2 <udc_process_setup+0x1fe>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     fa8:	60 e0       	ldi	r22, 0x00	; 0
     faa:	8c 2f       	mov	r24, r28
     fac:	12 de       	rcall	.-988    	; 0xbd2 <udc_update_iface_desc>
     fae:	08 2f       	mov	r16, r24
     fb0:	88 23       	and	r24, r24
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <udc_process_setup+0x1c2>
     fb4:	48 c1       	rjmp	.+656    	; 0x1246 <udc_process_setup+0x452>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     fb6:	ce 01       	movw	r24, r28
     fb8:	99 27       	eor	r25, r25
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	d7 01       	movw	r26, r14
     fc0:	12 96       	adiw	r26, 0x02	; 2
     fc2:	ed 91       	ld	r30, X+
     fc4:	fc 91       	ld	r31, X
     fc6:	13 97       	sbiw	r26, 0x03	; 3
     fc8:	e8 0f       	add	r30, r24
     fca:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
     fcc:	01 90       	ld	r0, Z+
     fce:	f0 81       	ld	r31, Z
     fd0:	e0 2d       	mov	r30, r0
     fd2:	06 80       	ldd	r0, Z+6	; 0x06
     fd4:	f7 81       	ldd	r31, Z+7	; 0x07
     fd6:	e0 2d       	mov	r30, r0
     fd8:	19 95       	eicall
     fda:	80 93 e1 22 	sts	0x22E1, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     fde:	61 e0       	ldi	r22, 0x01	; 1
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	81 ee       	ldi	r24, 0xE1	; 225
     fe4:	92 e2       	ldi	r25, 0x22	; 34
     fe6:	91 d5       	rcall	.+2850   	; 0x1b0a <udd_set_setup_payload>
     fe8:	2e c1       	rjmp	.+604    	; 0x1246 <udc_process_setup+0x452>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
     fea:	00 e0       	ldi	r16, 0x00	; 0
     fec:	2c c1       	rjmp	.+600    	; 0x1246 <udc_process_setup+0x452>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     fee:	00 e0       	ldi	r16, 0x00	; 0
     ff0:	2a c1       	rjmp	.+596    	; 0x1246 <udc_process_setup+0x452>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
     ff2:	00 e0       	ldi	r16, 0x00	; 0
     ff4:	28 c1       	rjmp	.+592    	; 0x1246 <udc_process_setup+0x452>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     ff6:	22 30       	cpi	r18, 0x02	; 2
     ff8:	09 f0       	breq	.+2      	; 0xffc <udc_process_setup+0x208>
     ffa:	27 c1       	rjmp	.+590    	; 0x124a <udc_process_setup+0x456>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     ffc:	20 91 e5 27 	lds	r18, 0x27E5
    1000:	21 11       	cpse	r18, r1
    1002:	1e c1       	rjmp	.+572    	; 0x1240 <udc_process_setup+0x44c>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1004:	02 97       	sbiw	r24, 0x02	; 2
    1006:	79 f4       	brne	.+30     	; 0x1026 <udc_process_setup+0x232>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1008:	80 91 e8 27 	lds	r24, 0x27E8
    100c:	e8 d5       	rcall	.+3024   	; 0x1bde <udd_ep_is_halted>
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	80 93 df 22 	sts	0x22DF, r24
    1014:	90 93 e0 22 	sts	0x22E0, r25
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1018:	62 e0       	ldi	r22, 0x02	; 2
    101a:	70 e0       	ldi	r23, 0x00	; 0
    101c:	8f ed       	ldi	r24, 0xDF	; 223
    101e:	92 e2       	ldi	r25, 0x22	; 34
    1020:	74 d5       	rcall	.+2792   	; 0x1b0a <udd_set_setup_payload>
			sizeof(udc_ep_status));
	return true;
    1022:	01 e0       	ldi	r16, 0x01	; 1
    1024:	10 c1       	rjmp	.+544    	; 0x1246 <udc_process_setup+0x452>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
    1026:	00 e0       	ldi	r16, 0x00	; 0
    1028:	0e c1       	rjmp	.+540    	; 0x1246 <udc_process_setup+0x452>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    102a:	2f 71       	andi	r18, 0x1F	; 31
    102c:	09 f0       	breq	.+2      	; 0x1030 <udc_process_setup+0x23c>
    102e:	af c0       	rjmp	.+350    	; 0x118e <udc_process_setup+0x39a>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1030:	80 91 e5 27 	lds	r24, 0x27E5
    1034:	83 30       	cpi	r24, 0x03	; 3
    1036:	b9 f1       	breq	.+110    	; 0x10a6 <udc_process_setup+0x2b2>
    1038:	18 f4       	brcc	.+6      	; 0x1040 <udc_process_setup+0x24c>
    103a:	81 30       	cpi	r24, 0x01	; 1
    103c:	b9 f0       	breq	.+46     	; 0x106c <udc_process_setup+0x278>
    103e:	a7 c0       	rjmp	.+334    	; 0x118e <udc_process_setup+0x39a>
    1040:	85 30       	cpi	r24, 0x05	; 5
    1042:	21 f0       	breq	.+8      	; 0x104c <udc_process_setup+0x258>
    1044:	89 30       	cpi	r24, 0x09	; 9
    1046:	09 f4       	brne	.+2      	; 0x104a <udc_process_setup+0x256>
    1048:	4b c0       	rjmp	.+150    	; 0x10e0 <udc_process_setup+0x2ec>
    104a:	a1 c0       	rjmp	.+322    	; 0x118e <udc_process_setup+0x39a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    104c:	80 91 ea 27 	lds	r24, 0x27EA
    1050:	90 91 eb 27 	lds	r25, 0x27EB
    1054:	89 2b       	or	r24, r25
    1056:	41 f4       	brne	.+16     	; 0x1068 <udc_process_setup+0x274>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1058:	84 ee       	ldi	r24, 0xE4	; 228
    105a:	95 e0       	ldi	r25, 0x05	; 5
    105c:	80 93 f0 27 	sts	0x27F0, r24
    1060:	90 93 f1 27 	sts	0x27F1, r25
	return true;
    1064:	01 e0       	ldi	r16, 0x01	; 1
    1066:	ef c0       	rjmp	.+478    	; 0x1246 <udc_process_setup+0x452>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    1068:	00 e0       	ldi	r16, 0x00	; 0
    106a:	ed c0       	rjmp	.+474    	; 0x1246 <udc_process_setup+0x452>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    106c:	80 91 ea 27 	lds	r24, 0x27EA
    1070:	90 91 eb 27 	lds	r25, 0x27EB
    1074:	89 2b       	or	r24, r25
    1076:	99 f4       	brne	.+38     	; 0x109e <udc_process_setup+0x2aa>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1078:	80 91 e6 27 	lds	r24, 0x27E6
    107c:	90 91 e7 27 	lds	r25, 0x27E7
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	79 f4       	brne	.+30     	; 0x10a2 <udc_process_setup+0x2ae>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1084:	80 91 e7 22 	lds	r24, 0x22E7
    1088:	90 91 e8 22 	lds	r25, 0x22E8
    108c:	8d 7f       	andi	r24, 0xFD	; 253
    108e:	80 93 e7 22 	sts	0x22E7, r24
    1092:	90 93 e8 22 	sts	0x22E8, r25
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    1096:	0e 94 1f 11 	call	0x223e	; 0x223e <main_remotewakeup_disable>
#endif
		return true;
    109a:	01 e0       	ldi	r16, 0x01	; 1
    109c:	d4 c0       	rjmp	.+424    	; 0x1246 <udc_process_setup+0x452>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    109e:	00 e0       	ldi	r16, 0x00	; 0
    10a0:	d2 c0       	rjmp	.+420    	; 0x1246 <udc_process_setup+0x452>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
    10a2:	00 e0       	ldi	r16, 0x00	; 0
    10a4:	d0 c0       	rjmp	.+416    	; 0x1246 <udc_process_setup+0x452>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    10a6:	80 91 ea 27 	lds	r24, 0x27EA
    10aa:	90 91 eb 27 	lds	r25, 0x27EB
    10ae:	89 2b       	or	r24, r25
    10b0:	99 f4       	brne	.+38     	; 0x10d8 <udc_process_setup+0x2e4>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    10b2:	80 91 e6 27 	lds	r24, 0x27E6
    10b6:	90 91 e7 27 	lds	r25, 0x27E7
    10ba:	01 97       	sbiw	r24, 0x01	; 1
    10bc:	79 f4       	brne	.+30     	; 0x10dc <udc_process_setup+0x2e8>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    10be:	80 91 e7 22 	lds	r24, 0x22E7
    10c2:	90 91 e8 22 	lds	r25, 0x22E8
    10c6:	82 60       	ori	r24, 0x02	; 2
    10c8:	80 93 e7 22 	sts	0x22E7, r24
    10cc:	90 93 e8 22 	sts	0x22E8, r25
		UDC_REMOTEWAKEUP_ENABLE();
    10d0:	0e 94 1c 11 	call	0x2238	; 0x2238 <main_remotewakeup_enable>
		return true;
    10d4:	01 e0       	ldi	r16, 0x01	; 1
    10d6:	b7 c0       	rjmp	.+366    	; 0x1246 <udc_process_setup+0x452>
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    10d8:	00 e0       	ldi	r16, 0x00	; 0
    10da:	b5 c0       	rjmp	.+362    	; 0x1246 <udc_process_setup+0x452>
		break;
#endif
	default:
		break;
	}
	return false;
    10dc:	00 e0       	ldi	r16, 0x00	; 0
    10de:	b3 c0       	rjmp	.+358    	; 0x1246 <udc_process_setup+0x452>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    10e0:	80 91 ea 27 	lds	r24, 0x27EA
    10e4:	90 91 eb 27 	lds	r25, 0x27EB
    10e8:	89 2b       	or	r24, r25
    10ea:	09 f0       	breq	.+2      	; 0x10ee <udc_process_setup+0x2fa>
    10ec:	46 c0       	rjmp	.+140    	; 0x117a <udc_process_setup+0x386>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    10ee:	f6 d4       	rcall	.+2540   	; 0x1adc <udd_getaddress>
    10f0:	88 23       	and	r24, r24
    10f2:	09 f4       	brne	.+2      	; 0x10f6 <udc_process_setup+0x302>
    10f4:	44 c0       	rjmp	.+136    	; 0x117e <udc_process_setup+0x38a>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    10f6:	20 91 e6 27 	lds	r18, 0x27E6
    10fa:	30 91 e7 27 	lds	r19, 0x27E7
    10fe:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    1100:	e0 91 48 20 	lds	r30, 0x2048
    1104:	f0 91 49 20 	lds	r31, 0x2049
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1108:	81 89       	ldd	r24, Z+17	; 0x11
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	82 17       	cp	r24, r18
    110e:	93 07       	cpc	r25, r19
    1110:	c0 f1       	brcs	.+112    	; 0x1182 <udc_process_setup+0x38e>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1112:	14 de       	rcall	.-984    	; 0xd3c <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1114:	80 91 e6 27 	lds	r24, 0x27E6
    1118:	90 91 e7 27 	lds	r25, 0x27E7
    111c:	80 93 e6 22 	sts	0x22E6, r24
	if (udc_num_configuration == 0) {
    1120:	88 23       	and	r24, r24
    1122:	89 f1       	breq	.+98     	; 0x1186 <udc_process_setup+0x392>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1124:	99 27       	eor	r25, r25
    1126:	81 50       	subi	r24, 0x01	; 1
    1128:	90 4c       	sbci	r25, 0xC0	; 192
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	e0 91 4a 20 	lds	r30, 0x204A
    1136:	f0 91 4b 20 	lds	r31, 0x204B
    113a:	e8 0f       	add	r30, r24
    113c:	f9 1f       	adc	r31, r25
    113e:	e0 93 e4 22 	sts	0x22E4, r30
    1142:	f0 93 e5 22 	sts	0x22E5, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1146:	01 90       	ld	r0, Z+
    1148:	f0 81       	ld	r31, Z
    114a:	e0 2d       	mov	r30, r0
    114c:	84 81       	ldd	r24, Z+4	; 0x04
    114e:	88 23       	and	r24, r24
    1150:	e1 f0       	breq	.+56     	; 0x118a <udc_process_setup+0x396>
    1152:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1154:	60 e0       	ldi	r22, 0x00	; 0
    1156:	8c 2f       	mov	r24, r28
    1158:	b8 dd       	rcall	.-1168   	; 0xcca <udc_iface_enable>
    115a:	08 2f       	mov	r16, r24
    115c:	88 23       	and	r24, r24
    115e:	09 f4       	brne	.+2      	; 0x1162 <udc_process_setup+0x36e>
    1160:	72 c0       	rjmp	.+228    	; 0x1246 <udc_process_setup+0x452>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1162:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1164:	e0 91 e4 22 	lds	r30, 0x22E4
    1168:	f0 91 e5 22 	lds	r31, 0x22E5
    116c:	01 90       	ld	r0, Z+
    116e:	f0 81       	ld	r31, Z
    1170:	e0 2d       	mov	r30, r0
    1172:	84 81       	ldd	r24, Z+4	; 0x04
    1174:	c8 17       	cp	r28, r24
    1176:	70 f3       	brcs	.-36     	; 0x1154 <udc_process_setup+0x360>
    1178:	66 c0       	rjmp	.+204    	; 0x1246 <udc_process_setup+0x452>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    117a:	00 e0       	ldi	r16, 0x00	; 0
    117c:	64 c0       	rjmp	.+200    	; 0x1246 <udc_process_setup+0x452>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
    117e:	00 e0       	ldi	r16, 0x00	; 0
    1180:	62 c0       	rjmp	.+196    	; 0x1246 <udc_process_setup+0x452>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
    1182:	00 e0       	ldi	r16, 0x00	; 0
    1184:	60 c0       	rjmp	.+192    	; 0x1246 <udc_process_setup+0x452>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
    1186:	01 e0       	ldi	r16, 0x01	; 1
    1188:	5e c0       	rjmp	.+188    	; 0x1246 <udc_process_setup+0x452>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
    118a:	01 e0       	ldi	r16, 0x01	; 1
    118c:	5c c0       	rjmp	.+184    	; 0x1246 <udc_process_setup+0x452>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    118e:	21 30       	cpi	r18, 0x01	; 1
    1190:	09 f5       	brne	.+66     	; 0x11d4 <udc_process_setup+0x3e0>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1192:	80 91 e5 27 	lds	r24, 0x27E5
    1196:	8b 30       	cpi	r24, 0x0B	; 11
    1198:	e9 f4       	brne	.+58     	; 0x11d4 <udc_process_setup+0x3e0>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    119a:	80 91 ea 27 	lds	r24, 0x27EA
    119e:	90 91 eb 27 	lds	r25, 0x27EB
    11a2:	89 2b       	or	r24, r25
    11a4:	99 f4       	brne	.+38     	; 0x11cc <udc_process_setup+0x3d8>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    11a6:	80 91 e6 22 	lds	r24, 0x22E6
    11aa:	88 23       	and	r24, r24
    11ac:	89 f0       	breq	.+34     	; 0x11d0 <udc_process_setup+0x3dc>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    11ae:	c0 91 e8 27 	lds	r28, 0x27E8
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    11b2:	d0 91 e6 27 	lds	r29, 0x27E6

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    11b6:	8c 2f       	mov	r24, r28
    11b8:	46 dd       	rcall	.-1396   	; 0xc46 <udc_iface_disable>
    11ba:	08 2f       	mov	r16, r24
    11bc:	88 23       	and	r24, r24
    11be:	09 f4       	brne	.+2      	; 0x11c2 <udc_process_setup+0x3ce>
    11c0:	42 c0       	rjmp	.+132    	; 0x1246 <udc_process_setup+0x452>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    11c2:	6d 2f       	mov	r22, r29
    11c4:	8c 2f       	mov	r24, r28
    11c6:	81 dd       	rcall	.-1278   	; 0xcca <udc_iface_enable>
    11c8:	08 2f       	mov	r16, r24
    11ca:	3d c0       	rjmp	.+122    	; 0x1246 <udc_process_setup+0x452>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
    11cc:	00 e0       	ldi	r16, 0x00	; 0
    11ce:	3b c0       	rjmp	.+118    	; 0x1246 <udc_process_setup+0x452>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
    11d0:	00 e0       	ldi	r16, 0x00	; 0
    11d2:	39 c0       	rjmp	.+114    	; 0x1246 <udc_process_setup+0x452>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    11d4:	22 30       	cpi	r18, 0x02	; 2
    11d6:	c9 f5       	brne	.+114    	; 0x124a <udc_process_setup+0x456>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    11d8:	80 91 e5 27 	lds	r24, 0x27E5
    11dc:	81 30       	cpi	r24, 0x01	; 1
    11de:	19 f0       	breq	.+6      	; 0x11e6 <udc_process_setup+0x3f2>
    11e0:	83 30       	cpi	r24, 0x03	; 3
    11e2:	b1 f0       	breq	.+44     	; 0x1210 <udc_process_setup+0x41c>
    11e4:	2f c0       	rjmp	.+94     	; 0x1244 <udc_process_setup+0x450>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    11e6:	80 91 ea 27 	lds	r24, 0x27EA
    11ea:	90 91 eb 27 	lds	r25, 0x27EB
    11ee:	89 2b       	or	r24, r25
    11f0:	59 f4       	brne	.+22     	; 0x1208 <udc_process_setup+0x414>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    11f2:	80 91 e6 27 	lds	r24, 0x27E6
    11f6:	90 91 e7 27 	lds	r25, 0x27E7
    11fa:	89 2b       	or	r24, r25
    11fc:	39 f4       	brne	.+14     	; 0x120c <udc_process_setup+0x418>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    11fe:	80 91 e8 27 	lds	r24, 0x27E8
    1202:	08 d5       	rcall	.+2576   	; 0x1c14 <udd_ep_clear_halt>
    1204:	08 2f       	mov	r16, r24
    1206:	1f c0       	rjmp	.+62     	; 0x1246 <udc_process_setup+0x452>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    1208:	00 e0       	ldi	r16, 0x00	; 0
    120a:	1d c0       	rjmp	.+58     	; 0x1246 <udc_process_setup+0x452>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
    120c:	00 e0       	ldi	r16, 0x00	; 0
    120e:	1b c0       	rjmp	.+54     	; 0x1246 <udc_process_setup+0x452>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1210:	80 91 ea 27 	lds	r24, 0x27EA
    1214:	90 91 eb 27 	lds	r25, 0x27EB
    1218:	89 2b       	or	r24, r25
    121a:	71 f4       	brne	.+28     	; 0x1238 <udc_process_setup+0x444>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    121c:	80 91 e6 27 	lds	r24, 0x27E6
    1220:	90 91 e7 27 	lds	r25, 0x27E7
    1224:	89 2b       	or	r24, r25
    1226:	51 f4       	brne	.+20     	; 0x123c <udc_process_setup+0x448>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1228:	c8 ee       	ldi	r28, 0xE8	; 232
    122a:	d7 e2       	ldi	r29, 0x27	; 39
    122c:	88 81       	ld	r24, Y
    122e:	8e d5       	rcall	.+2844   	; 0x1d4c <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1230:	88 81       	ld	r24, Y
    1232:	e2 d5       	rcall	.+3012   	; 0x1df8 <udd_ep_set_halt>
    1234:	08 2f       	mov	r16, r24
    1236:	07 c0       	rjmp	.+14     	; 0x1246 <udc_process_setup+0x452>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    1238:	00 e0       	ldi	r16, 0x00	; 0
    123a:	05 c0       	rjmp	.+10     	; 0x1246 <udc_process_setup+0x452>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
    123c:	00 e0       	ldi	r16, 0x00	; 0
    123e:	03 c0       	rjmp	.+6      	; 0x1246 <udc_process_setup+0x452>
				break;
			}
		}
#endif
	}
	return false;
    1240:	00 e0       	ldi	r16, 0x00	; 0
    1242:	01 c0       	rjmp	.+2      	; 0x1246 <udc_process_setup+0x452>
    1244:	00 e0       	ldi	r16, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1246:	01 11       	cpse	r16, r1
    1248:	89 c0       	rjmp	.+274    	; 0x135c <udc_process_setup+0x568>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    124a:	80 91 e4 27 	lds	r24, 0x27E4
    124e:	8f 71       	andi	r24, 0x1F	; 31
    1250:	81 30       	cpi	r24, 0x01	; 1
    1252:	c1 f5       	brne	.+112    	; 0x12c4 <udc_process_setup+0x4d0>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1254:	80 91 e6 22 	lds	r24, 0x22E6
    1258:	88 23       	and	r24, r24
    125a:	a1 f1       	breq	.+104    	; 0x12c4 <udc_process_setup+0x4d0>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    125c:	c0 91 e8 27 	lds	r28, 0x27E8
    1260:	d0 91 e9 27 	lds	r29, 0x27E9
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1264:	00 91 e4 22 	lds	r16, 0x22E4
    1268:	10 91 e5 22 	lds	r17, 0x22E5
    126c:	d8 01       	movw	r26, r16
    126e:	ed 91       	ld	r30, X+
    1270:	fc 91       	ld	r31, X
    1272:	84 81       	ldd	r24, Z+4	; 0x04
    1274:	c8 17       	cp	r28, r24
    1276:	30 f5       	brcc	.+76     	; 0x12c4 <udc_process_setup+0x4d0>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1278:	60 e0       	ldi	r22, 0x00	; 0
    127a:	8c 2f       	mov	r24, r28
    127c:	aa dc       	rcall	.-1708   	; 0xbd2 <udc_update_iface_desc>
    127e:	88 23       	and	r24, r24
    1280:	09 f1       	breq	.+66     	; 0x12c4 <udc_process_setup+0x4d0>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1282:	ce 01       	movw	r24, r28
    1284:	99 27       	eor	r25, r25
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	d8 01       	movw	r26, r16
    128c:	12 96       	adiw	r26, 0x02	; 2
    128e:	ed 91       	ld	r30, X+
    1290:	fc 91       	ld	r31, X
    1292:	13 97       	sbiw	r26, 0x03	; 3
    1294:	e8 0f       	add	r30, r24
    1296:	f9 1f       	adc	r31, r25
    1298:	00 81       	ld	r16, Z
    129a:	11 81       	ldd	r17, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    129c:	d8 01       	movw	r26, r16
    129e:	16 96       	adiw	r26, 0x06	; 6
    12a0:	ed 91       	ld	r30, X+
    12a2:	fc 91       	ld	r31, X
    12a4:	17 97       	sbiw	r26, 0x07	; 7
    12a6:	19 95       	eicall
    12a8:	68 2f       	mov	r22, r24
    12aa:	8c 2f       	mov	r24, r28
    12ac:	92 dc       	rcall	.-1756   	; 0xbd2 <udc_update_iface_desc>
    12ae:	88 23       	and	r24, r24
    12b0:	49 f0       	breq	.+18     	; 0x12c4 <udc_process_setup+0x4d0>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    12b2:	d8 01       	movw	r26, r16
    12b4:	14 96       	adiw	r26, 0x04	; 4
    12b6:	ed 91       	ld	r30, X+
    12b8:	fc 91       	ld	r31, X
    12ba:	15 97       	sbiw	r26, 0x05	; 5
    12bc:	19 95       	eicall
    12be:	08 2f       	mov	r16, r24
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    12c0:	81 11       	cpse	r24, r1
    12c2:	4c c0       	rjmp	.+152    	; 0x135c <udc_process_setup+0x568>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    12c4:	80 91 e4 27 	lds	r24, 0x27E4
    12c8:	8f 71       	andi	r24, 0x1F	; 31
    12ca:	82 30       	cpi	r24, 0x02	; 2
    12cc:	d9 f5       	brne	.+118    	; 0x1344 <udc_process_setup+0x550>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    12ce:	80 91 e6 22 	lds	r24, 0x22E6
    12d2:	88 23       	and	r24, r24
    12d4:	89 f1       	breq	.+98     	; 0x1338 <udc_process_setup+0x544>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    12d6:	e0 91 e4 22 	lds	r30, 0x22E4
    12da:	f0 91 e5 22 	lds	r31, 0x22E5
    12de:	a0 81       	ld	r26, Z
    12e0:	b1 81       	ldd	r27, Z+1	; 0x01
    12e2:	14 96       	adiw	r26, 0x04	; 4
    12e4:	8c 91       	ld	r24, X
    12e6:	88 23       	and	r24, r24
    12e8:	49 f1       	breq	.+82     	; 0x133c <udc_process_setup+0x548>
    12ea:	10 e0       	ldi	r17, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    12ec:	21 2f       	mov	r18, r17
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	22 0f       	add	r18, r18
    12f2:	33 1f       	adc	r19, r19
    12f4:	02 80       	ldd	r0, Z+2	; 0x02
    12f6:	f3 81       	ldd	r31, Z+3	; 0x03
    12f8:	e0 2d       	mov	r30, r0
    12fa:	e2 0f       	add	r30, r18
    12fc:	f3 1f       	adc	r31, r19
    12fe:	c0 81       	ld	r28, Z
    1300:	d1 81       	ldd	r29, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1302:	ee 81       	ldd	r30, Y+6	; 0x06
    1304:	ff 81       	ldd	r31, Y+7	; 0x07
    1306:	19 95       	eicall
    1308:	68 2f       	mov	r22, r24
    130a:	81 2f       	mov	r24, r17
    130c:	62 dc       	rcall	.-1852   	; 0xbd2 <udc_update_iface_desc>
    130e:	08 2f       	mov	r16, r24
    1310:	88 23       	and	r24, r24
    1312:	21 f1       	breq	.+72     	; 0x135c <udc_process_setup+0x568>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1314:	ec 81       	ldd	r30, Y+4	; 0x04
    1316:	fd 81       	ldd	r31, Y+5	; 0x05
    1318:	19 95       	eicall
    131a:	08 2f       	mov	r16, r24
    131c:	81 11       	cpse	r24, r1
    131e:	1e c0       	rjmp	.+60     	; 0x135c <udc_process_setup+0x568>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1320:	1f 5f       	subi	r17, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1322:	e0 91 e4 22 	lds	r30, 0x22E4
    1326:	f0 91 e5 22 	lds	r31, 0x22E5
    132a:	a0 81       	ld	r26, Z
    132c:	b1 81       	ldd	r27, Z+1	; 0x01
    132e:	14 96       	adiw	r26, 0x04	; 4
    1330:	8c 91       	ld	r24, X
    1332:	18 17       	cp	r17, r24
    1334:	d8 f2       	brcs	.-74     	; 0x12ec <udc_process_setup+0x4f8>
    1336:	12 c0       	rjmp	.+36     	; 0x135c <udc_process_setup+0x568>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1338:	00 e0       	ldi	r16, 0x00	; 0
    133a:	10 c0       	rjmp	.+32     	; 0x135c <udc_process_setup+0x568>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    133c:	00 e0       	ldi	r16, 0x00	; 0
    133e:	0e c0       	rjmp	.+28     	; 0x135c <udc_process_setup+0x568>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1340:	00 e0       	ldi	r16, 0x00	; 0
    1342:	0c c0       	rjmp	.+24     	; 0x135c <udc_process_setup+0x568>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1344:	00 e0       	ldi	r16, 0x00	; 0
    1346:	0a c0       	rjmp	.+20     	; 0x135c <udc_process_setup+0x568>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1348:	82 2f       	mov	r24, r18
    134a:	80 76       	andi	r24, 0x60	; 96
    134c:	09 f0       	breq	.+2      	; 0x1350 <udc_process_setup+0x55c>
    134e:	7d cf       	rjmp	.-262    	; 0x124a <udc_process_setup+0x456>
    1350:	6c ce       	rjmp	.-808    	; 0x102a <udc_process_setup+0x236>
    1352:	32 2f       	mov	r19, r18
    1354:	30 76       	andi	r19, 0x60	; 96
    1356:	09 f0       	breq	.+2      	; 0x135a <udc_process_setup+0x566>
    1358:	78 cf       	rjmp	.-272    	; 0x124a <udc_process_setup+0x456>
    135a:	6b cd       	rjmp	.-1322   	; 0xe32 <udc_process_setup+0x3e>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    135c:	80 2f       	mov	r24, r16
    135e:	df 91       	pop	r29
    1360:	cf 91       	pop	r28
    1362:	1f 91       	pop	r17
    1364:	0f 91       	pop	r16
    1366:	ff 90       	pop	r15
    1368:	ef 90       	pop	r14
    136a:	08 95       	ret

0000136c <board_init>:
    136c:	41 e0       	ldi	r20, 0x01	; 1
    136e:	50 e0       	ldi	r21, 0x00	; 0
    1370:	61 e0       	ldi	r22, 0x01	; 1
    1372:	80 ea       	ldi	r24, 0xA0	; 160
    1374:	96 e0       	ldi	r25, 0x06	; 6
    1376:	90 da       	rcall	.-2784   	; 0x898 <ioport_configure_port_pin>
    1378:	41 e0       	ldi	r20, 0x01	; 1
    137a:	50 e0       	ldi	r21, 0x00	; 0
    137c:	62 e0       	ldi	r22, 0x02	; 2
    137e:	80 ea       	ldi	r24, 0xA0	; 160
    1380:	96 e0       	ldi	r25, 0x06	; 6
    1382:	8a da       	rcall	.-2796   	; 0x898 <ioport_configure_port_pin>
    1384:	41 e0       	ldi	r20, 0x01	; 1
    1386:	50 e0       	ldi	r21, 0x00	; 0
    1388:	64 e0       	ldi	r22, 0x04	; 4
    138a:	80 ea       	ldi	r24, 0xA0	; 160
    138c:	96 e0       	ldi	r25, 0x06	; 6
    138e:	84 da       	rcall	.-2808   	; 0x898 <ioport_configure_port_pin>
    1390:	41 e0       	ldi	r20, 0x01	; 1
    1392:	50 e0       	ldi	r21, 0x00	; 0
    1394:	68 e0       	ldi	r22, 0x08	; 8
    1396:	80 ea       	ldi	r24, 0xA0	; 160
    1398:	96 e0       	ldi	r25, 0x06	; 6
    139a:	7e da       	rcall	.-2820   	; 0x898 <ioport_configure_port_pin>
    139c:	41 e0       	ldi	r20, 0x01	; 1
    139e:	50 e0       	ldi	r21, 0x00	; 0
    13a0:	60 e1       	ldi	r22, 0x10	; 16
    13a2:	80 ea       	ldi	r24, 0xA0	; 160
    13a4:	96 e0       	ldi	r25, 0x06	; 6
    13a6:	78 da       	rcall	.-2832   	; 0x898 <ioport_configure_port_pin>
    13a8:	41 e0       	ldi	r20, 0x01	; 1
    13aa:	50 e0       	ldi	r21, 0x00	; 0
    13ac:	60 e2       	ldi	r22, 0x20	; 32
    13ae:	80 ea       	ldi	r24, 0xA0	; 160
    13b0:	96 e0       	ldi	r25, 0x06	; 6
    13b2:	72 da       	rcall	.-2844   	; 0x898 <ioport_configure_port_pin>
    13b4:	41 e0       	ldi	r20, 0x01	; 1
    13b6:	50 e0       	ldi	r21, 0x00	; 0
    13b8:	60 e4       	ldi	r22, 0x40	; 64
    13ba:	80 ea       	ldi	r24, 0xA0	; 160
    13bc:	96 e0       	ldi	r25, 0x06	; 6
    13be:	6c da       	rcall	.-2856   	; 0x898 <ioport_configure_port_pin>
    13c0:	41 e0       	ldi	r20, 0x01	; 1
    13c2:	50 e0       	ldi	r21, 0x00	; 0
    13c4:	60 e8       	ldi	r22, 0x80	; 128
    13c6:	80 ea       	ldi	r24, 0xA0	; 160
    13c8:	96 e0       	ldi	r25, 0x06	; 6
    13ca:	66 da       	rcall	.-2868   	; 0x898 <ioport_configure_port_pin>
    13cc:	41 e0       	ldi	r20, 0x01	; 1
    13ce:	50 e0       	ldi	r21, 0x00	; 0
    13d0:	61 e0       	ldi	r22, 0x01	; 1
    13d2:	80 e6       	ldi	r24, 0x60	; 96
    13d4:	96 e0       	ldi	r25, 0x06	; 6
    13d6:	60 da       	rcall	.-2880   	; 0x898 <ioport_configure_port_pin>
    13d8:	40 e0       	ldi	r20, 0x00	; 0
    13da:	50 e0       	ldi	r21, 0x00	; 0
    13dc:	61 e0       	ldi	r22, 0x01	; 1
    13de:	80 e4       	ldi	r24, 0x40	; 64
    13e0:	96 e0       	ldi	r25, 0x06	; 6
    13e2:	5a da       	rcall	.-2892   	; 0x898 <ioport_configure_port_pin>
    13e4:	41 e0       	ldi	r20, 0x01	; 1
    13e6:	50 e0       	ldi	r21, 0x00	; 0
    13e8:	62 e0       	ldi	r22, 0x02	; 2
    13ea:	80 e6       	ldi	r24, 0x60	; 96
    13ec:	96 e0       	ldi	r25, 0x06	; 6
    13ee:	54 da       	rcall	.-2904   	; 0x898 <ioport_configure_port_pin>
    13f0:	41 e0       	ldi	r20, 0x01	; 1
    13f2:	50 e0       	ldi	r21, 0x00	; 0
    13f4:	60 e2       	ldi	r22, 0x20	; 32
    13f6:	80 e6       	ldi	r24, 0x60	; 96
    13f8:	96 e0       	ldi	r25, 0x06	; 6
    13fa:	4e da       	rcall	.-2916   	; 0x898 <ioport_configure_port_pin>
    13fc:	41 e0       	ldi	r20, 0x01	; 1
    13fe:	50 e0       	ldi	r21, 0x00	; 0
    1400:	60 e1       	ldi	r22, 0x10	; 16
    1402:	80 e6       	ldi	r24, 0x60	; 96
    1404:	96 e0       	ldi	r25, 0x06	; 6
    1406:	48 da       	rcall	.-2928   	; 0x898 <ioport_configure_port_pin>
    1408:	40 e0       	ldi	r20, 0x00	; 0
    140a:	58 e1       	ldi	r21, 0x18	; 24
    140c:	61 e0       	ldi	r22, 0x01	; 1
    140e:	80 e2       	ldi	r24, 0x20	; 32
    1410:	96 e0       	ldi	r25, 0x06	; 6
    1412:	42 da       	rcall	.-2940   	; 0x898 <ioport_configure_port_pin>
    1414:	40 e0       	ldi	r20, 0x00	; 0
    1416:	58 e1       	ldi	r21, 0x18	; 24
    1418:	62 e0       	ldi	r22, 0x02	; 2
    141a:	80 e2       	ldi	r24, 0x20	; 32
    141c:	96 e0       	ldi	r25, 0x06	; 6
    141e:	3c da       	rcall	.-2952   	; 0x898 <ioport_configure_port_pin>
    1420:	40 e0       	ldi	r20, 0x00	; 0
    1422:	58 e1       	ldi	r21, 0x18	; 24
    1424:	64 e0       	ldi	r22, 0x04	; 4
    1426:	80 e2       	ldi	r24, 0x20	; 32
    1428:	96 e0       	ldi	r25, 0x06	; 6
    142a:	36 da       	rcall	.-2964   	; 0x898 <ioport_configure_port_pin>
    142c:	40 e0       	ldi	r20, 0x00	; 0
    142e:	58 e1       	ldi	r21, 0x18	; 24
    1430:	68 e0       	ldi	r22, 0x08	; 8
    1432:	80 e2       	ldi	r24, 0x20	; 32
    1434:	96 e0       	ldi	r25, 0x06	; 6
    1436:	30 ca       	rjmp	.-2976   	; 0x898 <ioport_configure_port_pin>
    1438:	08 95       	ret

0000143a <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    143a:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    143c:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    143e:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1440:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1442:	60 83       	st	Z, r22
	ret                             // Return to caller
    1444:	08 95       	ret

00001446 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1446:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    144a:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    144c:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    144e:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    1452:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1454:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1458:	08 95       	ret

0000145a <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    145a:	81 11       	cpse	r24, r1
    145c:	18 c0       	rjmp	.+48     	; 0x148e <udd_sleep_mode+0x34>
    145e:	90 91 dc 23 	lds	r25, 0x23DC
    1462:	99 23       	and	r25, r25
    1464:	89 f0       	breq	.+34     	; 0x1488 <udd_sleep_mode+0x2e>
    1466:	9f b7       	in	r25, 0x3f	; 63
    1468:	f8 94       	cli
    146a:	ef ed       	ldi	r30, 0xDF	; 223
    146c:	f7 e2       	ldi	r31, 0x27	; 39
    146e:	20 81       	ld	r18, Z
    1470:	21 50       	subi	r18, 0x01	; 1
    1472:	20 83       	st	Z, r18
    1474:	9f bf       	out	0x3f, r25	; 63
    1476:	08 c0       	rjmp	.+16     	; 0x1488 <udd_sleep_mode+0x2e>
    1478:	9f b7       	in	r25, 0x3f	; 63
    147a:	f8 94       	cli
    147c:	ef ed       	ldi	r30, 0xDF	; 223
    147e:	f7 e2       	ldi	r31, 0x27	; 39
    1480:	20 81       	ld	r18, Z
    1482:	2f 5f       	subi	r18, 0xFF	; 255
    1484:	20 83       	st	Z, r18
    1486:	9f bf       	out	0x3f, r25	; 63
    1488:	80 93 dc 23 	sts	0x23DC, r24
    148c:	08 95       	ret
    148e:	90 91 dc 23 	lds	r25, 0x23DC
    1492:	99 23       	and	r25, r25
    1494:	89 f3       	breq	.-30     	; 0x1478 <udd_sleep_mode+0x1e>
    1496:	f8 cf       	rjmp	.-16     	; 0x1488 <udd_sleep_mode+0x2e>

00001498 <udd_ctrl_init>:
    1498:	0f 93       	push	r16
    149a:	e8 ec       	ldi	r30, 0xC8	; 200
    149c:	f4 e0       	ldi	r31, 0x04	; 4
    149e:	80 81       	ld	r24, Z
    14a0:	8f 7d       	andi	r24, 0xDF	; 223
    14a2:	80 83       	st	Z, r24
    14a4:	80 81       	ld	r24, Z
    14a6:	8f 7d       	andi	r24, 0xDF	; 223
    14a8:	80 83       	st	Z, r24
    14aa:	e0 eb       	ldi	r30, 0xB0	; 176
    14ac:	f3 e2       	ldi	r31, 0x23	; 35
    14ae:	02 e0       	ldi	r16, 0x02	; 2
    14b0:	05 93       	las	Z, r16
    14b2:	10 92 b2 23 	sts	0x23B2, r1
    14b6:	10 92 b3 23 	sts	0x23B3, r1
    14ba:	00 e2       	ldi	r16, 0x20	; 32
    14bc:	06 93       	lac	Z, r16
    14be:	00 e4       	ldi	r16, 0x40	; 64
    14c0:	06 93       	lac	Z, r16
    14c2:	e8 ea       	ldi	r30, 0xA8	; 168
    14c4:	f3 e2       	ldi	r31, 0x23	; 35
    14c6:	00 e2       	ldi	r16, 0x20	; 32
    14c8:	06 93       	lac	Z, r16
    14ca:	00 e4       	ldi	r16, 0x40	; 64
    14cc:	06 93       	lac	Z, r16
    14ce:	10 92 f0 27 	sts	0x27F0, r1
    14d2:	10 92 f1 27 	sts	0x27F1, r1
    14d6:	10 92 f2 27 	sts	0x27F2, r1
    14da:	10 92 f3 27 	sts	0x27F3, r1
    14de:	10 92 ee 27 	sts	0x27EE, r1
    14e2:	10 92 ef 27 	sts	0x27EF, r1
    14e6:	10 92 9a 23 	sts	0x239A, r1
    14ea:	0f 91       	pop	r16
    14ec:	08 95       	ret

000014ee <udd_ctrl_stall_data>:
    14ee:	0f 93       	push	r16
    14f0:	85 e0       	ldi	r24, 0x05	; 5
    14f2:	80 93 9a 23 	sts	0x239A, r24
    14f6:	e1 eb       	ldi	r30, 0xB1	; 177
    14f8:	f3 e2       	ldi	r31, 0x23	; 35
    14fa:	04 e0       	ldi	r16, 0x04	; 4
    14fc:	05 93       	las	Z, r16
    14fe:	e9 ea       	ldi	r30, 0xA9	; 169
    1500:	f3 e2       	ldi	r31, 0x23	; 35
    1502:	04 e0       	ldi	r16, 0x04	; 4
    1504:	05 93       	las	Z, r16
    1506:	0f 91       	pop	r16
    1508:	08 95       	ret

0000150a <udd_ctrl_send_zlp_in>:
    150a:	0f 93       	push	r16
    150c:	83 e0       	ldi	r24, 0x03	; 3
    150e:	80 93 9a 23 	sts	0x239A, r24
    1512:	10 92 b2 23 	sts	0x23B2, r1
    1516:	10 92 b3 23 	sts	0x23B3, r1
    151a:	e0 eb       	ldi	r30, 0xB0	; 176
    151c:	f3 e2       	ldi	r31, 0x23	; 35
    151e:	02 e0       	ldi	r16, 0x02	; 2
    1520:	06 93       	lac	Z, r16
    1522:	0f 91       	pop	r16
    1524:	08 95       	ret

00001526 <udd_ctrl_endofrequest>:
    1526:	e0 91 f0 27 	lds	r30, 0x27F0
    152a:	f0 91 f1 27 	lds	r31, 0x27F1
    152e:	30 97       	sbiw	r30, 0x00	; 0
    1530:	09 f0       	breq	.+2      	; 0x1534 <udd_ctrl_endofrequest+0xe>
    1532:	19 95       	eicall
    1534:	08 95       	ret

00001536 <udd_ctrl_in_sent>:
    1536:	0f 93       	push	r16
    1538:	cf 93       	push	r28
    153a:	df 93       	push	r29
    153c:	80 91 9a 23 	lds	r24, 0x239A
    1540:	83 30       	cpi	r24, 0x03	; 3
    1542:	19 f4       	brne	.+6      	; 0x154a <udd_ctrl_in_sent+0x14>
    1544:	f0 df       	rcall	.-32     	; 0x1526 <udd_ctrl_endofrequest>
    1546:	a8 df       	rcall	.-176    	; 0x1498 <udd_ctrl_init>
    1548:	60 c0       	rjmp	.+192    	; 0x160a <udd_ctrl_in_sent+0xd4>
    154a:	80 91 96 23 	lds	r24, 0x2396
    154e:	90 91 97 23 	lds	r25, 0x2397
    1552:	c0 91 ee 27 	lds	r28, 0x27EE
    1556:	d0 91 ef 27 	lds	r29, 0x27EF
    155a:	c8 1b       	sub	r28, r24
    155c:	d9 0b       	sbc	r29, r25
    155e:	71 f5       	brne	.+92     	; 0x15bc <udd_ctrl_in_sent+0x86>
    1560:	20 91 98 23 	lds	r18, 0x2398
    1564:	30 91 99 23 	lds	r19, 0x2399
    1568:	82 0f       	add	r24, r18
    156a:	93 1f       	adc	r25, r19
    156c:	80 93 98 23 	sts	0x2398, r24
    1570:	90 93 99 23 	sts	0x2399, r25
    1574:	20 91 ea 27 	lds	r18, 0x27EA
    1578:	30 91 eb 27 	lds	r19, 0x27EB
    157c:	82 17       	cp	r24, r18
    157e:	93 07       	cpc	r25, r19
    1580:	21 f0       	breq	.+8      	; 0x158a <udd_ctrl_in_sent+0x54>
    1582:	80 91 e9 22 	lds	r24, 0x22E9
    1586:	88 23       	and	r24, r24
    1588:	41 f0       	breq	.+16     	; 0x159a <udd_ctrl_in_sent+0x64>
    158a:	84 e0       	ldi	r24, 0x04	; 4
    158c:	80 93 9a 23 	sts	0x239A, r24
    1590:	e8 ea       	ldi	r30, 0xA8	; 168
    1592:	f3 e2       	ldi	r31, 0x23	; 35
    1594:	02 e0       	ldi	r16, 0x02	; 2
    1596:	06 93       	lac	Z, r16
    1598:	38 c0       	rjmp	.+112    	; 0x160a <udd_ctrl_in_sent+0xd4>
    159a:	e0 91 f2 27 	lds	r30, 0x27F2
    159e:	f0 91 f3 27 	lds	r31, 0x27F3
    15a2:	30 97       	sbiw	r30, 0x00	; 0
    15a4:	99 f0       	breq	.+38     	; 0x15cc <udd_ctrl_in_sent+0x96>
    15a6:	19 95       	eicall
    15a8:	88 23       	and	r24, r24
    15aa:	81 f0       	breq	.+32     	; 0x15cc <udd_ctrl_in_sent+0x96>
    15ac:	10 92 96 23 	sts	0x2396, r1
    15b0:	10 92 97 23 	sts	0x2397, r1
    15b4:	c0 91 ee 27 	lds	r28, 0x27EE
    15b8:	d0 91 ef 27 	lds	r29, 0x27EF
    15bc:	c8 30       	cpi	r28, 0x08	; 8
    15be:	d1 05       	cpc	r29, r1
    15c0:	28 f0       	brcs	.+10     	; 0x15cc <udd_ctrl_in_sent+0x96>
    15c2:	10 92 e9 22 	sts	0x22E9, r1
    15c6:	c8 e0       	ldi	r28, 0x08	; 8
    15c8:	d0 e0       	ldi	r29, 0x00	; 0
    15ca:	03 c0       	rjmp	.+6      	; 0x15d2 <udd_ctrl_in_sent+0x9c>
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	80 93 e9 22 	sts	0x22E9, r24
    15d2:	c0 93 b2 23 	sts	0x23B2, r28
    15d6:	d0 93 b3 23 	sts	0x23B3, r29
    15da:	80 91 96 23 	lds	r24, 0x2396
    15de:	90 91 97 23 	lds	r25, 0x2397
    15e2:	20 91 ec 27 	lds	r18, 0x27EC
    15e6:	30 91 ed 27 	lds	r19, 0x27ED
    15ea:	28 0f       	add	r18, r24
    15ec:	39 1f       	adc	r19, r25
    15ee:	20 93 b4 23 	sts	0x23B4, r18
    15f2:	30 93 b5 23 	sts	0x23B5, r19
    15f6:	c8 0f       	add	r28, r24
    15f8:	d9 1f       	adc	r29, r25
    15fa:	c0 93 96 23 	sts	0x2396, r28
    15fe:	d0 93 97 23 	sts	0x2397, r29
    1602:	e0 eb       	ldi	r30, 0xB0	; 176
    1604:	f3 e2       	ldi	r31, 0x23	; 35
    1606:	02 e0       	ldi	r16, 0x02	; 2
    1608:	06 93       	lac	Z, r16
    160a:	df 91       	pop	r29
    160c:	cf 91       	pop	r28
    160e:	0f 91       	pop	r16
    1610:	08 95       	ret

00001612 <udd_ep_get_job>:
    1612:	28 2f       	mov	r18, r24
    1614:	2f 70       	andi	r18, 0x0F	; 15
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	22 0f       	add	r18, r18
    161a:	33 1f       	adc	r19, r19
    161c:	99 27       	eor	r25, r25
    161e:	87 fd       	sbrc	r24, 7
    1620:	90 95       	com	r25
    1622:	88 27       	eor	r24, r24
    1624:	99 0f       	add	r25, r25
    1626:	88 1f       	adc	r24, r24
    1628:	99 27       	eor	r25, r25
    162a:	82 0f       	add	r24, r18
    162c:	93 1f       	adc	r25, r19
    162e:	02 97       	sbiw	r24, 0x02	; 2
    1630:	9c 01       	movw	r18, r24
    1632:	22 0f       	add	r18, r18
    1634:	33 1f       	adc	r19, r19
    1636:	22 0f       	add	r18, r18
    1638:	33 1f       	adc	r19, r19
    163a:	22 0f       	add	r18, r18
    163c:	33 1f       	adc	r19, r19
    163e:	82 0f       	add	r24, r18
    1640:	93 1f       	adc	r25, r19
    1642:	86 59       	subi	r24, 0x96	; 150
    1644:	9c 4d       	sbci	r25, 0xDC	; 220
    1646:	08 95       	ret

00001648 <udd_ctrl_interrupt_tc_setup>:
    1648:	0f 93       	push	r16
    164a:	cf 93       	push	r28
    164c:	80 91 cc 04 	lds	r24, 0x04CC
    1650:	80 ff       	sbrs	r24, 0
    1652:	62 c0       	rjmp	.+196    	; 0x1718 <udd_ctrl_interrupt_tc_setup+0xd0>
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	80 93 cc 04 	sts	0x04CC, r24
    165a:	e8 ea       	ldi	r30, 0xA8	; 168
    165c:	f3 e2       	ldi	r31, 0x23	; 35
    165e:	00 e8       	ldi	r16, 0x80	; 128
    1660:	06 93       	lac	Z, r16
    1662:	e0 eb       	ldi	r30, 0xB0	; 176
    1664:	f3 e2       	ldi	r31, 0x23	; 35
    1666:	00 e8       	ldi	r16, 0x80	; 128
    1668:	06 93       	lac	Z, r16
    166a:	80 93 ca 04 	sts	0x04CA, r24
    166e:	e8 ea       	ldi	r30, 0xA8	; 168
    1670:	f3 e2       	ldi	r31, 0x23	; 35
    1672:	00 e1       	ldi	r16, 0x10	; 16
    1674:	06 93       	lac	Z, r16
    1676:	80 91 9a 23 	lds	r24, 0x239A
    167a:	88 23       	and	r24, r24
    167c:	29 f0       	breq	.+10     	; 0x1688 <udd_ctrl_interrupt_tc_setup+0x40>
    167e:	83 50       	subi	r24, 0x03	; 3
    1680:	82 30       	cpi	r24, 0x02	; 2
    1682:	08 f4       	brcc	.+2      	; 0x1686 <udd_ctrl_interrupt_tc_setup+0x3e>
    1684:	50 df       	rcall	.-352    	; 0x1526 <udd_ctrl_endofrequest>
    1686:	08 df       	rcall	.-496    	; 0x1498 <udd_ctrl_init>
    1688:	80 91 aa 23 	lds	r24, 0x23AA
    168c:	90 91 ab 23 	lds	r25, 0x23AB
    1690:	08 97       	sbiw	r24, 0x08	; 8
    1692:	09 f0       	breq	.+2      	; 0x1696 <udd_ctrl_interrupt_tc_setup+0x4e>
    1694:	43 c0       	rjmp	.+134    	; 0x171c <udd_ctrl_interrupt_tc_setup+0xd4>
    1696:	88 e0       	ldi	r24, 0x08	; 8
    1698:	ee e8       	ldi	r30, 0x8E	; 142
    169a:	f3 e2       	ldi	r31, 0x23	; 35
    169c:	a4 ee       	ldi	r26, 0xE4	; 228
    169e:	b7 e2       	ldi	r27, 0x27	; 39
    16a0:	01 90       	ld	r0, Z+
    16a2:	0d 92       	st	X+, r0
    16a4:	8a 95       	dec	r24
    16a6:	e1 f7       	brne	.-8      	; 0x16a0 <udd_ctrl_interrupt_tc_setup+0x58>
    16a8:	e8 ec       	ldi	r30, 0xC8	; 200
    16aa:	f4 e0       	ldi	r31, 0x04	; 4
    16ac:	80 81       	ld	r24, Z
    16ae:	80 62       	ori	r24, 0x20	; 32
    16b0:	80 83       	st	Z, r24
    16b2:	80 81       	ld	r24, Z
    16b4:	80 62       	ori	r24, 0x20	; 32
    16b6:	80 83       	st	Z, r24
    16b8:	9d db       	rcall	.-2246   	; 0xdf4 <udc_process_setup>
    16ba:	c8 2f       	mov	r28, r24
    16bc:	81 11       	cpse	r24, r1
    16be:	03 c0       	rjmp	.+6      	; 0x16c6 <udd_ctrl_interrupt_tc_setup+0x7e>
    16c0:	16 df       	rcall	.-468    	; 0x14ee <udd_ctrl_stall_data>
    16c2:	c1 e0       	ldi	r28, 0x01	; 1
    16c4:	2c c0       	rjmp	.+88     	; 0x171e <udd_ctrl_interrupt_tc_setup+0xd6>
    16c6:	80 91 e4 27 	lds	r24, 0x27E4
    16ca:	88 23       	and	r24, r24
    16cc:	6c f4       	brge	.+26     	; 0x16e8 <udd_ctrl_interrupt_tc_setup+0xa0>
    16ce:	10 92 98 23 	sts	0x2398, r1
    16d2:	10 92 99 23 	sts	0x2399, r1
    16d6:	10 92 96 23 	sts	0x2396, r1
    16da:	10 92 97 23 	sts	0x2397, r1
    16de:	82 e0       	ldi	r24, 0x02	; 2
    16e0:	80 93 9a 23 	sts	0x239A, r24
    16e4:	28 df       	rcall	.-432    	; 0x1536 <udd_ctrl_in_sent>
    16e6:	1b c0       	rjmp	.+54     	; 0x171e <udd_ctrl_interrupt_tc_setup+0xd6>
    16e8:	20 91 ea 27 	lds	r18, 0x27EA
    16ec:	30 91 eb 27 	lds	r19, 0x27EB
    16f0:	23 2b       	or	r18, r19
    16f2:	11 f4       	brne	.+4      	; 0x16f8 <udd_ctrl_interrupt_tc_setup+0xb0>
    16f4:	0a df       	rcall	.-492    	; 0x150a <udd_ctrl_send_zlp_in>
    16f6:	13 c0       	rjmp	.+38     	; 0x171e <udd_ctrl_interrupt_tc_setup+0xd6>
    16f8:	10 92 98 23 	sts	0x2398, r1
    16fc:	10 92 99 23 	sts	0x2399, r1
    1700:	10 92 96 23 	sts	0x2396, r1
    1704:	10 92 97 23 	sts	0x2397, r1
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	80 93 9a 23 	sts	0x239A, r24
    170e:	e8 ea       	ldi	r30, 0xA8	; 168
    1710:	f3 e2       	ldi	r31, 0x23	; 35
    1712:	02 e0       	ldi	r16, 0x02	; 2
    1714:	06 93       	lac	Z, r16
    1716:	03 c0       	rjmp	.+6      	; 0x171e <udd_ctrl_interrupt_tc_setup+0xd6>
    1718:	c0 e0       	ldi	r28, 0x00	; 0
    171a:	01 c0       	rjmp	.+2      	; 0x171e <udd_ctrl_interrupt_tc_setup+0xd6>
    171c:	c1 e0       	ldi	r28, 0x01	; 1
    171e:	8c 2f       	mov	r24, r28
    1720:	cf 91       	pop	r28
    1722:	0f 91       	pop	r16
    1724:	08 95       	ret

00001726 <udd_ep_trans_complet>:
    1726:	bf 92       	push	r11
    1728:	cf 92       	push	r12
    172a:	df 92       	push	r13
    172c:	ef 92       	push	r14
    172e:	ff 92       	push	r15
    1730:	0f 93       	push	r16
    1732:	1f 93       	push	r17
    1734:	cf 93       	push	r28
    1736:	df 93       	push	r29
    1738:	b8 2e       	mov	r11, r24
    173a:	6b df       	rcall	.-298    	; 0x1612 <udd_ep_get_job>
    173c:	ec 01       	movw	r28, r24
    173e:	8b 2d       	mov	r24, r11
    1740:	88 1f       	adc	r24, r24
    1742:	88 27       	eor	r24, r24
    1744:	88 1f       	adc	r24, r24
    1746:	9b 2d       	mov	r25, r11
    1748:	9f 70       	andi	r25, 0x0F	; 15
    174a:	e9 2e       	mov	r14, r25
    174c:	f1 2c       	mov	r15, r1
    174e:	ee 0c       	add	r14, r14
    1750:	ff 1c       	adc	r15, r15
    1752:	e8 0e       	add	r14, r24
    1754:	f1 1c       	adc	r15, r1
    1756:	97 01       	movw	r18, r14
    1758:	22 0f       	add	r18, r18
    175a:	33 1f       	adc	r19, r19
    175c:	22 0f       	add	r18, r18
    175e:	33 1f       	adc	r19, r19
    1760:	22 0f       	add	r18, r18
    1762:	33 1f       	adc	r19, r19
    1764:	a9 01       	movw	r20, r18
    1766:	48 55       	subi	r20, 0x58	; 88
    1768:	5c 4d       	sbci	r21, 0xDC	; 220
    176a:	7a 01       	movw	r14, r20
    176c:	fa 01       	movw	r30, r20
    176e:	01 81       	ldd	r16, Z+1	; 0x01
    1770:	07 70       	andi	r16, 0x07	; 7
    1772:	10 e0       	ldi	r17, 0x00	; 0
    1774:	f8 01       	movw	r30, r16
    1776:	31 97       	sbiw	r30, 0x01	; 1
    1778:	e7 30       	cpi	r30, 0x07	; 7
    177a:	f1 05       	cpc	r31, r1
    177c:	18 f4       	brcc	.+6      	; 0x1784 <udd_ep_trans_complet+0x5e>
    177e:	e2 50       	subi	r30, 0x02	; 2
    1780:	ff 4f       	sbci	r31, 0xFF	; 255
    1782:	8d c5       	rjmp	.+2842   	; 0x229e <__tablejump2__>
    1784:	68 94       	set
    1786:	cc 24       	eor	r12, r12
    1788:	c3 f8       	bld	r12, 3
    178a:	d1 2c       	mov	r13, r1
    178c:	23 c0       	rjmp	.+70     	; 0x17d4 <udd_ep_trans_complet+0xae>
    178e:	68 94       	set
    1790:	cc 24       	eor	r12, r12
    1792:	c5 f8       	bld	r12, 5
    1794:	d1 2c       	mov	r13, r1
    1796:	1e c0       	rjmp	.+60     	; 0x17d4 <udd_ep_trans_complet+0xae>
    1798:	68 94       	set
    179a:	cc 24       	eor	r12, r12
    179c:	c6 f8       	bld	r12, 6
    179e:	d1 2c       	mov	r13, r1
    17a0:	19 c0       	rjmp	.+50     	; 0x17d4 <udd_ep_trans_complet+0xae>
    17a2:	68 94       	set
    17a4:	cc 24       	eor	r12, r12
    17a6:	c7 f8       	bld	r12, 7
    17a8:	d1 2c       	mov	r13, r1
    17aa:	14 c0       	rjmp	.+40     	; 0x17d4 <udd_ep_trans_complet+0xae>
    17ac:	c1 2c       	mov	r12, r1
    17ae:	dd 24       	eor	r13, r13
    17b0:	d3 94       	inc	r13
    17b2:	10 c0       	rjmp	.+32     	; 0x17d4 <udd_ep_trans_complet+0xae>
    17b4:	c1 2c       	mov	r12, r1
    17b6:	68 94       	set
    17b8:	dd 24       	eor	r13, r13
    17ba:	d1 f8       	bld	r13, 1
    17bc:	0b c0       	rjmp	.+22     	; 0x17d4 <udd_ep_trans_complet+0xae>
    17be:	0f 2e       	mov	r0, r31
    17c0:	cc 24       	eor	r12, r12
    17c2:	ca 94       	dec	r12
    17c4:	f3 e0       	ldi	r31, 0x03	; 3
    17c6:	df 2e       	mov	r13, r31
    17c8:	f0 2d       	mov	r31, r0
    17ca:	04 c0       	rjmp	.+8      	; 0x17d4 <udd_ep_trans_complet+0xae>
    17cc:	68 94       	set
    17ce:	cc 24       	eor	r12, r12
    17d0:	c4 f8       	bld	r12, 4
    17d2:	d1 2c       	mov	r13, r1
    17d4:	88 23       	and	r24, r24
    17d6:	09 f4       	brne	.+2      	; 0x17da <udd_ep_trans_complet+0xb4>
    17d8:	4b c0       	rjmp	.+150    	; 0x1870 <udd_ep_trans_complet+0x14a>
    17da:	f7 01       	movw	r30, r14
    17dc:	26 81       	ldd	r18, Z+6	; 0x06
    17de:	37 81       	ldd	r19, Z+7	; 0x07
    17e0:	8d 81       	ldd	r24, Y+5	; 0x05
    17e2:	9e 81       	ldd	r25, Y+6	; 0x06
    17e4:	28 0f       	add	r18, r24
    17e6:	39 1f       	adc	r19, r25
    17e8:	2d 83       	std	Y+5, r18	; 0x05
    17ea:	3e 83       	std	Y+6, r19	; 0x06
    17ec:	8b 81       	ldd	r24, Y+3	; 0x03
    17ee:	9c 81       	ldd	r25, Y+4	; 0x04
    17f0:	28 17       	cp	r18, r24
    17f2:	39 07       	cpc	r19, r25
    17f4:	81 f1       	breq	.+96     	; 0x1856 <udd_ep_trans_complet+0x130>
    17f6:	ac 01       	movw	r20, r24
    17f8:	42 1b       	sub	r20, r18
    17fa:	53 0b       	sbc	r21, r19
    17fc:	9a 01       	movw	r18, r20
    17fe:	21 15       	cp	r18, r1
    1800:	54 e0       	ldi	r21, 0x04	; 4
    1802:	35 07       	cpc	r19, r21
    1804:	38 f0       	brcs	.+14     	; 0x1814 <udd_ep_trans_complet+0xee>
    1806:	2f ef       	ldi	r18, 0xFF	; 255
    1808:	33 e0       	ldi	r19, 0x03	; 3
    180a:	c9 01       	movw	r24, r18
    180c:	b6 01       	movw	r22, r12
    180e:	33 d5       	rcall	.+2662   	; 0x2276 <__udivmodhi4>
    1810:	28 1b       	sub	r18, r24
    1812:	39 0b       	sbc	r19, r25
    1814:	88 81       	ld	r24, Y
    1816:	81 ff       	sbrs	r24, 1
    1818:	09 c0       	rjmp	.+18     	; 0x182c <udd_ep_trans_complet+0x106>
    181a:	c9 01       	movw	r24, r18
    181c:	b6 01       	movw	r22, r12
    181e:	2b d5       	rcall	.+2646   	; 0x2276 <__udivmodhi4>
    1820:	41 e0       	ldi	r20, 0x01	; 1
    1822:	89 2b       	or	r24, r25
    1824:	09 f0       	breq	.+2      	; 0x1828 <udd_ep_trans_complet+0x102>
    1826:	40 e0       	ldi	r20, 0x00	; 0
    1828:	94 2f       	mov	r25, r20
    182a:	01 c0       	rjmp	.+2      	; 0x182e <udd_ep_trans_complet+0x108>
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	88 81       	ld	r24, Y
    1830:	90 fb       	bst	r25, 0
    1832:	81 f9       	bld	r24, 1
    1834:	88 83       	st	Y, r24
    1836:	f7 01       	movw	r30, r14
    1838:	16 82       	std	Z+6, r1	; 0x06
    183a:	17 82       	std	Z+7, r1	; 0x07
    183c:	22 83       	std	Z+2, r18	; 0x02
    183e:	33 83       	std	Z+3, r19	; 0x03
    1840:	29 81       	ldd	r18, Y+1	; 0x01
    1842:	3a 81       	ldd	r19, Y+2	; 0x02
    1844:	8d 81       	ldd	r24, Y+5	; 0x05
    1846:	9e 81       	ldd	r25, Y+6	; 0x06
    1848:	82 0f       	add	r24, r18
    184a:	93 1f       	adc	r25, r19
    184c:	84 83       	std	Z+4, r24	; 0x04
    184e:	95 83       	std	Z+5, r25	; 0x05
    1850:	02 e0       	ldi	r16, 0x02	; 2
    1852:	06 93       	lac	Z, r16
    1854:	87 c0       	rjmp	.+270    	; 0x1964 <udd_ep_trans_complet+0x23e>
    1856:	88 81       	ld	r24, Y
    1858:	81 ff       	sbrs	r24, 1
    185a:	76 c0       	rjmp	.+236    	; 0x1948 <udd_ep_trans_complet+0x222>
    185c:	8d 7f       	andi	r24, 0xFD	; 253
    185e:	88 83       	st	Y, r24
    1860:	f7 01       	movw	r30, r14
    1862:	16 82       	std	Z+6, r1	; 0x06
    1864:	17 82       	std	Z+7, r1	; 0x07
    1866:	12 82       	std	Z+2, r1	; 0x02
    1868:	13 82       	std	Z+3, r1	; 0x03
    186a:	02 e0       	ldi	r16, 0x02	; 2
    186c:	06 93       	lac	Z, r16
    186e:	7a c0       	rjmp	.+244    	; 0x1964 <udd_ep_trans_complet+0x23e>
    1870:	f7 01       	movw	r30, r14
    1872:	02 81       	ldd	r16, Z+2	; 0x02
    1874:	13 81       	ldd	r17, Z+3	; 0x03
    1876:	88 81       	ld	r24, Y
    1878:	82 ff       	sbrs	r24, 2
    187a:	13 c0       	rjmp	.+38     	; 0x18a2 <udd_ep_trans_complet+0x17c>
    187c:	e9 81       	ldd	r30, Y+1	; 0x01
    187e:	fa 81       	ldd	r31, Y+2	; 0x02
    1880:	2d 81       	ldd	r18, Y+5	; 0x05
    1882:	3e 81       	ldd	r19, Y+6	; 0x06
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	9c 81       	ldd	r25, Y+4	; 0x04
    1888:	b6 01       	movw	r22, r12
    188a:	f5 d4       	rcall	.+2538   	; 0x2276 <__udivmodhi4>
    188c:	40 e4       	ldi	r20, 0x40	; 64
    188e:	b4 9e       	mul	r11, r20
    1890:	b0 01       	movw	r22, r0
    1892:	11 24       	eor	r1, r1
    1894:	66 55       	subi	r22, 0x56	; 86
    1896:	7d 4d       	sbci	r23, 0xDD	; 221
    1898:	ac 01       	movw	r20, r24
    189a:	cf 01       	movw	r24, r30
    189c:	82 0f       	add	r24, r18
    189e:	93 1f       	adc	r25, r19
    18a0:	04 d5       	rcall	.+2568   	; 0x22aa <memcpy>
    18a2:	2d 81       	ldd	r18, Y+5	; 0x05
    18a4:	3e 81       	ldd	r19, Y+6	; 0x06
    18a6:	20 0f       	add	r18, r16
    18a8:	31 1f       	adc	r19, r17
    18aa:	2d 83       	std	Y+5, r18	; 0x05
    18ac:	3e 83       	std	Y+6, r19	; 0x06
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	9c 81       	ldd	r25, Y+4	; 0x04
    18b2:	82 17       	cp	r24, r18
    18b4:	93 07       	cpc	r25, r19
    18b6:	10 f4       	brcc	.+4      	; 0x18bc <udd_ep_trans_complet+0x196>
    18b8:	8d 83       	std	Y+5, r24	; 0x05
    18ba:	9e 83       	std	Y+6, r25	; 0x06
    18bc:	f7 01       	movw	r30, r14
    18be:	26 81       	ldd	r18, Z+6	; 0x06
    18c0:	37 81       	ldd	r19, Z+7	; 0x07
    18c2:	20 17       	cp	r18, r16
    18c4:	31 07       	cpc	r19, r17
    18c6:	09 f0       	breq	.+2      	; 0x18ca <udd_ep_trans_complet+0x1a4>
    18c8:	3f c0       	rjmp	.+126    	; 0x1948 <udd_ep_trans_complet+0x222>
    18ca:	2d 81       	ldd	r18, Y+5	; 0x05
    18cc:	3e 81       	ldd	r19, Y+6	; 0x06
    18ce:	82 17       	cp	r24, r18
    18d0:	93 07       	cpc	r25, r19
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <udd_ep_trans_complet+0x1b0>
    18d4:	39 c0       	rjmp	.+114    	; 0x1948 <udd_ep_trans_complet+0x222>
    18d6:	ac 01       	movw	r20, r24
    18d8:	42 1b       	sub	r20, r18
    18da:	53 0b       	sbc	r21, r19
    18dc:	9a 01       	movw	r18, r20
    18de:	21 15       	cp	r18, r1
    18e0:	54 e0       	ldi	r21, 0x04	; 4
    18e2:	35 07       	cpc	r19, r21
    18e4:	40 f0       	brcs	.+16     	; 0x18f6 <udd_ep_trans_complet+0x1d0>
    18e6:	2f ef       	ldi	r18, 0xFF	; 255
    18e8:	33 e0       	ldi	r19, 0x03	; 3
    18ea:	c9 01       	movw	r24, r18
    18ec:	b6 01       	movw	r22, r12
    18ee:	c3 d4       	rcall	.+2438   	; 0x2276 <__udivmodhi4>
    18f0:	28 1b       	sub	r18, r24
    18f2:	39 0b       	sbc	r19, r25
    18f4:	05 c0       	rjmp	.+10     	; 0x1900 <udd_ep_trans_complet+0x1da>
    18f6:	c9 01       	movw	r24, r18
    18f8:	b6 01       	movw	r22, r12
    18fa:	bd d4       	rcall	.+2426   	; 0x2276 <__udivmodhi4>
    18fc:	28 1b       	sub	r18, r24
    18fe:	39 0b       	sbc	r19, r25
    1900:	f7 01       	movw	r30, r14
    1902:	12 82       	std	Z+2, r1	; 0x02
    1904:	13 82       	std	Z+3, r1	; 0x03
    1906:	2c 15       	cp	r18, r12
    1908:	3d 05       	cpc	r19, r13
    190a:	78 f4       	brcc	.+30     	; 0x192a <udd_ep_trans_complet+0x204>
    190c:	88 81       	ld	r24, Y
    190e:	84 60       	ori	r24, 0x04	; 4
    1910:	88 83       	st	Y, r24
    1912:	f0 e4       	ldi	r31, 0x40	; 64
    1914:	bf 9e       	mul	r11, r31
    1916:	c0 01       	movw	r24, r0
    1918:	11 24       	eor	r1, r1
    191a:	86 55       	subi	r24, 0x56	; 86
    191c:	9d 4d       	sbci	r25, 0xDD	; 221
    191e:	f7 01       	movw	r30, r14
    1920:	84 83       	std	Z+4, r24	; 0x04
    1922:	95 83       	std	Z+5, r25	; 0x05
    1924:	c6 82       	std	Z+6, r12	; 0x06
    1926:	d7 82       	std	Z+7, r13	; 0x07
    1928:	0b c0       	rjmp	.+22     	; 0x1940 <udd_ep_trans_complet+0x21a>
    192a:	49 81       	ldd	r20, Y+1	; 0x01
    192c:	5a 81       	ldd	r21, Y+2	; 0x02
    192e:	8d 81       	ldd	r24, Y+5	; 0x05
    1930:	9e 81       	ldd	r25, Y+6	; 0x06
    1932:	84 0f       	add	r24, r20
    1934:	95 1f       	adc	r25, r21
    1936:	f7 01       	movw	r30, r14
    1938:	84 83       	std	Z+4, r24	; 0x04
    193a:	95 83       	std	Z+5, r25	; 0x05
    193c:	26 83       	std	Z+6, r18	; 0x06
    193e:	37 83       	std	Z+7, r19	; 0x07
    1940:	f7 01       	movw	r30, r14
    1942:	02 e0       	ldi	r16, 0x02	; 2
    1944:	06 93       	lac	Z, r16
    1946:	0e c0       	rjmp	.+28     	; 0x1964 <udd_ep_trans_complet+0x23e>
    1948:	88 81       	ld	r24, Y
    194a:	80 ff       	sbrs	r24, 0
    194c:	0b c0       	rjmp	.+22     	; 0x1964 <udd_ep_trans_complet+0x23e>
    194e:	8e 7f       	andi	r24, 0xFE	; 254
    1950:	88 83       	st	Y, r24
    1952:	ef 81       	ldd	r30, Y+7	; 0x07
    1954:	f8 85       	ldd	r31, Y+8	; 0x08
    1956:	30 97       	sbiw	r30, 0x00	; 0
    1958:	29 f0       	breq	.+10     	; 0x1964 <udd_ep_trans_complet+0x23e>
    195a:	6d 81       	ldd	r22, Y+5	; 0x05
    195c:	7e 81       	ldd	r23, Y+6	; 0x06
    195e:	4b 2d       	mov	r20, r11
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	19 95       	eicall
    1964:	df 91       	pop	r29
    1966:	cf 91       	pop	r28
    1968:	1f 91       	pop	r17
    196a:	0f 91       	pop	r16
    196c:	ff 90       	pop	r15
    196e:	ef 90       	pop	r14
    1970:	df 90       	pop	r13
    1972:	cf 90       	pop	r12
    1974:	bf 90       	pop	r11
    1976:	08 95       	ret

00001978 <udd_disable>:
    1978:	cf 93       	push	r28
    197a:	cf b7       	in	r28, 0x3f	; 63
    197c:	f8 94       	cli
    197e:	e1 ec       	ldi	r30, 0xC1	; 193
    1980:	f4 e0       	ldi	r31, 0x04	; 4
    1982:	80 81       	ld	r24, Z
    1984:	8e 7f       	andi	r24, 0xFE	; 254
    1986:	80 83       	st	Z, r24
    1988:	10 92 c0 04 	sts	0x04C0, r1
    198c:	10 82       	st	Z, r1
    198e:	0e 94 44 04 	call	0x888	; 0x888 <sysclk_disable_usb>
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	62 dd       	rcall	.-1340   	; 0x145a <udd_sleep_mode>
    1996:	8f b7       	in	r24, 0x3f	; 63
    1998:	f8 94       	cli
    199a:	e3 ee       	ldi	r30, 0xE3	; 227
    199c:	f7 e2       	ldi	r31, 0x27	; 39
    199e:	90 81       	ld	r25, Z
    19a0:	91 50       	subi	r25, 0x01	; 1
    19a2:	90 83       	st	Z, r25
    19a4:	8f bf       	out	0x3f, r24	; 63
    19a6:	cf bf       	out	0x3f, r28	; 63
    19a8:	cf 91       	pop	r28
    19aa:	08 95       	ret

000019ac <udd_attach>:
    19ac:	cf 93       	push	r28
    19ae:	cf b7       	in	r28, 0x3f	; 63
    19b0:	f8 94       	cli
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	52 dd       	rcall	.-1372   	; 0x145a <udd_sleep_mode>
    19b6:	ea ec       	ldi	r30, 0xCA	; 202
    19b8:	f4 e0       	ldi	r31, 0x04	; 4
    19ba:	80 e4       	ldi	r24, 0x40	; 64
    19bc:	80 83       	st	Z, r24
    19be:	80 e2       	ldi	r24, 0x20	; 32
    19c0:	80 83       	st	Z, r24
    19c2:	e1 ec       	ldi	r30, 0xC1	; 193
    19c4:	f4 e0       	ldi	r31, 0x04	; 4
    19c6:	80 81       	ld	r24, Z
    19c8:	81 60       	ori	r24, 0x01	; 1
    19ca:	80 83       	st	Z, r24
    19cc:	a9 ec       	ldi	r26, 0xC9	; 201
    19ce:	b4 e0       	ldi	r27, 0x04	; 4
    19d0:	8c 91       	ld	r24, X
    19d2:	82 60       	ori	r24, 0x02	; 2
    19d4:	8c 93       	st	X, r24
    19d6:	e8 ec       	ldi	r30, 0xC8	; 200
    19d8:	f4 e0       	ldi	r31, 0x04	; 4
    19da:	80 81       	ld	r24, Z
    19dc:	80 64       	ori	r24, 0x40	; 64
    19de:	80 83       	st	Z, r24
    19e0:	8c 91       	ld	r24, X
    19e2:	81 60       	ori	r24, 0x01	; 1
    19e4:	8c 93       	st	X, r24
    19e6:	80 81       	ld	r24, Z
    19e8:	80 68       	ori	r24, 0x80	; 128
    19ea:	80 83       	st	Z, r24
    19ec:	cf bf       	out	0x3f, r28	; 63
    19ee:	cf 91       	pop	r28
    19f0:	08 95       	ret

000019f2 <udd_enable>:
    19f2:	cf 93       	push	r28
    19f4:	df 93       	push	r29
    19f6:	c0 e6       	ldi	r28, 0x60	; 96
    19f8:	d0 e0       	ldi	r29, 0x00	; 0
    19fa:	18 82       	st	Y, r1
    19fc:	80 e3       	ldi	r24, 0x30	; 48
    19fe:	0e 94 0e 04 	call	0x81c	; 0x81c <sysclk_enable_usb>
    1a02:	e0 ec       	ldi	r30, 0xC0	; 192
    1a04:	f4 e0       	ldi	r31, 0x04	; 4
    1a06:	80 81       	ld	r24, Z
    1a08:	80 64       	ori	r24, 0x40	; 64
    1a0a:	80 83       	st	Z, r24
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	88 83       	st	Y, r24
    1a10:	cf b7       	in	r28, 0x3f	; 63
    1a12:	f8 94       	cli
    1a14:	10 92 a9 23 	sts	0x23A9, r1
    1a18:	10 92 b1 23 	sts	0x23B1, r1
    1a1c:	10 92 b9 23 	sts	0x23B9, r1
    1a20:	10 92 c1 23 	sts	0x23C1, r1
    1a24:	10 92 c9 23 	sts	0x23C9, r1
    1a28:	10 92 d1 23 	sts	0x23D1, r1
    1a2c:	ea e6       	ldi	r30, 0x6A	; 106
    1a2e:	f3 e2       	ldi	r31, 0x23	; 35
    1a30:	80 81       	ld	r24, Z
    1a32:	8e 7f       	andi	r24, 0xFE	; 254
    1a34:	80 83       	st	Z, r24
    1a36:	e3 e7       	ldi	r30, 0x73	; 115
    1a38:	f3 e2       	ldi	r31, 0x23	; 35
    1a3a:	80 81       	ld	r24, Z
    1a3c:	8e 7f       	andi	r24, 0xFE	; 254
    1a3e:	80 83       	st	Z, r24
    1a40:	ec e7       	ldi	r30, 0x7C	; 124
    1a42:	f3 e2       	ldi	r31, 0x23	; 35
    1a44:	80 81       	ld	r24, Z
    1a46:	8e 7f       	andi	r24, 0xFE	; 254
    1a48:	80 83       	st	Z, r24
    1a4a:	e5 e8       	ldi	r30, 0x85	; 133
    1a4c:	f3 e2       	ldi	r31, 0x23	; 35
    1a4e:	80 81       	ld	r24, Z
    1a50:	8e 7f       	andi	r24, 0xFE	; 254
    1a52:	80 83       	st	Z, r24
    1a54:	6a e1       	ldi	r22, 0x1A	; 26
    1a56:	70 e0       	ldi	r23, 0x00	; 0
    1a58:	82 e0       	ldi	r24, 0x02	; 2
    1a5a:	f5 dc       	rcall	.-1558   	; 0x1446 <nvm_read_byte>
    1a5c:	8f 3f       	cpi	r24, 0xFF	; 255
    1a5e:	19 f0       	breq	.+6      	; 0x1a66 <udd_enable+0x74>
    1a60:	80 93 fa 04 	sts	0x04FA, r24
    1a64:	03 c0       	rjmp	.+6      	; 0x1a6c <udd_enable+0x7a>
    1a66:	8f e1       	ldi	r24, 0x1F	; 31
    1a68:	80 93 fa 04 	sts	0x04FA, r24
    1a6c:	6b e1       	ldi	r22, 0x1B	; 27
    1a6e:	70 e0       	ldi	r23, 0x00	; 0
    1a70:	82 e0       	ldi	r24, 0x02	; 2
    1a72:	e9 dc       	rcall	.-1582   	; 0x1446 <nvm_read_byte>
    1a74:	8f 3f       	cpi	r24, 0xFF	; 255
    1a76:	19 f0       	breq	.+6      	; 0x1a7e <udd_enable+0x8c>
    1a78:	80 93 fb 04 	sts	0x04FB, r24
    1a7c:	03 c0       	rjmp	.+6      	; 0x1a84 <udd_enable+0x92>
    1a7e:	8f e1       	ldi	r24, 0x1F	; 31
    1a80:	80 93 fb 04 	sts	0x04FB, r24
    1a84:	e0 ec       	ldi	r30, 0xC0	; 192
    1a86:	f4 e0       	ldi	r31, 0x04	; 4
    1a88:	80 81       	ld	r24, Z
    1a8a:	82 60       	ori	r24, 0x02	; 2
    1a8c:	80 83       	st	Z, r24
    1a8e:	80 81       	ld	r24, Z
    1a90:	80 68       	ori	r24, 0x80	; 128
    1a92:	80 83       	st	Z, r24
    1a94:	80 81       	ld	r24, Z
    1a96:	80 61       	ori	r24, 0x10	; 16
    1a98:	80 83       	st	Z, r24
    1a9a:	88 ea       	ldi	r24, 0xA8	; 168
    1a9c:	93 e2       	ldi	r25, 0x23	; 35
    1a9e:	86 83       	std	Z+6, r24	; 0x06
    1aa0:	97 83       	std	Z+7, r25	; 0x07
    1aa2:	80 81       	ld	r24, Z
    1aa4:	80 62       	ori	r24, 0x20	; 32
    1aa6:	80 83       	st	Z, r24
    1aa8:	8f ef       	ldi	r24, 0xFF	; 255
    1aaa:	80 93 c5 04 	sts	0x04C5, r24
    1aae:	e8 ec       	ldi	r30, 0xC8	; 200
    1ab0:	f4 e0       	ldi	r31, 0x04	; 4
    1ab2:	80 81       	ld	r24, Z
    1ab4:	81 60       	ori	r24, 0x01	; 1
    1ab6:	80 83       	st	Z, r24
    1ab8:	10 92 dc 23 	sts	0x23DC, r1
    1abc:	8f b7       	in	r24, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	e3 ee       	ldi	r30, 0xE3	; 227
    1ac2:	f7 e2       	ldi	r31, 0x27	; 39
    1ac4:	90 81       	ld	r25, Z
    1ac6:	9f 5f       	subi	r25, 0xFF	; 255
    1ac8:	90 83       	st	Z, r25
    1aca:	8f bf       	out	0x3f, r24	; 63
    1acc:	6f df       	rcall	.-290    	; 0x19ac <udd_attach>
    1ace:	cf bf       	out	0x3f, r28	; 63
    1ad0:	df 91       	pop	r29
    1ad2:	cf 91       	pop	r28
    1ad4:	08 95       	ret

00001ad6 <udd_set_address>:
    1ad6:	80 93 c3 04 	sts	0x04C3, r24
    1ada:	08 95       	ret

00001adc <udd_getaddress>:
    1adc:	80 91 c3 04 	lds	r24, 0x04C3
    1ae0:	08 95       	ret

00001ae2 <udd_get_frame_number>:
    1ae2:	80 91 d8 23 	lds	r24, 0x23D8
    1ae6:	90 91 d9 23 	lds	r25, 0x23D9
    1aea:	08 95       	ret

00001aec <udd_send_remotewakeup>:
    1aec:	80 91 dc 23 	lds	r24, 0x23DC
    1af0:	81 11       	cpse	r24, r1
    1af2:	0a c0       	rjmp	.+20     	; 0x1b08 <udd_send_remotewakeup+0x1c>
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	b1 dc       	rcall	.-1694   	; 0x145a <udd_sleep_mode>
    1af8:	e1 ec       	ldi	r30, 0xC1	; 193
    1afa:	f4 e0       	ldi	r31, 0x04	; 4
    1afc:	80 81       	ld	r24, Z
    1afe:	8b 7f       	andi	r24, 0xFB	; 251
    1b00:	80 83       	st	Z, r24
    1b02:	80 81       	ld	r24, Z
    1b04:	84 60       	ori	r24, 0x04	; 4
    1b06:	80 83       	st	Z, r24
    1b08:	08 95       	ret

00001b0a <udd_set_setup_payload>:
    1b0a:	80 93 ec 27 	sts	0x27EC, r24
    1b0e:	90 93 ed 27 	sts	0x27ED, r25
    1b12:	60 93 ee 27 	sts	0x27EE, r22
    1b16:	70 93 ef 27 	sts	0x27EF, r23
    1b1a:	08 95       	ret

00001b1c <udd_ep_alloc>:
    1b1c:	e8 2f       	mov	r30, r24
    1b1e:	ef 70       	andi	r30, 0x0F	; 15
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	ee 0f       	add	r30, r30
    1b24:	ff 1f       	adc	r31, r31
    1b26:	99 27       	eor	r25, r25
    1b28:	87 fd       	sbrc	r24, 7
    1b2a:	90 95       	com	r25
    1b2c:	88 27       	eor	r24, r24
    1b2e:	99 0f       	add	r25, r25
    1b30:	88 1f       	adc	r24, r24
    1b32:	99 27       	eor	r25, r25
    1b34:	e8 0f       	add	r30, r24
    1b36:	f9 1f       	adc	r31, r25
    1b38:	ee 0f       	add	r30, r30
    1b3a:	ff 1f       	adc	r31, r31
    1b3c:	ee 0f       	add	r30, r30
    1b3e:	ff 1f       	adc	r31, r31
    1b40:	ee 0f       	add	r30, r30
    1b42:	ff 1f       	adc	r31, r31
    1b44:	e8 55       	subi	r30, 0x58	; 88
    1b46:	fc 4d       	sbci	r31, 0xDC	; 220
    1b48:	81 81       	ldd	r24, Z+1	; 0x01
    1b4a:	80 7c       	andi	r24, 0xC0	; 192
    1b4c:	09 f0       	breq	.+2      	; 0x1b50 <udd_ep_alloc+0x34>
    1b4e:	43 c0       	rjmp	.+134    	; 0x1bd6 <udd_ep_alloc+0xba>
    1b50:	63 70       	andi	r22, 0x03	; 3
    1b52:	61 30       	cpi	r22, 0x01	; 1
    1b54:	29 f0       	breq	.+10     	; 0x1b60 <udd_ep_alloc+0x44>
    1b56:	10 f4       	brcc	.+4      	; 0x1b5c <udd_ep_alloc+0x40>
    1b58:	80 e4       	ldi	r24, 0x40	; 64
    1b5a:	03 c0       	rjmp	.+6      	; 0x1b62 <udd_ep_alloc+0x46>
    1b5c:	80 e8       	ldi	r24, 0x80	; 128
    1b5e:	01 c0       	rjmp	.+2      	; 0x1b62 <udd_ep_alloc+0x46>
    1b60:	80 ec       	ldi	r24, 0xC0	; 192
    1b62:	40 38       	cpi	r20, 0x80	; 128
    1b64:	51 05       	cpc	r21, r1
    1b66:	e1 f0       	breq	.+56     	; 0x1ba0 <udd_ep_alloc+0x84>
    1b68:	50 f4       	brcc	.+20     	; 0x1b7e <udd_ep_alloc+0x62>
    1b6a:	40 32       	cpi	r20, 0x20	; 32
    1b6c:	51 05       	cpc	r21, r1
    1b6e:	a1 f0       	breq	.+40     	; 0x1b98 <udd_ep_alloc+0x7c>
    1b70:	40 34       	cpi	r20, 0x40	; 64
    1b72:	51 05       	cpc	r21, r1
    1b74:	99 f0       	breq	.+38     	; 0x1b9c <udd_ep_alloc+0x80>
    1b76:	40 31       	cpi	r20, 0x10	; 16
    1b78:	51 05       	cpc	r21, r1
    1b7a:	61 f4       	brne	.+24     	; 0x1b94 <udd_ep_alloc+0x78>
    1b7c:	19 c0       	rjmp	.+50     	; 0x1bb0 <udd_ep_alloc+0x94>
    1b7e:	41 15       	cp	r20, r1
    1b80:	92 e0       	ldi	r25, 0x02	; 2
    1b82:	59 07       	cpc	r21, r25
    1b84:	89 f0       	breq	.+34     	; 0x1ba8 <udd_ep_alloc+0x8c>
    1b86:	4f 3f       	cpi	r20, 0xFF	; 255
    1b88:	93 e0       	ldi	r25, 0x03	; 3
    1b8a:	59 07       	cpc	r21, r25
    1b8c:	79 f0       	breq	.+30     	; 0x1bac <udd_ep_alloc+0x90>
    1b8e:	41 15       	cp	r20, r1
    1b90:	51 40       	sbci	r21, 0x01	; 1
    1b92:	41 f0       	breq	.+16     	; 0x1ba4 <udd_ep_alloc+0x88>
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	0d c0       	rjmp	.+26     	; 0x1bb2 <udd_ep_alloc+0x96>
    1b98:	22 e0       	ldi	r18, 0x02	; 2
    1b9a:	0b c0       	rjmp	.+22     	; 0x1bb2 <udd_ep_alloc+0x96>
    1b9c:	23 e0       	ldi	r18, 0x03	; 3
    1b9e:	09 c0       	rjmp	.+18     	; 0x1bb2 <udd_ep_alloc+0x96>
    1ba0:	24 e0       	ldi	r18, 0x04	; 4
    1ba2:	07 c0       	rjmp	.+14     	; 0x1bb2 <udd_ep_alloc+0x96>
    1ba4:	25 e0       	ldi	r18, 0x05	; 5
    1ba6:	05 c0       	rjmp	.+10     	; 0x1bb2 <udd_ep_alloc+0x96>
    1ba8:	26 e0       	ldi	r18, 0x06	; 6
    1baa:	03 c0       	rjmp	.+6      	; 0x1bb2 <udd_ep_alloc+0x96>
    1bac:	27 e0       	ldi	r18, 0x07	; 7
    1bae:	01 c0       	rjmp	.+2      	; 0x1bb2 <udd_ep_alloc+0x96>
    1bb0:	21 e0       	ldi	r18, 0x01	; 1
    1bb2:	11 82       	std	Z+1, r1	; 0x01
    1bb4:	96 e0       	ldi	r25, 0x06	; 6
    1bb6:	90 83       	st	Z, r25
    1bb8:	82 2b       	or	r24, r18
    1bba:	81 83       	std	Z+1, r24	; 0x01
    1bbc:	81 81       	ldd	r24, Z+1	; 0x01
    1bbe:	80 7c       	andi	r24, 0xC0	; 192
    1bc0:	80 3c       	cpi	r24, 0xC0	; 192
    1bc2:	21 f4       	brne	.+8      	; 0x1bcc <udd_ep_alloc+0xb0>
    1bc4:	81 81       	ldd	r24, Z+1	; 0x01
    1bc6:	87 70       	andi	r24, 0x07	; 7
    1bc8:	87 30       	cpi	r24, 0x07	; 7
    1bca:	39 f0       	breq	.+14     	; 0x1bda <udd_ep_alloc+0xbe>
    1bcc:	81 81       	ldd	r24, Z+1	; 0x01
    1bce:	80 62       	ori	r24, 0x20	; 32
    1bd0:	81 83       	std	Z+1, r24	; 0x01
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	08 95       	ret
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	08 95       	ret
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	08 95       	ret

00001bde <udd_ep_is_halted>:
    1bde:	e8 2f       	mov	r30, r24
    1be0:	ef 70       	andi	r30, 0x0F	; 15
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	ee 0f       	add	r30, r30
    1be6:	ff 1f       	adc	r31, r31
    1be8:	99 27       	eor	r25, r25
    1bea:	87 fd       	sbrc	r24, 7
    1bec:	90 95       	com	r25
    1bee:	88 27       	eor	r24, r24
    1bf0:	99 0f       	add	r25, r25
    1bf2:	88 1f       	adc	r24, r24
    1bf4:	99 27       	eor	r25, r25
    1bf6:	e8 0f       	add	r30, r24
    1bf8:	f9 1f       	adc	r31, r25
    1bfa:	ee 0f       	add	r30, r30
    1bfc:	ff 1f       	adc	r31, r31
    1bfe:	ee 0f       	add	r30, r30
    1c00:	ff 1f       	adc	r31, r31
    1c02:	ee 0f       	add	r30, r30
    1c04:	ff 1f       	adc	r31, r31
    1c06:	e8 55       	subi	r30, 0x58	; 88
    1c08:	fc 4d       	sbci	r31, 0xDC	; 220
    1c0a:	81 81       	ldd	r24, Z+1	; 0x01
    1c0c:	82 fb       	bst	r24, 2
    1c0e:	88 27       	eor	r24, r24
    1c10:	80 f9       	bld	r24, 0
    1c12:	08 95       	ret

00001c14 <udd_ep_clear_halt>:
    1c14:	e8 2f       	mov	r30, r24
    1c16:	ef 70       	andi	r30, 0x0F	; 15
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	ee 0f       	add	r30, r30
    1c1c:	ff 1f       	adc	r31, r31
    1c1e:	28 2f       	mov	r18, r24
    1c20:	33 27       	eor	r19, r19
    1c22:	27 fd       	sbrc	r18, 7
    1c24:	30 95       	com	r19
    1c26:	22 27       	eor	r18, r18
    1c28:	33 0f       	add	r19, r19
    1c2a:	22 1f       	adc	r18, r18
    1c2c:	33 27       	eor	r19, r19
    1c2e:	e2 0f       	add	r30, r18
    1c30:	f3 1f       	adc	r31, r19
    1c32:	ee 0f       	add	r30, r30
    1c34:	ff 1f       	adc	r31, r31
    1c36:	ee 0f       	add	r30, r30
    1c38:	ff 1f       	adc	r31, r31
    1c3a:	ee 0f       	add	r30, r30
    1c3c:	ff 1f       	adc	r31, r31
    1c3e:	e8 55       	subi	r30, 0x58	; 88
    1c40:	fc 4d       	sbci	r31, 0xDC	; 220
    1c42:	91 81       	ldd	r25, Z+1	; 0x01
    1c44:	92 ff       	sbrs	r25, 2
    1c46:	0e c0       	rjmp	.+28     	; 0x1c64 <udd_ep_clear_halt+0x50>
    1c48:	91 81       	ldd	r25, Z+1	; 0x01
    1c4a:	9b 7f       	andi	r25, 0xFB	; 251
    1c4c:	91 83       	std	Z+1, r25	; 0x01
    1c4e:	e1 dc       	rcall	.-1598   	; 0x1612 <udd_ep_get_job>
    1c50:	fc 01       	movw	r30, r24
    1c52:	80 81       	ld	r24, Z
    1c54:	80 ff       	sbrs	r24, 0
    1c56:	06 c0       	rjmp	.+12     	; 0x1c64 <udd_ep_clear_halt+0x50>
    1c58:	8e 7f       	andi	r24, 0xFE	; 254
    1c5a:	80 83       	st	Z, r24
    1c5c:	07 80       	ldd	r0, Z+7	; 0x07
    1c5e:	f0 85       	ldd	r31, Z+8	; 0x08
    1c60:	e0 2d       	mov	r30, r0
    1c62:	19 95       	eicall
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	08 95       	ret

00001c68 <udd_ep_run>:
    1c68:	cf 92       	push	r12
    1c6a:	df 92       	push	r13
    1c6c:	ef 92       	push	r14
    1c6e:	ff 92       	push	r15
    1c70:	0f 93       	push	r16
    1c72:	1f 93       	push	r17
    1c74:	cf 93       	push	r28
    1c76:	df 93       	push	r29
    1c78:	d8 2e       	mov	r13, r24
    1c7a:	c6 2e       	mov	r12, r22
    1c7c:	7a 01       	movw	r14, r20
    1c7e:	e9 01       	movw	r28, r18
    1c80:	c8 dc       	rcall	.-1648   	; 0x1612 <udd_ep_get_job>
    1c82:	fc 01       	movw	r30, r24
    1c84:	8d 2d       	mov	r24, r13
    1c86:	88 1f       	adc	r24, r24
    1c88:	88 27       	eor	r24, r24
    1c8a:	88 1f       	adc	r24, r24
    1c8c:	ad 2d       	mov	r26, r13
    1c8e:	af 70       	andi	r26, 0x0F	; 15
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	aa 0f       	add	r26, r26
    1c94:	bb 1f       	adc	r27, r27
    1c96:	a8 0f       	add	r26, r24
    1c98:	b1 1d       	adc	r27, r1
    1c9a:	aa 0f       	add	r26, r26
    1c9c:	bb 1f       	adc	r27, r27
    1c9e:	aa 0f       	add	r26, r26
    1ca0:	bb 1f       	adc	r27, r27
    1ca2:	aa 0f       	add	r26, r26
    1ca4:	bb 1f       	adc	r27, r27
    1ca6:	a8 55       	subi	r26, 0x58	; 88
    1ca8:	bc 4d       	sbci	r27, 0xDC	; 220
    1caa:	11 96       	adiw	r26, 0x01	; 1
    1cac:	9c 91       	ld	r25, X
    1cae:	11 97       	sbiw	r26, 0x01	; 1
    1cb0:	90 7c       	andi	r25, 0xC0	; 192
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <udd_ep_run+0x4e>
    1cb4:	3f c0       	rjmp	.+126    	; 0x1d34 <udd_ep_run+0xcc>
    1cb6:	11 96       	adiw	r26, 0x01	; 1
    1cb8:	9c 91       	ld	r25, X
    1cba:	11 97       	sbiw	r26, 0x01	; 1
    1cbc:	90 7c       	andi	r25, 0xC0	; 192
    1cbe:	90 3c       	cpi	r25, 0xC0	; 192
    1cc0:	29 f0       	breq	.+10     	; 0x1ccc <udd_ep_run+0x64>
    1cc2:	11 96       	adiw	r26, 0x01	; 1
    1cc4:	9c 91       	ld	r25, X
    1cc6:	11 97       	sbiw	r26, 0x01	; 1
    1cc8:	92 fd       	sbrc	r25, 2
    1cca:	36 c0       	rjmp	.+108    	; 0x1d38 <udd_ep_run+0xd0>
    1ccc:	9f b7       	in	r25, 0x3f	; 63
    1cce:	f8 94       	cli
    1cd0:	20 81       	ld	r18, Z
    1cd2:	20 ff       	sbrs	r18, 0
    1cd4:	03 c0       	rjmp	.+6      	; 0x1cdc <udd_ep_run+0x74>
    1cd6:	9f bf       	out	0x3f, r25	; 63
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	2f c0       	rjmp	.+94     	; 0x1d3a <udd_ep_run+0xd2>
    1cdc:	20 81       	ld	r18, Z
    1cde:	21 60       	ori	r18, 0x01	; 1
    1ce0:	20 83       	st	Z, r18
    1ce2:	9f bf       	out	0x3f, r25	; 63
    1ce4:	e1 82       	std	Z+1, r14	; 0x01
    1ce6:	f2 82       	std	Z+2, r15	; 0x02
    1ce8:	c3 83       	std	Z+3, r28	; 0x03
    1cea:	d4 83       	std	Z+4, r29	; 0x04
    1cec:	15 82       	std	Z+5, r1	; 0x05
    1cee:	16 82       	std	Z+6, r1	; 0x06
    1cf0:	07 83       	std	Z+7, r16	; 0x07
    1cf2:	10 87       	std	Z+8, r17	; 0x08
    1cf4:	c1 10       	cpse	r12, r1
    1cf6:	05 c0       	rjmp	.+10     	; 0x1d02 <udd_ep_run+0x9a>
    1cf8:	21 e0       	ldi	r18, 0x01	; 1
    1cfa:	cd 2b       	or	r28, r29
    1cfc:	19 f0       	breq	.+6      	; 0x1d04 <udd_ep_run+0x9c>
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	01 c0       	rjmp	.+2      	; 0x1d04 <udd_ep_run+0x9c>
    1d02:	21 e0       	ldi	r18, 0x01	; 1
    1d04:	90 81       	ld	r25, Z
    1d06:	20 fb       	bst	r18, 0
    1d08:	91 f9       	bld	r25, 1
    1d0a:	9b 7f       	andi	r25, 0xFB	; 251
    1d0c:	90 83       	st	Z, r25
    1d0e:	88 23       	and	r24, r24
    1d10:	29 f0       	breq	.+10     	; 0x1d1c <udd_ep_run+0xb4>
    1d12:	16 96       	adiw	r26, 0x06	; 6
    1d14:	1d 92       	st	X+, r1
    1d16:	1c 92       	st	X, r1
    1d18:	17 97       	sbiw	r26, 0x07	; 7
    1d1a:	08 c0       	rjmp	.+16     	; 0x1d2c <udd_ep_run+0xc4>
    1d1c:	12 96       	adiw	r26, 0x02	; 2
    1d1e:	1d 92       	st	X+, r1
    1d20:	1c 92       	st	X, r1
    1d22:	13 97       	sbiw	r26, 0x03	; 3
    1d24:	16 96       	adiw	r26, 0x06	; 6
    1d26:	1d 92       	st	X+, r1
    1d28:	1c 92       	st	X, r1
    1d2a:	17 97       	sbiw	r26, 0x07	; 7
    1d2c:	8d 2d       	mov	r24, r13
    1d2e:	fb dc       	rcall	.-1546   	; 0x1726 <udd_ep_trans_complet>
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	03 c0       	rjmp	.+6      	; 0x1d3a <udd_ep_run+0xd2>
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	01 c0       	rjmp	.+2      	; 0x1d3a <udd_ep_run+0xd2>
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	df 91       	pop	r29
    1d3c:	cf 91       	pop	r28
    1d3e:	1f 91       	pop	r17
    1d40:	0f 91       	pop	r16
    1d42:	ff 90       	pop	r15
    1d44:	ef 90       	pop	r14
    1d46:	df 90       	pop	r13
    1d48:	cf 90       	pop	r12
    1d4a:	08 95       	ret

00001d4c <udd_ep_abort>:
    1d4c:	ff 92       	push	r15
    1d4e:	0f 93       	push	r16
    1d50:	1f 93       	push	r17
    1d52:	cf 93       	push	r28
    1d54:	df 93       	push	r29
    1d56:	18 2f       	mov	r17, r24
    1d58:	f8 2e       	mov	r15, r24
    1d5a:	ff 1c       	adc	r15, r15
    1d5c:	ff 24       	eor	r15, r15
    1d5e:	ff 1c       	adc	r15, r15
    1d60:	c8 2f       	mov	r28, r24
    1d62:	cf 70       	andi	r28, 0x0F	; 15
    1d64:	d0 e0       	ldi	r29, 0x00	; 0
    1d66:	cc 0f       	add	r28, r28
    1d68:	dd 1f       	adc	r29, r29
    1d6a:	cf 0d       	add	r28, r15
    1d6c:	d1 1d       	adc	r29, r1
    1d6e:	cc 0f       	add	r28, r28
    1d70:	dd 1f       	adc	r29, r29
    1d72:	cc 0f       	add	r28, r28
    1d74:	dd 1f       	adc	r29, r29
    1d76:	cc 0f       	add	r28, r28
    1d78:	dd 1f       	adc	r29, r29
    1d7a:	c8 55       	subi	r28, 0x58	; 88
    1d7c:	dc 4d       	sbci	r29, 0xDC	; 220
    1d7e:	49 dc       	rcall	.-1902   	; 0x1612 <udd_ep_get_job>
    1d80:	dc 01       	movw	r26, r24
    1d82:	fe 01       	movw	r30, r28
    1d84:	02 e0       	ldi	r16, 0x02	; 2
    1d86:	05 93       	las	Z, r16
    1d88:	8c 91       	ld	r24, X
    1d8a:	80 ff       	sbrs	r24, 0
    1d8c:	12 c0       	rjmp	.+36     	; 0x1db2 <udd_ep_abort+0x66>
    1d8e:	8e 7f       	andi	r24, 0xFE	; 254
    1d90:	8c 93       	st	X, r24
    1d92:	17 96       	adiw	r26, 0x07	; 7
    1d94:	ed 91       	ld	r30, X+
    1d96:	fc 91       	ld	r31, X
    1d98:	18 97       	sbiw	r26, 0x08	; 8
    1d9a:	30 97       	sbiw	r30, 0x00	; 0
    1d9c:	51 f0       	breq	.+20     	; 0x1db2 <udd_ep_abort+0x66>
    1d9e:	ff 20       	and	r15, r15
    1da0:	19 f0       	breq	.+6      	; 0x1da8 <udd_ep_abort+0x5c>
    1da2:	6e 81       	ldd	r22, Y+6	; 0x06
    1da4:	7f 81       	ldd	r23, Y+7	; 0x07
    1da6:	02 c0       	rjmp	.+4      	; 0x1dac <udd_ep_abort+0x60>
    1da8:	6a 81       	ldd	r22, Y+2	; 0x02
    1daa:	7b 81       	ldd	r23, Y+3	; 0x03
    1dac:	41 2f       	mov	r20, r17
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	19 95       	eicall
    1db2:	df 91       	pop	r29
    1db4:	cf 91       	pop	r28
    1db6:	1f 91       	pop	r17
    1db8:	0f 91       	pop	r16
    1dba:	ff 90       	pop	r15
    1dbc:	08 95       	ret

00001dbe <udd_ep_free>:
    1dbe:	cf 93       	push	r28
    1dc0:	c8 2f       	mov	r28, r24
    1dc2:	c4 df       	rcall	.-120    	; 0x1d4c <udd_ep_abort>
    1dc4:	ec 2f       	mov	r30, r28
    1dc6:	ef 70       	andi	r30, 0x0F	; 15
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	ee 0f       	add	r30, r30
    1dcc:	ff 1f       	adc	r31, r31
    1dce:	8c 2f       	mov	r24, r28
    1dd0:	99 27       	eor	r25, r25
    1dd2:	87 fd       	sbrc	r24, 7
    1dd4:	90 95       	com	r25
    1dd6:	88 27       	eor	r24, r24
    1dd8:	99 0f       	add	r25, r25
    1dda:	88 1f       	adc	r24, r24
    1ddc:	99 27       	eor	r25, r25
    1dde:	e8 0f       	add	r30, r24
    1de0:	f9 1f       	adc	r31, r25
    1de2:	ee 0f       	add	r30, r30
    1de4:	ff 1f       	adc	r31, r31
    1de6:	ee 0f       	add	r30, r30
    1de8:	ff 1f       	adc	r31, r31
    1dea:	ee 0f       	add	r30, r30
    1dec:	ff 1f       	adc	r31, r31
    1dee:	e8 55       	subi	r30, 0x58	; 88
    1df0:	fc 4d       	sbci	r31, 0xDC	; 220
    1df2:	11 82       	std	Z+1, r1	; 0x01
    1df4:	cf 91       	pop	r28
    1df6:	08 95       	ret

00001df8 <udd_ep_set_halt>:
    1df8:	0f 93       	push	r16
    1dfa:	e8 2f       	mov	r30, r24
    1dfc:	ef 70       	andi	r30, 0x0F	; 15
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	ee 0f       	add	r30, r30
    1e02:	ff 1f       	adc	r31, r31
    1e04:	28 2f       	mov	r18, r24
    1e06:	33 27       	eor	r19, r19
    1e08:	27 fd       	sbrc	r18, 7
    1e0a:	30 95       	com	r19
    1e0c:	22 27       	eor	r18, r18
    1e0e:	33 0f       	add	r19, r19
    1e10:	22 1f       	adc	r18, r18
    1e12:	33 27       	eor	r19, r19
    1e14:	e2 0f       	add	r30, r18
    1e16:	f3 1f       	adc	r31, r19
    1e18:	ee 0f       	add	r30, r30
    1e1a:	ff 1f       	adc	r31, r31
    1e1c:	ee 0f       	add	r30, r30
    1e1e:	ff 1f       	adc	r31, r31
    1e20:	ee 0f       	add	r30, r30
    1e22:	ff 1f       	adc	r31, r31
    1e24:	e8 55       	subi	r30, 0x58	; 88
    1e26:	fc 4d       	sbci	r31, 0xDC	; 220
    1e28:	91 81       	ldd	r25, Z+1	; 0x01
    1e2a:	94 60       	ori	r25, 0x04	; 4
    1e2c:	91 83       	std	Z+1, r25	; 0x01
    1e2e:	01 e0       	ldi	r16, 0x01	; 1
    1e30:	06 93       	lac	Z, r16
    1e32:	8c df       	rcall	.-232    	; 0x1d4c <udd_ep_abort>
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	0f 91       	pop	r16
    1e38:	08 95       	ret

00001e3a <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    1e3a:	1f 92       	push	r1
    1e3c:	0f 92       	push	r0
    1e3e:	0f b6       	in	r0, 0x3f	; 63
    1e40:	0f 92       	push	r0
    1e42:	11 24       	eor	r1, r1
    1e44:	0b b6       	in	r0, 0x3b	; 59
    1e46:	0f 92       	push	r0
    1e48:	0f 93       	push	r16
    1e4a:	2f 93       	push	r18
    1e4c:	3f 93       	push	r19
    1e4e:	4f 93       	push	r20
    1e50:	5f 93       	push	r21
    1e52:	6f 93       	push	r22
    1e54:	7f 93       	push	r23
    1e56:	8f 93       	push	r24
    1e58:	9f 93       	push	r25
    1e5a:	af 93       	push	r26
    1e5c:	bf 93       	push	r27
    1e5e:	ef 93       	push	r30
    1e60:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    1e62:	80 91 cb 04 	lds	r24, 0x04CB
    1e66:	88 23       	and	r24, r24
    1e68:	3c f4       	brge	.+14     	; 0x1e78 <__vector_125+0x3e>
		udd_ack_start_of_frame_event();
    1e6a:	80 e8       	ldi	r24, 0x80	; 128
    1e6c:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    1e70:	0e 94 cb 06 	call	0xd96	; 0xd96 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    1e74:	d9 d1       	rcall	.+946    	; 0x2228 <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    1e76:	8a c0       	rjmp	.+276    	; 0x1f8c <__vector_125+0x152>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    1e78:	80 91 cb 04 	lds	r24, 0x04CB
    1e7c:	82 ff       	sbrs	r24, 2
    1e7e:	20 c0       	rjmp	.+64     	; 0x1ec0 <__vector_125+0x86>
		udd_ack_underflow_event();
    1e80:	84 e0       	ldi	r24, 0x04	; 4
    1e82:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    1e86:	80 91 b0 23 	lds	r24, 0x23B0
    1e8a:	86 ff       	sbrs	r24, 6
    1e8c:	7f c0       	rjmp	.+254    	; 0x1f8c <__vector_125+0x152>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    1e8e:	80 91 cc 04 	lds	r24, 0x04CC
    1e92:	81 fd       	sbrc	r24, 1
    1e94:	7b c0       	rjmp	.+246    	; 0x1f8c <__vector_125+0x152>
    1e96:	d8 db       	rcall	.-2128   	; 0x1648 <udd_ctrl_interrupt_tc_setup>
    1e98:	81 11       	cpse	r24, r1
    1e9a:	78 c0       	rjmp	.+240    	; 0x1f8c <__vector_125+0x152>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    1e9c:	80 91 9a 23 	lds	r24, 0x239A
    1ea0:	81 30       	cpi	r24, 0x01	; 1
    1ea2:	11 f4       	brne	.+4      	; 0x1ea8 <__vector_125+0x6e>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    1ea4:	32 db       	rcall	.-2460   	; 0x150a <udd_ctrl_send_zlp_in>
    1ea6:	72 c0       	rjmp	.+228    	; 0x1f8c <__vector_125+0x152>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1ea8:	84 30       	cpi	r24, 0x04	; 4
    1eaa:	09 f0       	breq	.+2      	; 0x1eae <__vector_125+0x74>
    1eac:	6f c0       	rjmp	.+222    	; 0x1f8c <__vector_125+0x152>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    1eae:	e1 eb       	ldi	r30, 0xB1	; 177
    1eb0:	f3 e2       	ldi	r31, 0x23	; 35
    1eb2:	04 e0       	ldi	r16, 0x04	; 4
    1eb4:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1eb6:	e9 ea       	ldi	r30, 0xA9	; 169
    1eb8:	f3 e2       	ldi	r31, 0x23	; 35
    1eba:	04 e0       	ldi	r16, 0x04	; 4
    1ebc:	05 93       	las	Z, r16
    1ebe:	66 c0       	rjmp	.+204    	; 0x1f8c <__vector_125+0x152>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    1ec0:	80 91 cb 04 	lds	r24, 0x04CB
    1ec4:	81 ff       	sbrs	r24, 1
    1ec6:	5d c0       	rjmp	.+186    	; 0x1f82 <__vector_125+0x148>
		udd_ack_overflow_event();
    1ec8:	82 e0       	ldi	r24, 0x02	; 2
    1eca:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    1ece:	80 91 a8 23 	lds	r24, 0x23A8
    1ed2:	86 ff       	sbrs	r24, 6
    1ed4:	5b c0       	rjmp	.+182    	; 0x1f8c <__vector_125+0x152>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    1ed6:	80 91 cc 04 	lds	r24, 0x04CC
    1eda:	81 fd       	sbrc	r24, 1
    1edc:	57 c0       	rjmp	.+174    	; 0x1f8c <__vector_125+0x152>
    1ede:	b4 db       	rcall	.-2200   	; 0x1648 <udd_ctrl_interrupt_tc_setup>
    1ee0:	81 11       	cpse	r24, r1
    1ee2:	54 c0       	rjmp	.+168    	; 0x1f8c <__vector_125+0x152>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    1ee4:	80 91 9a 23 	lds	r24, 0x239A
    1ee8:	82 30       	cpi	r24, 0x02	; 2
    1eea:	41 f4       	brne	.+16     	; 0x1efc <__vector_125+0xc2>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1eec:	84 e0       	ldi	r24, 0x04	; 4
    1eee:	80 93 9a 23 	sts	0x239A, r24
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    1ef2:	e8 ea       	ldi	r30, 0xA8	; 168
    1ef4:	f3 e2       	ldi	r31, 0x23	; 35
    1ef6:	02 e0       	ldi	r16, 0x02	; 2
    1ef8:	06 93       	lac	Z, r16
    1efa:	48 c0       	rjmp	.+144    	; 0x1f8c <__vector_125+0x152>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    1efc:	83 30       	cpi	r24, 0x03	; 3
    1efe:	09 f0       	breq	.+2      	; 0x1f02 <__vector_125+0xc8>
    1f00:	45 c0       	rjmp	.+138    	; 0x1f8c <__vector_125+0x152>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    1f02:	e1 eb       	ldi	r30, 0xB1	; 177
    1f04:	f3 e2       	ldi	r31, 0x23	; 35
    1f06:	04 e0       	ldi	r16, 0x04	; 4
    1f08:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1f0a:	e9 ea       	ldi	r30, 0xA9	; 169
    1f0c:	f3 e2       	ldi	r31, 0x23	; 35
    1f0e:	04 e0       	ldi	r16, 0x04	; 4
    1f10:	05 93       	las	Z, r16
    1f12:	3c c0       	rjmp	.+120    	; 0x1f8c <__vector_125+0x152>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    1f14:	80 e1       	ldi	r24, 0x10	; 16
    1f16:	80 93 ca 04 	sts	0x04CA, r24
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	17 df       	rcall	.-466    	; 0x1d4c <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    1f1e:	81 e8       	ldi	r24, 0x81	; 129
    1f20:	15 df       	rcall	.-470    	; 0x1d4c <udd_ep_abort>
		}
#endif
		udc_reset();
    1f22:	0e 94 9e 06 	call	0xd3c	; 0xd3c <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    1f26:	10 92 c3 04 	sts	0x04C3, r1
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    1f2a:	e9 ea       	ldi	r30, 0xA9	; 169
    1f2c:	f3 e2       	ldi	r31, 0x23	; 35
    1f2e:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    1f30:	96 e0       	ldi	r25, 0x06	; 6
    1f32:	90 93 a8 23 	sts	0x23A8, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    1f36:	80 e4       	ldi	r24, 0x40	; 64
    1f38:	80 83       	st	Z, r24
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    1f3a:	e1 eb       	ldi	r30, 0xB1	; 177
    1f3c:	f3 e2       	ldi	r31, 0x23	; 35
    1f3e:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    1f40:	90 93 b0 23 	sts	0x23B0, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    1f44:	80 83       	st	Z, r24
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    1f46:	8e e8       	ldi	r24, 0x8E	; 142
    1f48:	93 e2       	ldi	r25, 0x23	; 35
    1f4a:	80 93 ac 23 	sts	0x23AC, r24
    1f4e:	90 93 ad 23 	sts	0x23AD, r25
		// Reset endpoint control management
		udd_ctrl_init();
    1f52:	a2 da       	rcall	.-2748   	; 0x1498 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    1f54:	1b c0       	rjmp	.+54     	; 0x1f8c <__vector_125+0x152>
	}

	if (udd_is_suspend_event()) {
    1f56:	80 91 cb 04 	lds	r24, 0x04CB
    1f5a:	86 ff       	sbrs	r24, 6
    1f5c:	07 c0       	rjmp	.+14     	; 0x1f6c <__vector_125+0x132>
		udd_ack_suspend_event();
    1f5e:	80 e4       	ldi	r24, 0x40	; 64
    1f60:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	79 da       	rcall	.-2830   	; 0x145a <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    1f68:	59 d1       	rcall	.+690    	; 0x221c <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    1f6a:	10 c0       	rjmp	.+32     	; 0x1f8c <__vector_125+0x152>
	}

	if (udd_is_resume_event()) {
    1f6c:	80 91 cb 04 	lds	r24, 0x04CB
    1f70:	85 ff       	sbrs	r24, 5
    1f72:	0c c0       	rjmp	.+24     	; 0x1f8c <__vector_125+0x152>
		udd_ack_resume_event();
    1f74:	80 e2       	ldi	r24, 0x20	; 32
    1f76:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	6e da       	rcall	.-2852   	; 0x145a <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    1f7e:	51 d1       	rcall	.+674    	; 0x2222 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    1f80:	05 c0       	rjmp	.+10     	; 0x1f8c <__vector_125+0x152>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    1f82:	80 91 cb 04 	lds	r24, 0x04CB
    1f86:	84 ff       	sbrs	r24, 4
    1f88:	e6 cf       	rjmp	.-52     	; 0x1f56 <__vector_125+0x11c>
    1f8a:	c4 cf       	rjmp	.-120    	; 0x1f14 <__vector_125+0xda>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    1f8c:	ff 91       	pop	r31
    1f8e:	ef 91       	pop	r30
    1f90:	bf 91       	pop	r27
    1f92:	af 91       	pop	r26
    1f94:	9f 91       	pop	r25
    1f96:	8f 91       	pop	r24
    1f98:	7f 91       	pop	r23
    1f9a:	6f 91       	pop	r22
    1f9c:	5f 91       	pop	r21
    1f9e:	4f 91       	pop	r20
    1fa0:	3f 91       	pop	r19
    1fa2:	2f 91       	pop	r18
    1fa4:	0f 91       	pop	r16
    1fa6:	0f 90       	pop	r0
    1fa8:	0b be       	out	0x3b, r0	; 59
    1faa:	0f 90       	pop	r0
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	0f 90       	pop	r0
    1fb0:	1f 90       	pop	r1
    1fb2:	18 95       	reti

00001fb4 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    1fb4:	1f 92       	push	r1
    1fb6:	0f 92       	push	r0
    1fb8:	0f b6       	in	r0, 0x3f	; 63
    1fba:	0f 92       	push	r0
    1fbc:	11 24       	eor	r1, r1
    1fbe:	0b b6       	in	r0, 0x3b	; 59
    1fc0:	0f 92       	push	r0
    1fc2:	0f 93       	push	r16
    1fc4:	1f 93       	push	r17
    1fc6:	2f 93       	push	r18
    1fc8:	3f 93       	push	r19
    1fca:	4f 93       	push	r20
    1fcc:	5f 93       	push	r21
    1fce:	6f 93       	push	r22
    1fd0:	7f 93       	push	r23
    1fd2:	8f 93       	push	r24
    1fd4:	9f 93       	push	r25
    1fd6:	af 93       	push	r26
    1fd8:	bf 93       	push	r27
    1fda:	cf 93       	push	r28
    1fdc:	df 93       	push	r29
    1fde:	ef 93       	push	r30
    1fe0:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    1fe2:	80 91 cc 04 	lds	r24, 0x04CC
    1fe6:	81 fd       	sbrc	r24, 1
    1fe8:	03 c0       	rjmp	.+6      	; 0x1ff0 <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    1fea:	2e db       	rcall	.-2468   	; 0x1648 <udd_ctrl_interrupt_tc_setup>
    1fec:	81 11       	cpse	r24, r1
    1fee:	b7 c0       	rjmp	.+366    	; 0x215e <__vector_126+0x1aa>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    1ff0:	82 e0       	ldi	r24, 0x02	; 2
    1ff2:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    1ff6:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    1ffa:	81 95       	neg	r24
    1ffc:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    1ffe:	e8 ea       	ldi	r30, 0xA8	; 168
    2000:	f3 e2       	ldi	r31, 0x23	; 35
    2002:	e8 1b       	sub	r30, r24
    2004:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2006:	20 81       	ld	r18, Z
    2008:	31 81       	ldd	r19, Z+1	; 0x01
    200a:	28 5a       	subi	r18, 0xA8	; 168
    200c:	33 42       	sbci	r19, 0x23	; 35
    200e:	36 95       	lsr	r19
    2010:	27 95       	ror	r18
    2012:	36 95       	lsr	r19
    2014:	27 95       	ror	r18
    2016:	36 95       	lsr	r19
    2018:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    201a:	82 2f       	mov	r24, r18
    201c:	86 95       	lsr	r24
    201e:	20 ff       	sbrs	r18, 0
    2020:	02 c0       	rjmp	.+4      	; 0x2026 <__vector_126+0x72>
    2022:	90 e8       	ldi	r25, 0x80	; 128
    2024:	01 c0       	rjmp	.+2      	; 0x2028 <__vector_126+0x74>
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    202a:	e8 2f       	mov	r30, r24
    202c:	ef 70       	andi	r30, 0x0F	; 15
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	ee 0f       	add	r30, r30
    2032:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2034:	28 2f       	mov	r18, r24
    2036:	33 27       	eor	r19, r19
    2038:	27 fd       	sbrc	r18, 7
    203a:	30 95       	com	r19
    203c:	22 27       	eor	r18, r18
    203e:	33 0f       	add	r19, r19
    2040:	22 1f       	adc	r18, r18
    2042:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2044:	e2 0f       	add	r30, r18
    2046:	f3 1f       	adc	r31, r19
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    2048:	ee 0f       	add	r30, r30
    204a:	ff 1f       	adc	r31, r31
    204c:	ee 0f       	add	r30, r30
    204e:	ff 1f       	adc	r31, r31
    2050:	ee 0f       	add	r30, r30
    2052:	ff 1f       	adc	r31, r31
    2054:	e8 55       	subi	r30, 0x58	; 88
    2056:	fc 4d       	sbci	r31, 0xDC	; 220
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2058:	90 81       	ld	r25, Z
    205a:	95 ff       	sbrs	r25, 5
    205c:	80 c0       	rjmp	.+256    	; 0x215e <__vector_126+0x1aa>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    205e:	00 e2       	ldi	r16, 0x20	; 32
    2060:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2062:	81 11       	cpse	r24, r1
    2064:	77 c0       	rjmp	.+238    	; 0x2154 <__vector_126+0x1a0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2066:	80 91 9a 23 	lds	r24, 0x239A
    206a:	84 30       	cpi	r24, 0x04	; 4
    206c:	19 f4       	brne	.+6      	; 0x2074 <__vector_126+0xc0>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    206e:	5b da       	rcall	.-2890   	; 0x1526 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2070:	13 da       	rcall	.-3034   	; 0x1498 <udd_ctrl_init>
    2072:	75 c0       	rjmp	.+234    	; 0x215e <__vector_126+0x1aa>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2074:	c0 91 aa 23 	lds	r28, 0x23AA
    2078:	d0 91 ab 23 	lds	r29, 0x23AB

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    207c:	80 91 ee 27 	lds	r24, 0x27EE
    2080:	90 91 ef 27 	lds	r25, 0x27EF
    2084:	00 91 96 23 	lds	r16, 0x2396
    2088:	10 91 97 23 	lds	r17, 0x2397
    208c:	98 01       	movw	r18, r16
    208e:	2c 0f       	add	r18, r28
    2090:	3d 1f       	adc	r19, r29
    2092:	82 17       	cp	r24, r18
    2094:	93 07       	cpc	r25, r19
    2096:	18 f4       	brcc	.+6      	; 0x209e <__vector_126+0xea>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2098:	ec 01       	movw	r28, r24
    209a:	c0 1b       	sub	r28, r16
    209c:	d1 0b       	sbc	r29, r17
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    209e:	80 91 ec 27 	lds	r24, 0x27EC
    20a2:	90 91 ed 27 	lds	r25, 0x27ED
    20a6:	ae 01       	movw	r20, r28
    20a8:	6e e8       	ldi	r22, 0x8E	; 142
    20aa:	73 e2       	ldi	r23, 0x23	; 35
    20ac:	80 0f       	add	r24, r16
    20ae:	91 1f       	adc	r25, r17
    20b0:	fc d0       	rcall	.+504    	; 0x22aa <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    20b2:	0c 0f       	add	r16, r28
    20b4:	1d 1f       	adc	r17, r29
    20b6:	00 93 96 23 	sts	0x2396, r16
    20ba:	10 93 97 23 	sts	0x2397, r17

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    20be:	28 97       	sbiw	r28, 0x08	; 8
    20c0:	69 f4       	brne	.+26     	; 0x20dc <__vector_126+0x128>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    20c2:	80 91 98 23 	lds	r24, 0x2398
    20c6:	90 91 99 23 	lds	r25, 0x2399
    20ca:	80 0f       	add	r24, r16
    20cc:	91 1f       	adc	r25, r17

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    20ce:	20 91 ea 27 	lds	r18, 0x27EA
    20d2:	30 91 eb 27 	lds	r19, 0x27EB
    20d6:	82 17       	cp	r24, r18
    20d8:	93 07       	cpc	r25, r19
    20da:	88 f0       	brcs	.+34     	; 0x20fe <__vector_126+0x14a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    20dc:	00 93 ee 27 	sts	0x27EE, r16
    20e0:	10 93 ef 27 	sts	0x27EF, r17
		if (NULL != udd_g_ctrlreq.over_under_run) {
    20e4:	e0 91 f2 27 	lds	r30, 0x27F2
    20e8:	f0 91 f3 27 	lds	r31, 0x27F3
    20ec:	30 97       	sbiw	r30, 0x00	; 0
    20ee:	29 f0       	breq	.+10     	; 0x20fa <__vector_126+0x146>
			if (!udd_g_ctrlreq.over_under_run()) {
    20f0:	19 95       	eicall
    20f2:	81 11       	cpse	r24, r1
    20f4:	02 c0       	rjmp	.+4      	; 0x20fa <__vector_126+0x146>
				// Stall ZLP
				udd_ctrl_stall_data();
    20f6:	fb d9       	rcall	.-3082   	; 0x14ee <udd_ctrl_stall_data>
    20f8:	32 c0       	rjmp	.+100    	; 0x215e <__vector_126+0x1aa>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    20fa:	07 da       	rcall	.-3058   	; 0x150a <udd_ctrl_send_zlp_in>
    20fc:	30 c0       	rjmp	.+96     	; 0x215e <__vector_126+0x1aa>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    20fe:	80 91 ee 27 	lds	r24, 0x27EE
    2102:	90 91 ef 27 	lds	r25, 0x27EF
    2106:	08 17       	cp	r16, r24
    2108:	19 07       	cpc	r17, r25
    210a:	f9 f4       	brne	.+62     	; 0x214a <__vector_126+0x196>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    210c:	e0 91 f2 27 	lds	r30, 0x27F2
    2110:	f0 91 f3 27 	lds	r31, 0x27F3
    2114:	30 97       	sbiw	r30, 0x00	; 0
    2116:	11 f4       	brne	.+4      	; 0x211c <__vector_126+0x168>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2118:	ea d9       	rcall	.-3116   	; 0x14ee <udd_ctrl_stall_data>
    211a:	21 c0       	rjmp	.+66     	; 0x215e <__vector_126+0x1aa>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    211c:	19 95       	eicall
    211e:	81 11       	cpse	r24, r1
    2120:	02 c0       	rjmp	.+4      	; 0x2126 <__vector_126+0x172>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2122:	e5 d9       	rcall	.-3126   	; 0x14ee <udd_ctrl_stall_data>
    2124:	1c c0       	rjmp	.+56     	; 0x215e <__vector_126+0x1aa>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2126:	20 91 98 23 	lds	r18, 0x2398
    212a:	30 91 99 23 	lds	r19, 0x2399
    212e:	80 91 96 23 	lds	r24, 0x2396
    2132:	90 91 97 23 	lds	r25, 0x2397
    2136:	82 0f       	add	r24, r18
    2138:	93 1f       	adc	r25, r19
    213a:	80 93 98 23 	sts	0x2398, r24
    213e:	90 93 99 23 	sts	0x2399, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2142:	10 92 96 23 	sts	0x2396, r1
    2146:	10 92 97 23 	sts	0x2397, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    214a:	e8 ea       	ldi	r30, 0xA8	; 168
    214c:	f3 e2       	ldi	r31, 0x23	; 35
    214e:	02 e0       	ldi	r16, 0x02	; 2
    2150:	06 93       	lac	Z, r16
    2152:	05 c0       	rjmp	.+10     	; 0x215e <__vector_126+0x1aa>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2154:	80 38       	cpi	r24, 0x80	; 128
    2156:	11 f4       	brne	.+4      	; 0x215c <__vector_126+0x1a8>
		udd_ctrl_in_sent();
    2158:	ee d9       	rcall	.-3108   	; 0x1536 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    215a:	01 c0       	rjmp	.+2      	; 0x215e <__vector_126+0x1aa>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    215c:	e4 da       	rcall	.-2616   	; 0x1726 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    215e:	ff 91       	pop	r31
    2160:	ef 91       	pop	r30
    2162:	df 91       	pop	r29
    2164:	cf 91       	pop	r28
    2166:	bf 91       	pop	r27
    2168:	af 91       	pop	r26
    216a:	9f 91       	pop	r25
    216c:	8f 91       	pop	r24
    216e:	7f 91       	pop	r23
    2170:	6f 91       	pop	r22
    2172:	5f 91       	pop	r21
    2174:	4f 91       	pop	r20
    2176:	3f 91       	pop	r19
    2178:	2f 91       	pop	r18
    217a:	1f 91       	pop	r17
    217c:	0f 91       	pop	r16
    217e:	0f 90       	pop	r0
    2180:	0b be       	out	0x3b, r0	; 59
    2182:	0f 90       	pop	r0
    2184:	0f be       	out	0x3f, r0	; 63
    2186:	0f 90       	pop	r0
    2188:	1f 90       	pop	r1
    218a:	18 95       	reti

0000218c <main>:
/*! \brief Main function. Execution starts here.
 */
int main(void)
{

	sysclk_init();
    218c:	0e 94 8b 03 	call	0x716	; 0x716 <sysclk_init>
	irq_initialize_vectors();
    2190:	87 e0       	ldi	r24, 0x07	; 7
    2192:	e0 ea       	ldi	r30, 0xA0	; 160
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	82 83       	std	Z+2, r24	; 0x02
	cpu_irq_enable();
    2198:	78 94       	sei
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    219a:	10 92 de 27 	sts	0x27DE, r1
    219e:	10 92 df 27 	sts	0x27DF, r1
    21a2:	10 92 e0 27 	sts	0x27E0, r1
    21a6:	10 92 e1 27 	sts	0x27E1, r1
    21aa:	10 92 e2 27 	sts	0x27E2, r1
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	80 93 e3 27 	sts	0x27E3, r24

	// Initialize the sleep manager
	sleepmgr_init();

	board_init();
    21b4:	db d8       	rcall	.-3658   	; 0x136c <board_init>
	ui_init();
    21b6:	0e 94 27 01 	call	0x24e	; 0x24e <ui_init>
	ui_powerdown();
    21ba:	0e 94 57 01 	call	0x2ae	; 0x2ae <ui_powerdown>
	
	PORTD_DIR = 0xff;
    21be:	8f ef       	ldi	r24, 0xFF	; 255
    21c0:	80 93 60 06 	sts	0x0660, r24
	PORTC_DIR = 0x00;
    21c4:	10 92 40 06 	sts	0x0640, r1
	PORTD_OUT = 0x00;
    21c8:	10 92 64 06 	sts	0x0664, r1
	// Start USB stack to authorize VBus monitoring
	udc_start();
    21cc:	0e 94 9c 06 	call	0xd38	; 0xd38 <udc_start>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    21d0:	ce ed       	ldi	r28, 0xDE	; 222
    21d2:	d7 e2       	ldi	r29, 0x27	; 39
    21d4:	8f ed       	ldi	r24, 0xDF	; 223
    21d6:	97 e2       	ldi	r25, 0x27	; 39
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    21d8:	a8 e4       	ldi	r26, 0x48	; 72
    21da:	b0 e0       	ldi	r27, 0x00	; 0
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    21dc:	f8 94       	cli

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    21de:	28 81       	ld	r18, Y
    21e0:	21 11       	cpse	r18, r1
    21e2:	07 c0       	rjmp	.+14     	; 0x21f2 <main+0x66>
    21e4:	fc 01       	movw	r30, r24
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    21e6:	2f 5f       	subi	r18, 0xFF	; 255

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    21e8:	31 91       	ld	r19, Z+
    21ea:	33 23       	and	r19, r19
    21ec:	e1 f3       	breq	.-8      	; 0x21e6 <main+0x5a>
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    21ee:	21 11       	cpse	r18, r1
    21f0:	02 c0       	rjmp	.+4      	; 0x21f6 <main+0x6a>
		cpu_irq_enable();
    21f2:	78 94       	sei
    21f4:	f3 cf       	rjmp	.-26     	; 0x21dc <main+0x50>
    21f6:	3c 91       	ld	r19, X

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    21f8:	e2 2f       	mov	r30, r18
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	ee 5f       	subi	r30, 0xFE	; 254
    21fe:	ff 4d       	sbci	r31, 0xDF	; 223
    2200:	23 2f       	mov	r18, r19
    2202:	21 7f       	andi	r18, 0xF1	; 241
    2204:	30 81       	ld	r19, Z
    2206:	23 2b       	or	r18, r19
    2208:	2c 93       	st	X, r18
	sleep_enable();
    220a:	2c 91       	ld	r18, X
    220c:	21 60       	ori	r18, 0x01	; 1
    220e:	2c 93       	st	X, r18

	cpu_irq_enable();
    2210:	78 94       	sei
	sleep_enter();
    2212:	88 95       	sleep

	sleep_disable();
    2214:	2c 91       	ld	r18, X
    2216:	2e 7f       	andi	r18, 0xFE	; 254
    2218:	2c 93       	st	X, r18
    221a:	e0 cf       	rjmp	.-64     	; 0x21dc <main+0x50>

0000221c <main_suspend_action>:
	}
}

void main_suspend_action(void)
{
	ui_powerdown();
    221c:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <ui_powerdown>
    2220:	08 95       	ret

00002222 <main_resume_action>:
}

void main_resume_action(void)
{
	ui_wakeup();
    2222:	0c 94 a7 01 	jmp	0x34e	; 0x34e <ui_wakeup>
    2226:	08 95       	ret

00002228 <main_sof_action>:
}

void main_sof_action(void)
{
	if (!main_b_generic_enable)
    2228:	80 91 dd 23 	lds	r24, 0x23DD
    222c:	88 23       	and	r24, r24
    222e:	19 f0       	breq	.+6      	; 0x2236 <main_sof_action+0xe>
		return;
	ui_process(udd_get_frame_number());
    2230:	58 dc       	rcall	.-1872   	; 0x1ae2 <udd_get_frame_number>
    2232:	0c 94 a8 01 	jmp	0x350	; 0x350 <ui_process>
    2236:	08 95       	ret

00002238 <main_remotewakeup_enable>:
}

void main_remotewakeup_enable(void)
{
	ui_wakeup_enable();
    2238:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <ui_wakeup_enable>
    223c:	08 95       	ret

0000223e <main_remotewakeup_disable>:
}

void main_remotewakeup_disable(void)
{
	ui_wakeup_disable();
    223e:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <ui_wakeup_disable>
    2242:	08 95       	ret

00002244 <main_generic_enable>:
}

bool main_generic_enable(void)
{
	main_b_generic_enable = true;
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	80 93 dd 23 	sts	0x23DD, r24
	return true;
}
    224a:	08 95       	ret

0000224c <main_generic_disable>:

void main_generic_disable(void)
{
	main_b_generic_enable = false;
    224c:	10 92 dd 23 	sts	0x23DD, r1
    2250:	08 95       	ret

00002252 <main_hid_set_feature>:
}

void main_hid_set_feature(uint8_t* report)
{
	if (report[0] == 0xAA && report[1] == 0x55
    2252:	fc 01       	movw	r30, r24
    2254:	20 81       	ld	r18, Z
    2256:	2a 3a       	cpi	r18, 0xAA	; 170
    2258:	69 f4       	brne	.+26     	; 0x2274 <main_hid_set_feature+0x22>
    225a:	21 81       	ldd	r18, Z+1	; 0x01
    225c:	25 35       	cpi	r18, 0x55	; 85
    225e:	51 f4       	brne	.+20     	; 0x2274 <main_hid_set_feature+0x22>
			&& report[2] == 0xAA && report[3] == 0x55) {
    2260:	22 81       	ldd	r18, Z+2	; 0x02
    2262:	2a 3a       	cpi	r18, 0xAA	; 170
    2264:	39 f4       	brne	.+14     	; 0x2274 <main_hid_set_feature+0x22>
    2266:	83 81       	ldd	r24, Z+3	; 0x03
    2268:	85 35       	cpi	r24, 0x55	; 85
    226a:	21 f4       	brne	.+8      	; 0x2274 <main_hid_set_feature+0x22>
		// Disconnect USB Device
		udc_stop();
    226c:	0e 94 c8 06 	call	0xd90	; 0xd90 <udc_stop>
		ui_powerdown();
    2270:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <ui_powerdown>
    2274:	08 95       	ret

00002276 <__udivmodhi4>:
    2276:	aa 1b       	sub	r26, r26
    2278:	bb 1b       	sub	r27, r27
    227a:	51 e1       	ldi	r21, 0x11	; 17
    227c:	07 c0       	rjmp	.+14     	; 0x228c <__udivmodhi4_ep>

0000227e <__udivmodhi4_loop>:
    227e:	aa 1f       	adc	r26, r26
    2280:	bb 1f       	adc	r27, r27
    2282:	a6 17       	cp	r26, r22
    2284:	b7 07       	cpc	r27, r23
    2286:	10 f0       	brcs	.+4      	; 0x228c <__udivmodhi4_ep>
    2288:	a6 1b       	sub	r26, r22
    228a:	b7 0b       	sbc	r27, r23

0000228c <__udivmodhi4_ep>:
    228c:	88 1f       	adc	r24, r24
    228e:	99 1f       	adc	r25, r25
    2290:	5a 95       	dec	r21
    2292:	a9 f7       	brne	.-22     	; 0x227e <__udivmodhi4_loop>
    2294:	80 95       	com	r24
    2296:	90 95       	com	r25
    2298:	bc 01       	movw	r22, r24
    229a:	cd 01       	movw	r24, r26
    229c:	08 95       	ret

0000229e <__tablejump2__>:
    229e:	ee 0f       	add	r30, r30
    22a0:	ff 1f       	adc	r31, r31

000022a2 <__tablejump__>:
    22a2:	05 90       	lpm	r0, Z+
    22a4:	f4 91       	lpm	r31, Z
    22a6:	e0 2d       	mov	r30, r0
    22a8:	19 94       	eijmp

000022aa <memcpy>:
    22aa:	fb 01       	movw	r30, r22
    22ac:	dc 01       	movw	r26, r24
    22ae:	02 c0       	rjmp	.+4      	; 0x22b4 <memcpy+0xa>
    22b0:	01 90       	ld	r0, Z+
    22b2:	0d 92       	st	X+, r0
    22b4:	41 50       	subi	r20, 0x01	; 1
    22b6:	50 40       	sbci	r21, 0x00	; 0
    22b8:	d8 f7       	brcc	.-10     	; 0x22b0 <memcpy+0x6>
    22ba:	08 95       	ret

000022bc <memset>:
    22bc:	dc 01       	movw	r26, r24
    22be:	01 c0       	rjmp	.+2      	; 0x22c2 <memset+0x6>
    22c0:	6d 93       	st	X+, r22
    22c2:	41 50       	subi	r20, 0x01	; 1
    22c4:	50 40       	sbci	r21, 0x00	; 0
    22c6:	e0 f7       	brcc	.-8      	; 0x22c0 <memset+0x4>
    22c8:	08 95       	ret

000022ca <strcmp>:
    22ca:	fb 01       	movw	r30, r22
    22cc:	dc 01       	movw	r26, r24
    22ce:	8d 91       	ld	r24, X+
    22d0:	01 90       	ld	r0, Z+
    22d2:	80 19       	sub	r24, r0
    22d4:	01 10       	cpse	r0, r1
    22d6:	d9 f3       	breq	.-10     	; 0x22ce <strcmp+0x4>
    22d8:	99 0b       	sbc	r25, r25
    22da:	08 95       	ret

000022dc <strcpy>:
    22dc:	fb 01       	movw	r30, r22
    22de:	dc 01       	movw	r26, r24
    22e0:	01 90       	ld	r0, Z+
    22e2:	0d 92       	st	X+, r0
    22e4:	00 20       	and	r0, r0
    22e6:	e1 f7       	brne	.-8      	; 0x22e0 <strcpy+0x4>
    22e8:	08 95       	ret

000022ea <_exit>:
    22ea:	f8 94       	cli

000022ec <__stop_program>:
    22ec:	ff cf       	rjmp	.-2      	; 0x22ec <__stop_program>
